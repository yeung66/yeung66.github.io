<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>YeungYeah 的乱写地</title><link>https://scottyeung.top/</link><description>YeungYeah 的乱写地中记录了作者的所思所想及所为。</description><generator>Hugo 0.83.1 https://gohugo.io/</generator><language>zh-CN</language><managingEditor>yeungyeah@qq.com (YeungYeah)</managingEditor><webMaster>yeungyeah@qq.com (YeungYeah)</webMaster><lastBuildDate>Sun, 31 Dec 2023 10:49:26 +0000</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://scottyeung.top/atom.xml"/><item><title>2023 年底记录</title><link>https://scottyeung.top/2023/record-of-2023/</link><guid isPermaLink="true">https://scottyeung.top/2023/record-of-2023/</guid><pubDate>Sun, 31 Dec 2023 18:42:19 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>上周末就有了写年度总结的想法，新建文件后用语音写了一大堆，感觉像是在对自己的一些倾诉一样，只能是写给自己看的，于是搁置了一周后选择新建了一个文件，重新写一版可以对外发布的。&lt;/p>
&lt;p>今年其实算是一个重要的里程碑，完成了从学生到打工人的身份转变。身份的转变，角色的转变，所处环境的转变，其实都给自己带来了挺多的思考与想法。不过在平时工作时间也不多，很多想法出现在脑子里想了一下，最后可能也没想出个所以然，或者因为没有记录下来而导致可能想出来也忘掉了。干脆就借着年度记录这个机会，写点总结。&lt;/p>
&lt;h2 id="告别校园">告别校园&lt;/h2>
&lt;p>今年六月，总算是结束了长达十九年的求学生涯。
因为工作在去年就已经尘埃落定签好了三方，所以剩下的这段校园时光也还算挺轻松&lt;/p>
&lt;ul>
&lt;li>一月在家玩耍；&lt;/li>
&lt;li>二月回校开始搞毕设剩下的内容；&lt;/li>
&lt;li>三月把工作简单写了个专利以满足毕业要求；&lt;/li>
&lt;li>四月冲刺毕业论文；&lt;/li>
&lt;li>五月完成答辩；&lt;/li>
&lt;li>六月和家人毕业旅行和毕业典礼。&lt;/li>
&lt;/ul>
&lt;p>总体而言，最后的校园时光平淡而顺利，顺利毕业，拿到学位，找到工作，也算是心满意足了😌&lt;/p>
&lt;h2 id="开始工作">开始工作&lt;/h2>
&lt;p>毕业离校没休息多久，就开始入职成为一个正式的打工人了。虽然去年实习的时候其实也工作了几个月，但是正式工作和实习还是不太一样的，毕竟实习可以随时跑路，而正式工作就没有退路了，尤其是作为宝贵的应届生身份，再怎样也得混个几年经验再跑去社招。&lt;/p>
&lt;p>第一份工作，选了一个服务端的业务开发，还算是比较符合发展方向的。记得入职的第一天和师兄 one one 的时候就说到，要相信做的事情是有意义的。虽然这话听起来不过像是自我鼓励甚至是自我安慰，但是后面在小红书评论区偶然看到，有人发现并用上了我负责新增的 features，还是觉得工作似乎好像确实还是有点意义的。&lt;/p>
&lt;p>然而虽然是一个技术开发，但是日常的工作其实大多数时候都在拉通对齐，以及文档分析。最核心的 coding 反而占比不会很多，甚至&lt;strong>某种程度上，交流沟通协作的能力相比于技术水平更加重要&lt;/strong>，尤其是在业务开发。&lt;/p>
&lt;p>为什么作为开发写代码反而不多？
一方面是业务系统大多数其实都已经发展得比较成熟，很多内容其实都建设得差不多，对于新的需求往往能够复用已有的链路，即使有变更也只是在这上面进行建设与修补；另一方面就是公司一直在搞提效，而提效的方向和手段，往往就是把一些代码的开发需求通过抽象的方式转变成通过配置的流程编排，将写代码变成可参考复制的配置，然后把这些工作下发给外包完成 &lt;del>，能提效多少不好说，终归是个数字，但是一线开发也不见能够闲多少&lt;/del> 。&lt;/p>
&lt;p>不过这个也可能刚好是我所在团队，所负责应用的原因，但是正如大老板在初次全员会上面说，其实公司并没有义务帮助大家成长，所以还是得靠自己。没有机会就创造机会，机会少就抓住机会，不写代码就看代码，看文档，看完就变成我的了😆&lt;/p>
&lt;p>不过干多了业务需求，其实也会反思技术在里面的作用，技术是否真的这么重要，有时感觉业务知识也是很重要，能创造并拉来业务需求，促成交易才是更重要的。空有一套优秀的系统，但是卖不出去没人用，又能发挥出什么价值？就算是垃圾，只要用的人多了占据了足够的市场地位，一样能够劣币驱逐良币。 &lt;del>这样看来还是销售的能力最强！&lt;/del>&lt;/p>
&lt;h2 id="编程道路">编程道路&lt;/h2>
&lt;p>虽然如此，但是我还是真的发自内心地喜欢写代码的，喜欢看与折腾各种有趣的东西。除了工作的东西以外，今年好好学了下 F#, Rust 和 Kotlin。三个语言都是好东西，写起来各种爽，很好地满足了我对于函数式编程的喜爱与追求。&lt;/p>
&lt;p>在学习函数式编程的路上，有时候真的会觉得可能是见识不够，对于函数式的写法有点想像力匮乏了，有些时候是真的不知道应该如何用函数式来写，如何用递归来实现迭代。看了别人写的代码，见识过后，才知道原来可以这样写。&lt;/p>
&lt;p>今年也第一次全部完成了 Advent of Code 的挑战，虽然中间遇到不少挑战，比如一些没有见过的定理公式，又或者是中途出去团建了三天回来需要狂补进度，但最后还是磕磕绊绊地在圣诞当天完成了所有挑战，点亮所有图案。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/Dec-25-2023%2021-37-21.gif" alt="">&lt;/p>
&lt;p>虽然好像学了很多东西，好像会很多东西，但是内心其实还是会时不时地感到焦虑，会担心其实我搞这些东西对于我的工作到底有没有帮助，对我的能力有没有提升。如果真的跳槽，是否能够凭借这些技能帮我找到更好的工作？恐怕未必。这样想好像很功利，但是好像也没有办法，也只能不想那么多，先自己玩爽了再说。&lt;/p>
&lt;p>接下来学习（玩耍）的方向应该还是会继续聚焦于这三个语言以及函数式编程上面。至于工作相关的系统设计与中间件，可能还是返回到工作中学习吧，如果工作还有时间还没有被压垮的话。&lt;/p>
&lt;h2 id="对于金钱">对于金钱&lt;/h2>
&lt;p>正式工作之后，开始有比较稳定的金钱收入了，如何管理，如何使用，成为了一个重要的命题。以前常常看到对于财富自由的讨论，说实话对于这个目标很向往，而且我也很现实地明确自己打工的意义，就是赚钱。&lt;strong>赚钱嘛，不寒碜。&lt;/strong>&lt;/p>
&lt;p>怎样才算是财富自由呢？&lt;/p>
&lt;p>前两个月某晚上去跑步路上经过了一个彩票投注站，看到上面写着刮刮乐彩票中奖金额高达 20w，脑海中突然就在幻想自己中了会怎么样。中了 20w，我会怎么花呢？好像这个数额也没有特别大，真的都想不到要买什么，唯一能想到的可能就是买个车了。是不是 20w 太少，如果换到 50w 呢？好像差别也不大，如果换成 500w 呢？脑子里的第一想法居然是好像在深圳也不够买一套房，但其实如果给一个年薪二十万的公务员足够发二十五年工资了。&lt;/p>
&lt;p>似乎一次性得到一笔钱根本满足不了自己，相比之下，自己可能更倾向于获得持续稳定的收入。如何能够保持持续稳定的收入呢？说实话互联网行业并不能保证如此稳定，不知道能待多久，也不知道这个行业还能玩多久。因此单靠打工，并不能够自由。可能还是得从其他方便找到搞钱的方法。&lt;/p>
&lt;p>还有什么办法能够赚钱呢？积极探索中。&lt;/p>
&lt;h2 id="打造形象">打造形象&lt;/h2>
&lt;p>从 18 年开始写自己的博客，到现在也已经有 5 年时间了，期间一直在使用 YeungYeah 这个名字和图像，并且逐渐扩建到各个平台当中，也算是初步搭建出一个自己的形象品牌，虽然估计认识的人也不多，不过总算是有个名字了。&lt;/p>
&lt;p>为什么需要有个名字？在互联网中，因为种种的原因，与他人建立起这种不同的 connection，是 web 最具有魅力的地方。而在互联网中，能打造出一个个人的品牌形象，积累到足够的 reputation，增添足够的影响力，会更容易与他人建立起 connection。connection 有什么用？具体的说不上，但是对我意味着更多的机会，更多的可能性。&lt;/p>
&lt;p>因此今年来开始更加积极地&lt;a href="https://twitter.com/ScottYeung">发推&lt;/a>看推互动，甚至开始运营我的&lt;a href="https://www.xiaohongshu.com/user/profile/617be18f000000000201b44a">小红书&lt;/a>，写点 coding 技术相关的内容。数据看起来其实也很一般，不过无所谓，也是抱着玩一玩的心态。&lt;/p>
&lt;p>今年参加高中同学婚礼时和高中同学聚了一下，了解到他当前正在小红书等社交平台做编程自媒体，做编程辅导和知识付费，感觉是一条不错的搞钱路子。于是质疑自媒体，了解自媒体，成为自媒体。这也是我开始玩小红书的一部分原因。
当然其实也并不意味着我就要当自媒体然后开始流量变现赚钱，对于自己也有很明确的认知，大概率是干不来的。&lt;/p>
&lt;p>希望能够有朝一日 from nobody into somebody.&lt;/p>
&lt;h2 id="面对-ai">面对 AI&lt;/h2>
&lt;p>去年也是差不多十二月这个时候，ChatGPT 开发供外部使用。当时我也马上注册了个帐号开始使用，但是使用体验还是很普通，玩了一会就丢一边了。然后过了几个月到三月后，突然就超进化成为人人都在感叹的划时代技术。&lt;/p>
&lt;p>其实 AI 技术已经发展几年了，从 CNN 神经网络开始进入 AI 的时代，科研圈中 AI 技术井喷，各种 AI+ 的文章出现，AI 本身也在快速发展。大家都知道有 AI，各家也喜欢在产品中标注 power by XXAI 技术。但也只是拿 AI 的技术用在已有的产品上面。&lt;/p>
&lt;p>然后 ChatGPT 的一出现，彻底火出圈了，出圈到连我爸都来问我有没有方法可以用。ChatGPT 确实是个好东西，现在几乎已经成为许多人离不开的必备工具了。我自己也用 ChatGPT API 搞了一个（感谢&lt;a href="https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web">ChatGPT-Next-Web&lt;/a>）。&lt;/p>
&lt;p>ChatGPT 的出现，为许多人带来了许多机会与流量。尽管可能仍然会有人因为种种的原因和观念而不接受甚至抗拒 AI 的发展，但是我觉得这已经是大势所趋，AI 发展无可避免。
未来的 AI 估计将会成为像水电一样的基础资源无处不在，融合进人们的日常生活当中~~（这话听起来怎么这么像以前云计算的宣传口号）~~ 。&lt;/p>
&lt;hr>
&lt;p>今年作为重新开放后的第一年，同时也是身份转变进入社会成为打工人的第一年。于我而言，所有事情都在起步中，所有事情都具有新希望。可能性就在眼前，得抓紧机会，成了就成，不成也无所谓，尽力而为，&lt;strong>顺势而为&lt;/strong>。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E8%AE%B0%E5%BD%95/">记录</category><category domain="https://scottyeung.top/tags/summary/">summary</category><category domain="https://scottyeung.top/tags/%E7%94%9F%E6%B4%BB/">生活</category><category domain="https://scottyeung.top/tags/AI/">AI</category></item><item><title>Advent of Code 2023: Day5</title><link>https://scottyeung.top/2023/advent-of-code-day-5/</link><guid isPermaLink="true">https://scottyeung.top/2023/advent-of-code-day-5/</guid><pubDate>Sat, 09 Dec 2023 20:22:52 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;blockquote>
&lt;p>题目具体可以看 &lt;a href="https://adventofcode.com/2023/day/5">这里&lt;/a>&lt;/p>
&lt;p>简单概括描述就是：
给定一些整数输入 seeds，并且给出一些 mapping (list list (dst, src, length))，如果 seed 落在 [src, src + length] 这个区间里面，就 map 成 (dst + seed - src)。求经过多次 mapping 之后，seeds 当中的最小值。&lt;/p>
&lt;/blockquote>
&lt;h2 id="暴力-with-f">暴力 with F#&lt;/h2>
&lt;p>看到题目很直观的一个想法就是对于输入的每个 seed 都扫一遍所有的 mapping，得到一个最终的 seed，并从中求最小值。part1 很轻松就过掉，但是到了 part2 的时候，每两个 seed 表示输入的是 [seed1, seed1 + seed2] 区间内的所有 seeds，加起来超过 198 亿个 seeds。&lt;/p>
&lt;p>最开始直接用 F# 写了一个暴力法模拟，但是跑了一段时间后可能因为数量太多直接给我中断了。于是手动把输入分成了两半，然后跑两次，一次大概要跑 &lt;strong>8 分钟&lt;/strong>，不过能跑到正确的答案。&lt;/p>
&lt;p>既然这么耗时，第一时间想到的就是用多线程并行来跑。在 F# 当中，可以很简单地通过 async block + Async.Parallel 实现并行计算，看起来能跑满七八个核。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-FSharp" data-lang="FSharp">&lt;span class="n">seeds&lt;/span>
&lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nn">Seq&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">map&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">fun&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;span class="n">async&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">let&lt;/span> &lt;span class="nv">allSeeds&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="o">[|&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">..&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int64&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">|]&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">maps&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nn">Array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fold&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">fun&lt;/span> &lt;span class="n">seeds&lt;/span> &lt;span class="n">map&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">seed2Map&lt;/span> &lt;span class="n">seeds&lt;/span> &lt;span class="n">map&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">allSeeds&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nn">Seq&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">min&lt;/span>
&lt;span class="o">})&lt;/span>
&lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nn">Async&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Parallel&lt;/span>
&lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nn">Async&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">RunSynchronously&lt;/span>
&lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nn">Array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">min&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 F# 当中使用多线程跑，&lt;strong>5 分钟多点&lt;/strong>就能跑完。&lt;/p>
&lt;p>既然跑得慢，那么切换到一个跑得更快的语言，用 Rust 来写，应该能提升不少。&lt;/p>
&lt;h2 id="暴力-with-rust">暴力 with Rust&lt;/h2>
&lt;p>先用 Rust 写了个逻辑一样的暴力模拟，基本上就是把 F# 写的逻辑搬了过来，&lt;strong>4 分钟&lt;/strong>左右能跑完。这个速度比我在 F# 用多线程来跑还快！Rust 的性能果然名不虚传。&lt;/p>
&lt;p>然后继续用多线程的方法又写了一版，每两个 seed 作为一组，开一个线程来逐个 seed 处理。然后&lt;strong>一分钟&lt;/strong>左右就能跑完，确实快，&lt;del>Rust 实在是太强辣&lt;/del>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">handlers&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">[];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cnt&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">seeds&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">maps_clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">maps&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clone&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">handler&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">thread&lt;/span>::&lt;span class="n">spawn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">move&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cnt&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">maps_clone&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fold&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">seed_2_map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">handlers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">handler&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">handlers&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">into_iter&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">handler&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">handler&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="真正的解法">真正的解法&lt;/h2>
&lt;p>之前暴力的解法是逐个 seed 做多次 mapping 得到结果再找最小值，但是这个数量太多，需要跑的次数太多。但实际也不需要每个 seed 做 mapping，完全可以根据区间来做 mapping.&lt;/p>
&lt;p>对于一个 seeds 的区间 range，经过一轮 mapping 后，&lt;/p>
&lt;ul>
&lt;li>如果跟其中的一个 map 有交集，可以取这个交集出来做 mapping&lt;/li>
&lt;li>交集部分两个端点进行 mapping 可以得到新 range&lt;/li>
&lt;li>非交集部分取出来得到新 range，继续和其他的 map 进行处理&lt;/li>
&lt;li>如果都没有交集，那么直接进入下一轮 mapping&lt;/li>
&lt;/ul>
&lt;p>具体代码如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="cp">#[derive(Copy, Clone)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Range&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">start&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">end&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Range&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">end&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Range&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Range&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">is_empty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">intersect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">other&lt;/span>: &lt;span class="nc">Range&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Range&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Range&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">start&lt;/span>: &lt;span class="nc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">end&lt;/span>: &lt;span class="nc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">difference&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">other&lt;/span>: &lt;span class="nc">Range&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="p">(&lt;/span>&lt;span class="n">Range&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Range&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">left_diff&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Range&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">right_diff&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Range&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">left_diff&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">right_diff&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ranges&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">seeds&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">maps&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mapped_ranges&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">[];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">range&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ranges&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">has_intersect&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mapped_range&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Range&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">start&lt;/span>: &lt;span class="o">*&lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">end&lt;/span>: &lt;span class="o">*&lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">intersection&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">range&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">intersect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mapped_range&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">intersection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_empty&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">has_intersect&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mapped_ranges&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Range&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">start&lt;/span>: &lt;span class="nc">intersection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">end&lt;/span>: &lt;span class="nc">intersection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">left_diff&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">right_diff&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">range&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">difference&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mapped_range&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">left_diff&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_empty&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ranges&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">left_diff&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">right_diff&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_empty&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ranges&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">right_diff&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">has_intersect&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mapped_ranges&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">range&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ranges&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mapped_ranges&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">ranges&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">range&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">range&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>切换到这个解法后，直接 &lt;strong>0.05s&lt;/strong> 秒了！&lt;/p>
&lt;p>一个小问题：对于这种需要三个嵌套循环的代码逻辑，如果转成使用函数式编程的思路，比如用 F# 来实现，该怎么办呢？具体请看下回分解。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E7%AE%97%E6%B3%95/">算法</category><category domain="https://scottyeung.top/tags/Rust/">Rust</category><category domain="https://scottyeung.top/tags/coding-%E8%AE%B0%E5%BD%95/">coding 记录</category><category domain="https://scottyeung.top/tags/coding/">coding</category></item><item><title>cross-rs: 无配置可跨平台编译与测试</title><link>https://scottyeung.top/2023/cross-rs-build/</link><guid isPermaLink="true">https://scottyeung.top/2023/cross-rs-build/</guid><pubDate>Sat, 18 Nov 2023 23:08:25 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>虽然说 Rust 是跨平台的，原生也是可以通过指定 target 的方式来进行跨平台编译，但实际使用过程中总是常常因为一些系统配置或者应用的缺失导致编译失败。&lt;/p>
&lt;p>因此合理的一个想法就是，通过 docker 这种标准化的隔离环境进行编译。rust 中就有这样的应用：&lt;a href="https://github.com/cross-rs/cross">cross&lt;/a>，根据指定的 target，开启合适的容器来进行编译。这样就不用再为配置环境或者安装相应的工具链而费心。&lt;/p>
&lt;p>使用起来非常简单，只需要前置安装一个 docker 或者 podman，使得系统可支持容器就行。在 macOS 上通过 OrbStack 使用 docker 的体验很好，安装完命令行直接支持。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 首先安装 cross&lt;/span>
cargo install cross --git https://github.com/cross-rs/cross
&lt;span class="c1"># 启动 docker&lt;/span>
&lt;span class="c1"># 指定 target 进行编译&lt;/span>
cross build --target x86_64-unknown-linux-musl
cross build --target x86_64-unknown-linux-musl --release
&lt;span class="c1"># 指定 target 进行测试&lt;/span>
cross &lt;span class="nb">test&lt;/span> --target mips64-unknown-linux-gnuabi64
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不过编译速度稍慢，可能是因为套了层 docker 的原因，比直接编译慢多了，甚至感觉还不如以前在 Windows 上用 WSL 来编译 Linux 版本。&lt;/p>
&lt;p>另外这样用 docker 来编译的话，一些依赖 crate 的编译结果也没得缓存，每次都需要重新把所有 crate 都编译一次，有点折磨。&lt;/p>
&lt;p>不过看了下 &lt;a href="https://github.com/cross-rs/cross/issues/381">issue&lt;/a>，说是实际其实已经支持 incremental build 的。
但是使用 cargo 和 cross 来编译，都只会使用 &lt;code>target/debug|release&lt;/code> 目录下的内容作为 cache，而不同 target 之间是不能够复用的。如果在 cross 为指定 target 编译一次后，&lt;code>target/release&lt;/code> 目录下的内容都会变成只针对指定 target 有效，这时使用 cargo 本地编译就得全部重新编译（包括全部依赖的 crate 😭）。而这样 cargo 编译后，又重写了 &lt;code>target/release&lt;/code> 的内容，后续使用 cross 跨平台编译又得重新全部编译一次。虽然最终 cross 打出来的内容会放在 &lt;code>target/{target-host}/release&lt;/code> 下面，但是似乎使用的是 &lt;code>target/release&lt;/code>，导致这个能否增量编译的设置就很迷，几乎等于没有。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/Rust/">Rust</category><category domain="https://scottyeung.top/tags/%E5%B7%A5%E5%85%B7/">工具</category><category domain="https://scottyeung.top/tags/%E5%AD%A6%E4%B9%A0/">学习</category></item><item><title>双十一与我</title><link>https://scottyeung.top/2023/11-11-shopping-festival/</link><guid isPermaLink="true">https://scottyeung.top/2023/11-11-shopping-festival/</guid><pubDate>Sat, 11 Nov 2023 10:53:30 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>不知不觉双十一购物节这个概念已经诞生了这么久，然而现在都双十一似乎也越来越没有购物节的氛围，优惠没感觉到多少，基本提不起购买欲。&lt;/p>
&lt;p>对我来说，现在已经换了种方式参与双十一，从过去提前一个月参与各种活动拿红包然后准点下单，到现在工作为双十一大促赶需求和做保障，真的颇有感概。&lt;/p>
&lt;p>以前的双十一，确实能有优惠，虽然优惠不大，也是实打实的。也正是这些优惠的存在，给予了当时还是学生的我一个购物花钱的理由和机会。有什么想买的都可以接着双十一这个机会来购买。&lt;/p>
&lt;p>大一那年买了个 kindle，大二买了双鞋和电动牙刷，大三买了个骨传导耳机，大四那年换了台笔记本。真的到了双十一，就突然有了个理由，可以去买一些自己以前想买的东西，尤其是学生阶段的自己其实还没自己的收入，没有属于自己可以随意支配的钱。消费就更需要一个理由。双十一就是一个很好的给自己和给家人购物的理由。&lt;/p>
&lt;p>最早期的双十一，直接就给你降价优惠，给你发消费红包，消费者是真的能够实打实地体现到优惠。双十一当天随便点开淘宝都能发现相关优惠并被吸引到。&lt;/p>
&lt;p>然后搞跨店满减，买多了才能优惠。但是不同商品满足的满减条件又不一样，变得需要各种拼凑计算，宛然成为数学题。算来算去要买什么东西，加起来买多少钱，要不要和别人凑单。&lt;/p>
&lt;p>然后开始搞预售，把双十一周期拉长，订金抵双倍这种。也算是有那么一点优惠，就是要等一等。&lt;/p>
&lt;p>接着还搞组队 pk，逼迫人每天去转发链接，pk 赢了才能拿那点点红包，pk 输了还会红包清零。第一年还能和几个好友每天拉人 pk，然后最后也就拿到了几十块红包。第二年看到还出了类似的活动，简直觉得去年的自己是个傻逼。&lt;/p>
&lt;p>最后，今年的双十一还是基本什么都没买，一方面可能是因为确实没什么优惠，另一方面也是自己确确实实没有什么很需要的购物需求。但最主要的还是自己已经开始工作，有属于自己可以支配的钱，不需要再为购物找原因和理由。&lt;/p>
&lt;p>但是作为利益相关方，还是希望双十一能够大卖，大家也真的有钱能够消费吧。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E7%94%9F%E6%B4%BB/">生活</category><category domain="https://scottyeung.top/tags/%E8%AE%B0%E5%BD%95/">记录</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category></item><item><title>动态时间线聚合 - Cloudflare 重制版</title><link>https://scottyeung.top/2023/rss-timeline-cloudflare/</link><guid isPermaLink="true">https://scottyeung.top/2023/rss-timeline-cloudflare/</guid><pubDate>Sat, 04 Nov 2023 11:46:58 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>上个周末把在服务器运行的 rss 聚合程序迁移到了 Cloudflare 处运行。&lt;strong>真的 Cloudflare 太香了！！&lt;/strong>&lt;/p>
&lt;h2 id="why">why&lt;/h2>
&lt;ol>
&lt;li>之前部署到服务器这个流程太麻烦
&lt;ol>
&lt;li>本地修改代码 -&amp;gt; 打包发布 -&amp;gt; scp 上传服务器 -&amp;gt; 服务器关掉正在运行的程序 -&amp;gt; 重新运行程序&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>查看和管理数据麻烦：
&lt;ol>
&lt;li>因为使用本地 sqlite 数据库文件来保存抓取的文件，所以导致查看服务器上的数据就比较麻烦，得 ssh 连上去然后跑一个 sqlite client 的 shell 程序执行 sql 语句来查询，显示也不好看&lt;/li>
&lt;li>基于文件存储，本地一份，服务器一份，数据常常不同步，还得专门搞一个功能来只抓数据&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>网络环境不是很好。
&lt;ol>
&lt;li>需要访问 vercel 部署的网页和访问 telegram api，都对网络环境有点要求，本地开发调试还得走个代理，又需要个额外配置&lt;/li>
&lt;li>即使是部署在境外服务器上，网络访问也常常出现链接的问题，log 里面一大堆网络 error&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="方案">方案&lt;/h2>
&lt;p>使用 Cloudflare 提供的&lt;/p>
&lt;ul>
&lt;li>cron 定时任务调用 worker
&lt;ul>
&lt;li>worker 根据定时任务的 cron 种类来区分重发任务和抓取任务&lt;/li>
&lt;li>抓取任务：访问各个 RSS 源解析数据象，并把新的数据发送到 Telegram 频道并保存到数据库当中&lt;/li>
&lt;li>重发任务：捞取数据库当中没有发送成功的数据，重新发送到 Telegram 频道当中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用 D1 数据库存储数据&lt;/li>
&lt;/ul>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>Cloudflare 提供的 worker 需要用 JS / TS 实现。因为之前其实就已经写过 typescript 版本，所以其实直接迁移调试就可以了。&lt;/p>
&lt;p>大概的创建的流程可以看 &lt;a href="https://scottyeung.top/2023/cloudflare-app-dev/">Cloudflare 应用&lt;/a>，主要是有几个点需要注意&lt;/p>
&lt;ul>
&lt;li>Cloudflare worker 启动都是通过其入口函数来启动的。传递的环境变量和数据库实例都是通过入口函数的 env 变量来传递的。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">async&lt;/span> &lt;span class="nx">scheduled&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>: &lt;span class="kt">ScheduledEvent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">env&lt;/span>: &lt;span class="kt">Env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ctx&lt;/span>: &lt;span class="kt">ExecutionContext&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// A Cron Trigger can make requests to other endpoints on the Internet,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// publish to a Queue, query a D1 Database, and much more.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// We&amp;#39;ll keep it simple and make an API call to a Cloudflare API:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">resp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://api.cloudflare.com/client/v4/ips&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">wasSuccessful&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">resp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;success&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;fail&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// You could store this result in KV, write to a D1 Database, or publish to a Queue.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// In this template, we&amp;#39;ll just log the result:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`trigger fired at &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cron&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">wasSuccessful&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>因为 Cloudflare 的 JS 运行时并不是标准的 node，所以一些依赖 node api 的 npm 库可能会跑不了。之前的一些依赖库可能就需要替换，或者手工对 npm 库源代码进行修改。&lt;/li>
&lt;/ul>
&lt;h2 id="体验">体验&lt;/h2>
&lt;ul>
&lt;li>本地开发可以使用 remote 运行调试，直接用上 Cloudflare 的网络环境和数据库来进行测试。&lt;/li>
&lt;li>使用 Cloudflare worker 后可以用官方提供的 wrangle 一键部署，流程大大简化。&lt;/li>
&lt;li>使用 Cloudflare 的 dashboard 可以随时查看运行情况（但是拉历史日志好像比较麻烦？）。&lt;/li>
&lt;li>可以用在 dashboard 上面修改一些简单的配置，比如定时间隔和环境变量。&lt;/li>
&lt;li>可以用 D1 数据库的 console 查询数据库情况，并且做些简单的增删改查。&lt;/li>
&lt;/ul></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/serverless/">serverless</category><category domain="https://scottyeung.top/tags/JavaScript/">JavaScript</category><category domain="https://scottyeung.top/tags/Cloudflare/">Cloudflare</category><category domain="https://scottyeung.top/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/">云服务</category><category domain="https://scottyeung.top/tags/coding-%E8%AE%B0%E5%BD%95/">coding 记录</category><category domain="https://scottyeung.top/tags/rss/">rss</category><category domain="https://scottyeung.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/">自动化</category></item><item><title>Cloudflare 应用开发使用小记</title><link>https://scottyeung.top/2023/cloudflare-app-dev/</link><guid isPermaLink="true">https://scottyeung.top/2023/cloudflare-app-dev/</guid><pubDate>Sun, 29 Oct 2023 16:45:21 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;blockquote>
&lt;p>能给大众白嫖使用的 serverless 服务，像 Cloudflare 和 Vercel 就是好的服务商。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202310291700756.png" alt="">&lt;/p>
&lt;p>最近因为各种原因，突然想把在服务器上运行的 rss-timeline 记录（详情可以看这里 -- &lt;a href="https://scottyeung.top/2023/my-timeline/">我的动态时间线聚合&lt;/a>）的程序换成在云服务上面部署，最终选择了 Cloudflare，并且实现了一版。下面是实现过程中一些记录。&lt;/p>
&lt;h2 id="worker">worker&lt;/h2>
&lt;p>cloudflare 通过 worker 的方式提供服务，worker 有两种触发的方式&lt;/p>
&lt;ul>
&lt;li>http trigger. 通过发送 http 请求进行触发，也是最常用的一种，实现 fetch 方法处理请求即可
&lt;ul>
&lt;li>在 ChatGPT API 刚出的时候，很多人都因为 API 地址不能直连，所以搞一个 worker 请求转发就可以了。比如&lt;a href="https://github.com/noobnooc/noobnooc/discussions/9">这个&lt;/a>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>cron trigger. 通过定时任务的方式来触发任务。通过配置 cron job 来声明执行的周期。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// The scheduled handler is invoked at the interval set in our wrangler.toml&amp;#39;s
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// [[triggers]] configuration.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="nx">scheduled&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>: &lt;span class="kt">ScheduledEvent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">env&lt;/span>: &lt;span class="kt">Env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ctx&lt;/span>: &lt;span class="kt">ExecutionContext&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// A Cron Trigger can make requests to other endpoints on the Internet,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// publish to a Queue, query a D1 Database, and much more.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// We&amp;#39;ll keep it simple and make an API call to a Cloudflare API:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">resp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://api.cloudflare.com/client/v4/ips&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">wasSuccessful&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">resp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;success&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;fail&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// You could store this result in KV, write to a D1 Database, or publish to a Queue.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// In this template, we&amp;#39;ll just log the result:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`trigger fired at &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cron&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">wasSuccessful&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="c1">// The event handler is invoked whenever an HTTP request is made to your
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// worker. The request will trigger the event handler regardless of the
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// request method or URL path.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">request&lt;/span>: &lt;span class="kt">Request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">env&lt;/span>: &lt;span class="kt">Env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ctx&lt;/span>: &lt;span class="kt">ExecutionContext&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Response&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Hello from the scheduled worker at &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以通过在配置文件 wrangle.toml 或者 dashboard 中的设置中声明环境变量。环境变量通过传递进来的 env 参数使用。&lt;/p>
&lt;p>免费版主要是限制&lt;/p>
&lt;ul>
&lt;li>每次调用的 CPU 执行时间 10ms
&lt;ul>
&lt;li>官网中介绍用量很少，基本都不会超&lt;/li>
&lt;li>但实际跑下来发现好像超了也没事？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>每天的请求执行次数 100, 000&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202310282110476.png" alt="">&lt;/p>
&lt;h3 id="本地调试">本地调试&lt;/h3>
&lt;p>本地可以通过 wrangle 来进行开发调试和部署&lt;/p>
&lt;p>cron worker 可以通过 &lt;code>--test-scheduled&lt;/code> 参数，实现 http 调用 &lt;code>http://localhost:8787/__scheduled?cron=*+*+*+*+*&lt;/code> 触发 trigger.&lt;/p>
&lt;p>有些时候本地访问一些网站可能因为某些奇怪因素访问不了，可以通过 &lt;code>--remote&lt;/code> 参数，实现本地运行远程调试，这样就可以突破网络限制访问某些网站。另外也可以通过这个方法直接操作数据库，这样就可以直接在网站就看到数据库的更新情况。&lt;/p>
&lt;h3 id="non-standard-nodejs-runtime">non-standard Node.js runtime&lt;/h3>
&lt;p>cloudflare worker 本质上其实是 edge function，其实际的运行时并不是正宗的 node 环境，所以一些对于 node api 的使用，是可能会满足不了的。部分到 API cloudflare 的运行时实现了，在自己的代码中可以直接用。但往往通过 npm install 使用的依赖就容易会出现这种兼容性问题。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202310291635833.png" alt="">&lt;/p>
&lt;p>对于这些有兼容性问题的 npm 库，建议在本地运行时看看实际跑到的代码是否真的用到这些 node api，如果没有，只是在文件当中导入的话，可以注释掉。动态语言 js 的一个爽点就是，就算代码有问题，但只要没有跑到有问题的地方，也还是能跑，就算这样注释掉一个依赖导入，但只要调用的代码没有使用它们，照样能跑。&lt;/p>
&lt;p>如果调用的 node api 在 Cloudflare 中有实现的，通过换个方式导入也可以。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// Do this:
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">Buffer&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;node:buffer&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Do not do this:
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">Buffer&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;buffer&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="d1">D1&lt;/h2>
&lt;p>cloudflare 提供的关系型数据库&lt;/p>
&lt;p>创建数据库后可以在 worker 里面添加绑定，直接访问到数据库&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="p">[[&lt;/span>&lt;span class="nx">d1_databases&lt;/span>&lt;span class="p">]]&lt;/span>
&lt;span class="nx">binding&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;DB&amp;#34;&lt;/span> &lt;span class="c"># available in your Worker on env.DB&lt;/span>
&lt;span class="nx">database_name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;database&amp;#34;&lt;/span>
&lt;span class="nx">database_id&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;database_id&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>实际使用起来就是会在入口处传递 env，然后这个数据库的实例也随着 env 传进来，然后就可以手写 sql 进行数据处理了。&lt;/p>
&lt;p>数据库操作可以通过&lt;/p>
&lt;ul>
&lt;li>官网网页可以创建表，已经修改行数据
&lt;ul>
&lt;li>官网也提供一个 console 进行 sql 语句的执行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>也可以在命令后通过 wrangle 执行 sql 语句，从而更新数据库
&lt;ul>
&lt;li>这种方式还可以实现一些表结构的更新，比如增加一列&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>免费的用量限制&lt;/p>
&lt;ul>
&lt;li>最多创建 10 个数据库&lt;/li>
&lt;li>单个数据库 500MB&lt;/li>
&lt;li>每月读 5,000,000 行，写 100,000 行&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://scottyeung.top/my-images/%E6%88%AA%E5%B1%8F2023-10-28%2021.07.36.png" alt="">&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/serverless/">serverless</category><category domain="https://scottyeung.top/tags/JavaScript/">JavaScript</category><category domain="https://scottyeung.top/tags/Cloudflare/">Cloudflare</category><category domain="https://scottyeung.top/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/">云服务</category></item><item><title>拥抱 AI 的 Arc 浏览器</title><link>https://scottyeung.top/2023/ai-in-arc-browser/</link><guid isPermaLink="true">https://scottyeung.top/2023/ai-in-arc-browser/</guid><pubDate>Sun, 15 Oct 2023 08:00:00 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>虽然前面的使用小记中对于 Arc 浏览器进行了不少吐槽，但是其特色和美观的外表还是挺吸引我的，于是在自己的电脑上总是时不时又忍不住切换默认的浏览器到 Arc 上面。现在整体使用感觉还是挺不错的，除了看不到扩展的状态，需要在使用的时候点菜单来唤起扩展以外。&lt;/p>
&lt;p>在这次切换并更新 Arc 浏览器后，发现 Arc 浏览器在设置上多了一个关于 AI 的 tab，叫做 Max，看起来还挺有意思的。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202310142324997.png" alt="">&lt;/p>
&lt;p>根据这个设置页简单看了一下，主要有下面的功能：&lt;/p>
&lt;ul>
&lt;li>根据当前页面内容进行提问&lt;/li>
&lt;li>链接内容根据 AI 进行一个预览生成&lt;/li>
&lt;li>利用 AI 为打开 tab 的 title 和下载文件名进行智能命名&lt;/li>
&lt;li>拉起 ChatGPT 提问&lt;/li>
&lt;/ul>
&lt;p>实际使用了一下，想法挺不错的，但是还可以有进一步的改进空间&lt;/p>
&lt;h2 id="link-preview">link preview&lt;/h2>
&lt;p>这个超链接 preview 的功能挺有意思的，可以在打开前先看看链接描述的内容。生成 preview 格式是一句话的 title，加上一些分组列出的属性。生成 preview 的内容其实也算准确，不过现阶段生成的 preview 语言都是固定是英语的，即使我调了一下浏览器的 Preferred languages 改成英语，生成的 preview 也还是英语的。虽然没错，但是其实对于帮助了解链接内容讲什么作用不是很大，不过感觉这个提升空间很大，如果继续优化估计会很强。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202310142327077.png" alt="">&lt;/p>
&lt;h2 id="chatgpt">ChatGPT&lt;/h2>
&lt;p>拉起 ChatGPT 就是一个比较 normal 的功能了，通过 option + command + G (windows 下应该是 alt + ctrl + G) 唤起。不过本质其实就是个启动器，输入问题后就是跳转到 &lt;a href="https://chat.openai.com/">chat.openai.com&lt;/a> 页面进行提问回答了。（不过发现现在的 ChatGPT 官网是不是放开了对区域的限制？挂🇭🇰网络访问还是非常丝滑的）&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202310142345200.png" alt="">&lt;/p>
&lt;h2 id="页面内容提问">页面内容提问&lt;/h2>
&lt;p>传统的页面搜索唤起后，如果搜索不到内容，可以进行提问，估计也是唤起 ChatGPT 来提问？但我这里尝试了几次都是遇到问题，返回 &lt;code>Sorry, I encountered an error.&lt;/code>。上网一搜好像也不是个例，尝鲜不了。&lt;/p>
&lt;h2 id="智能重命名">智能重命名&lt;/h2>
&lt;p>Arc 浏览器一个挺有意思的改动，就是去除了收藏夹的概念，转变为 pin tab 的概念。现在把 tab pin 后把这个标签页的 title 智能重命名，变得更短更整洁，用起来也还好。个人理解其实就是相当于收藏页面的时候，用 AI 自动为它生成一个标题。这个功能还是有点用的，毕竟很多时候添加收藏其实都不会给它加标题，直接用它的标题可能会巨长，或者也描述不清。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E7%94%9F%E4%BA%A7%E5%8A%9B/">生产力</category><category domain="https://scottyeung.top/tags/%E5%B7%A5%E5%85%B7/">工具</category><category domain="https://scottyeung.top/tags/%E8%AE%B0%E5%BD%95/">记录</category><category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category><category domain="https://scottyeung.top/tags/AI/">AI</category></item><item><title>围城之内：一位程序员的生活反思与职业选择</title><link>https://scottyeung.top/2023/thoughts-of-programmer-career/</link><guid isPermaLink="true">https://scottyeung.top/2023/thoughts-of-programmer-career/</guid><pubDate>Sat, 14 Oct 2023 20:19:57 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>前两天在抖音刷到了一个同是 23 年应届的 Java 开发程序员，也是在深圳工作。按他视频的介绍，早上九点上班，然后看起来也似乎是住的比较远，从罗湖站附近坐地铁来南山这边上班，可能也需要个一小时。晚上平均大概十点走，有事可能还会更晚，比如软件发布。公司体量应该还行，月 base 也有差不多 20k。刷到的时候已经因为工作强度高，常加班且加班时间长等原因，选择裸辞。&lt;/p>
&lt;p>第一眼看到他的生活以及他的选择的时候，觉得走人确实没什么问题，自己作为也同样在互联网大厂工作的人来说，能够体会到他这种高强度长时间工作的累（身体上的累和心累）。不过其实细看他的生活，其实对于这样累的生活方式，其实有挺多是可以通过一些方法或者舍弃一些东西来缓解的。&lt;/p>
&lt;ul>
&lt;li>通勤时间太长。可能因为租房价格的原因，所以选择租得比较远，住罗湖区来南山区上班，通勤来回感觉得两个小时了，而且途径一些大站上地铁，排队挤地铁通勤的体验也实在不好，看视频等两三次地铁才能上简直是窒息。要么加点钱住近点（多掏个 2k 能舒服很多），要么舍弃点其他因素（比如合租而不是不整租）。原本工作时间就长了，还花这么多在通勤，很窒息。&lt;/li>
&lt;li>每天还自己做饭，晚上下班后到家才做饭吃，并且做好第二天的饭。做饭也花上不少的时间，备材料，做饭，洗碗筷收拾，又花上个一小时。而且最主要的是这样下班后才回家做饭吃，一是太晚吃东西，饿得难受，二是这样岂不是就少了晚上吃饭这个摸鱼的时间了吗？&lt;/li>
&lt;li>&lt;strong>在时间如此紧缺的情况下，不单没有接受这种处境，反而想要通过拼一点来与这种处境抗争。&lt;/strong> 比如十一点多才到家，不赶紧休息还去做个饭，晚上还剪下视频，到差不多两点钟才睡觉，然后早上7点钟又起床。这样纯靠意志力来抗衡，其实终究会是被消磨干净。&lt;/li>
&lt;/ul>
&lt;p>当然对于这样的生活，大家都可以选择不要，选择离开，有些时候是真的难顶，真的会顶不住。然而离开后又能干什么呢？或者说你能不能做出舍弃，比如放弃相当的收入，或者放弃在大城市工作的机会。&lt;/p>
&lt;p>看 up 裸辞爽玩了半个月不到，然后又开始焦虑地找工作，但是还是在这一行里面，还是找类似的开发工作，面试类似的工作，又能够找出多少例外？因为今年毕业且已经工作，基本都只能够走社招，但经验又只工作了几个月，求职也不太容易。最新的视频是最后拿到了平安银行的开发，工资可能十来 k，号称是晚上七点多下班。但就这家在脉脉的风评，以及评论区的现身说法，我感觉是难保证这个下班时间的。这个 offer 本质上和前面干不下去的那家又有什么区别呢？&lt;/p>
&lt;p>&lt;del>不过 up 也已经因为这些视频收获了一些粉丝，正如某评论说的，不如就干脆把找工作作为工作，当自媒体算了🤣。也可能可以是下一步我的副业方向。&lt;/del>&lt;/p>
&lt;p>现在的互联网计算机行业就像围城一样，外面的人看到工资都高都觉得程序员这份工作很好，里面的人则因为这种心累而选择退出。我还能熬多久自己也不知道，不过现在的心态也已经从以前我能卷过它们，我能克服一切，到现在理解，接受，成为。不过人的接受阈值终究是有一条界线在，能够坚持多久，其实不好说，毕竟其实也并非完全不可能。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202310142029272.png" alt="">&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E7%94%9F%E6%B4%BB/">生活</category><category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category><category domain="https://scottyeung.top/tags/%E8%AE%B0%E5%BD%95/">记录</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category><category domain="https://scottyeung.top/tags/%E5%90%90%E6%A7%BD/">吐槽</category><category domain="https://scottyeung.top/tags/%E5%81%A5%E5%BA%B7/">健康</category><category domain="https://scottyeung.top/tags/Java/">Java</category></item><item><title>gradle 项目如何发布到 Maven 中央库</title><link>https://scottyeung.top/2023/gradle-deploy-maven-central/</link><guid isPermaLink="true">https://scottyeung.top/2023/gradle-deploy-maven-central/</guid><pubDate>Sat, 16 Sep 2023 22:34:26 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>如何把开发完成的 gradle 项目的产物发布到 Maven Central Repository 中，让大家可以使用到你的成果？上周走了一遍流程，把写的剪贴板操作的一个简单项目发布了一下，发现有点麻烦的，流程比较长，而且使用 gradle 的话，gradle 更新实在是太快，兼容性也太差，导致网上搜到到文档，其实都不太一样，更难绷的是是连 &lt;a href="https://central.sonatype.org/publish/publish-gradle">sonatype 官方给出的 gradle 发布教学文档&lt;/a> 也是跟实际最新 gradle8 版本的不一致，因此只能参考下里面的流程，而细节只能靠自己摸索。&lt;/p>
&lt;h2 id="发布本质">发布本质&lt;/h2>
&lt;p>项目发布本质上是将项目打包成一个可用的 artifact，里面有编译好字节码，以及包含项目相关信息的配置 pom 文件。这些产物可以上传到可供大众使用到托管平台中，如 &lt;a href="http://links.sonatype.com/products/nexus/pro/home">Sonatype Nexus Repository&lt;/a>，并最终同步到 Central Repository 当中。当需要使用依赖时，声明依赖的标识 groupId:artifactId:version，构建工具 Maven/gradle 就会自动到这些仓库获取依赖并使用。因此发布的核心操作其实就两个&lt;/p>
&lt;ol>
&lt;li>项目打包成产物&lt;/li>
&lt;li>产物上传到托管平台&lt;/li>
&lt;/ol>
&lt;h2 id="发布流程">发布流程&lt;/h2>
&lt;p>这里以发布到 sonatype 的仓库为例，这是一个开源的 artifact 托管平台，大家都可以使用，产物也都是公开的。&lt;/p>
&lt;blockquote>
&lt;p>这里用的都是最新的 gradle 8.2&lt;/p>
&lt;/blockquote>
&lt;h3 id="创建-ticket">创建 ticket&lt;/h3>
&lt;p>想要发布产物到公开仓库，首先需要到 sonatype 注册一个 &lt;a href="https://issues.sonatype.org/secure/Signup!default.jspa">JIRA 帐号&lt;/a>，然后提交一个 issue，为需要发布的产物创建一个 &lt;a href="https://issues.sonatype.org/secure/CreateIssue.jspa?pid=10134&amp;amp;issuetype=21">ticket&lt;/a>。在这个 ticket 当中，需要填写将发布产物的基本信息，包括 groupId，项目地址，项目代码管理地址（SCM）。&lt;/p>
&lt;p>在填写好 ticket 后，会由 sonatype 来审核相关信息，并会确认用户是否对使用的 groupId 具有所有权（即是否有 groupId 倒过来的域名控制权），比如如果我想要用自己的域名 top.yeungyeah 作为 groupId，就会要求我给域名的 dns 加个解析。除了这些通用域名，还可以使用 GitHub 提供的 GitHub Page 作为域名，如 io.github.username，这个的验证方法就比较简单，去创个 GitHub repo 即可。所以发布时的 groupId 得需要考虑下，不能乱填了。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202309161941492.png" alt="">&lt;/p>
&lt;h3 id="完善项目">完善项目&lt;/h3>
&lt;p>sonatype 对于发布的项目有一定的质量要求，其中就要求，除了项目编译后 jar 包，还需要将项目的源代码，以及 javadoc 都一并上传发布到托管平台。这就需要在 gradle 的构建配置文件&lt;code>build.gradle.kts&lt;/code>当中进行额外的配置。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="n">java&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">withJavadocJar&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">withSourcesJar&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另外，发布的项目其最终生成的 pom 配置文件里包含的信息要求也是完整的，比如项目的开发者信息，开源的 license，都需要进行额外的配置。&lt;/p>
&lt;h3 id="maven-publish">maven-publish&lt;/h3>
&lt;p>看到这里可能有些人会觉得很奇怪，为什么用 gradle，但是一直在说 Maven 的发布，发布也是发布到 Maven 的中央仓库当中。其实 gradle 是可以支持很多类型的依赖，除了 maven 以外，也可以支持 ivy。不过 Maven 的使用现在要更加广泛，所以基本都是在用 maven 仓库当中的依赖（而且 gradle 好像也没有搞自己的依赖格式标准）。&lt;/p>
&lt;p>最新的 gradle 可以用其提供的 maven-publish 插件来完成发布相关的功能，而不是此前的 maven 插件，上面文档提到的许多配置，在这个新的 maven-publish 插件都不可用了😂&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="n">plugins&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>
&lt;span class="nd">`maven&lt;/span>&lt;span class="p">-&lt;/span>&lt;span class="n">publish&lt;/span>&lt;span class="err">`&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">publishing&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">publications&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">create&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">MavenPublication&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="s2">&amp;#34;maven&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 自行替换产物描述信息
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">groupId&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;io.github.yeung66&amp;#34;&lt;/span>
&lt;span class="n">artifactId&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;clipboard-jvm&amp;#34;&lt;/span>
&lt;span class="n">version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">version&lt;/span>
&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">components&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;java&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">pom&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 填充生成的 POM 信息
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;clipboard-jvm&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">description&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;A simple clipboard library for jvm.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;https://github.com/yeung66/clipboard-jvm&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">licenses&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">license&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;The Apache License, Version 2.0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://www.apache.org/licenses/LICENSE-2.0.txt&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">developers&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">developer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">id&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;yeung66&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;YeungYeah&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">email&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;email@host.com&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">scm&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">connection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;scm:git:git://github.com/yeung66/clipboard-jvm.git&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">developerConnection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;scm:git:ssh://github.com/yeung66/clipboard-jvm.git&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;https://github.com/yeung66/clipboard-jvm&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">repositories&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">maven&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;OSSRH&amp;#34;&lt;/span>
&lt;span class="n">url&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">URI&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">credentials&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">username&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">project&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">properties&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;ossrhUsername&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">String&lt;/span>
&lt;span class="n">password&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">project&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">properties&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;ossrhPassword&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">String&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中帐号密码可以放到用户目录下的 gradle.properties 当中，防止泄漏。&lt;/p>
&lt;h3 id="signing">signing&lt;/h3>
&lt;p>在生成产物后，还需要对生成的产物进行一次签名，这样托管平台才能确保这个上传是由本人完成，保证产物的可靠性。对发布产物签名，需要先生成自己的密钥，并使用直接的私钥文件签名。然后把公钥上传到公钥服务器上面，供托管平台取得公钥验证签名。&lt;/p>
&lt;p>具体步骤如下&lt;/p>
&lt;ol>
&lt;li>首先使用 gpg 生成自己的密钥，可参考阮一峰的 &lt;a href="https://www.ruanyifeng.com/blog/2013/07/gpg.html">这个文档&lt;/a>&lt;/li>
&lt;li>根据上面生成的密钥，取得私钥的路径，使用私钥的密码，公钥的 keyId，并填入 gradle.properties 文件当中。为了安全，不泄漏个人信息，一般这种敏感信息可以放到用户目录下的配置文件而不是项目当中的，这样就能够好地避免随着代码仓库上传到 GitHub 而被泄漏。
&lt;ul>
&lt;li>
&lt;pre>&lt;code class="language-property" data-lang="property">signing.keyId= #The last 8 symbols of the keyId
signing.password= #passphrase used to protect your private key
signing.secretKeyRingFile= #absolute path to the secret key ring file containing your private key
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>(Since gpg 2.1, you need to export the keys with command gpg --keyring secring.gpg --export-secret-keys &amp;gt; ~/.gnupg/secring.gpg).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>把公钥上传到公钥服务器上
&lt;ol>
&lt;li>&lt;img src="https://scottyeung.top/my-images/202309162022777.png" alt="">&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>在构建问题当中添加 signing 的插件，并进行配置
&lt;pre>&lt;code>plugins {
...
signing
}
signing {
sign(publishing.publications[&amp;quot;maven&amp;quot;])
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;p>在进行上面的配置后，执行构建发布任务时，会自动对构建产物进行一个签名。&lt;/p>
&lt;h3 id="执行发布">执行发布&lt;/h3>
&lt;p>直接执行 gradle 的发布任务即可&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202309162043253.png" alt="">&lt;/p>
&lt;p>执行顺利的话，项目会将编译得到的产物打包，签名，然后上传到托管平台当中。此时可以在 &lt;a href="https://central.sonatype.org/publish/release/">托管平台&lt;/a> 里面进行一个 release 发布。&lt;/p>
&lt;p>在 staging repositories 当中找到刚刚发布的产物，检查上传的文件无误后，点击 close 按钮，就会自动推进到检查阶段，检查发布的产物是否符合标准，这里面的检查就包括上面提到的质量检查，信息检查。检查通过后会就会发送邮件提醒，然后就可以点击 release 按钮，正式将产物发布。发布后产物会同步到 Maven Central 仓库当中，就可以在 &lt;a href="https://mvnrepository.com/">mvnrepository&lt;/a> 或者 &lt;a href="https://central.sonatype.com/">sonatype central&lt;/a> 查询到。
不过这个 staging 的步骤好像也能通过 &lt;a href="https://github.com/Codearte/gradle-nexus-staging-plugin/">插件&lt;/a> 进行自动化。如果可以自动化估计可以简单点。&lt;/p>
&lt;hr>
&lt;p>至此，gradle 项目就可以成功发布到 Maven Central 仓库当中，供大家使用了。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/gradle/">gradle</category><category domain="https://scottyeung.top/tags/jvm/">jvm</category><category domain="https://scottyeung.top/tags/Java/">Java</category><category domain="https://scottyeung.top/tags/kotlin/">kotlin</category><category domain="https://scottyeung.top/tags/maven/">maven</category><category domain="https://scottyeung.top/tags/coding-%E8%AE%B0%E5%BD%95/">coding 记录</category></item><item><title>JVM 当中的剪贴板访问</title><link>https://scottyeung.top/2023/clipboard-access-jvm/</link><guid isPermaLink="true">https://scottyeung.top/2023/clipboard-access-jvm/</guid><pubDate>Sun, 10 Sep 2023 20:00:00 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>起因是想要写一个 kotlin 的脚本，用于读取剪贴板中的内容并保存到文件当中。然而网上搜了一圈，java 和 kotlin 给出的方法都是通过 jdk 中的 awt 包来获取系统剪贴板。因为 kotlin 脚本还是跑的 jvm target，所以方法还是通用的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.awt.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.awt.datatransfer.DataFlavor&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.awt.datatransfer.UnsupportedFlavorException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.IOException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Test&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">UnsupportedFlavorException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">clipboard&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Toolkit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultToolkit&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getSystemClipboard&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">transferable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clipboard&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContents&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">transferable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTransferData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DataFlavor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stringFlavor&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">toolkit&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Toolkit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getDefaultToolkit&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">clipboard&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">toolkit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">systemClipboard&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DataFlavor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">stringFlavor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">String&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个方法用是能用，而且支持操作的数据类型还挺全，除了文本，还能读写图片。然而有一个缺点，就是使用时必须关掉 headless 选项。kotlin 默认是关掉的，需要显示声明配置 &lt;code>kotlin -Djava.awt.headless=false&lt;/code>来禁用掉。&lt;/p>
&lt;blockquote>
&lt;p>Headless mode is a system configuration in which the display device, keyboard, or mouse is lacking. Sounds unexpected, but actually you can perform different operations in this mode, even with graphic data.&lt;/p>
&lt;/blockquote>
&lt;p>禁用掉 headless 模式后是代码是可用，然而运行起来时会拉起一个 jre 程序，虽然这个拉起的程序没有界面，但是还是会强制跳转切换一次窗口，体感很差。于是只能另寻办法，选择使用 nodejs，最后找到了 &lt;a href="https://github.com/sindresorhus/clipboardy">clipboardy&lt;/a>，一个简单好用的 npm 库，先实现了我的需求。后来细细看了下它的实现代码，是通过调用命令后的方式来实现访问系统剪贴板。然而调用系统命令的话，各个系统环境的命令都不同，如何兼顾可移植性，在不同的系统环境都能运行呢？解决的办法也很简单粗暴，手动为每个系统都写一个实现，并且针对如果某些系统没有这个操作系统剪贴板的命令程序，还在 npm 包里附带一个二进制作为 fallback。简单，但可用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">import&lt;/span> &lt;span class="nx">process&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;node:process&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">isWSL&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;is-wsl&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">termux&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./lib/termux.js&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">linux&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./lib/linux.js&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">macos&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./lib/macos.js&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">windows&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./lib/windows.js&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">platformLib&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">platform&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;darwin&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">macos&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;win32&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">windows&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;android&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">env&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PREFIX&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s1">&amp;#39;/data/data/com.termux/files/usr&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;You need to install Termux for this module to work on Android: https://termux.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">termux&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="c1">// `process.platform === &amp;#39;linux&amp;#39;` for WSL.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">isWSL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">windows&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">linux&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">})();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>于是很自然地借鉴这个思路，用 kotlin 也来实现一版。代码实现可见 &lt;a href="https://github.com/yeung66/clipboard-jvm">clipboard-jvm&lt;/a>，实现的思路也是通过不同的操作系统，调用不同的 shell 命令，访问与操作系统剪贴板。对于执行外部命令&lt;/p>
&lt;p>使用起来也很简单&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">import&lt;/span> &lt;span class="nn">org.yeungyeah.clipboard.Clipboard&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">clipboard&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getClipboard&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">get&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">get&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>原本想把依赖库发布到 maven central 仓库，这样脚本就可以一行直接使用。然而 maven 发布实在是麻烦，研究了几个小时，还是被一些相关的检查卡点了，只能够先 install 到本地，给自己先用。&lt;del>后续上传到 maven central 后再更新，也顺便更新一篇文章如何 deploy to maven central.&lt;/del>&lt;/p>
&lt;p>部署到 maven central 仓库后，就可以通过配置直接导入依赖使用了。比如在 java 项目，通过&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>io.github.yeung66&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>clipboard-jvm&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.0.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者是在 kotlin script 中，直接&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="nd">@file&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">DependsOn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;io.github.yeung66:clipboard-jvm:1.0.0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">import&lt;/span> &lt;span class="nn">org.yeungyeah.clipboard.Clipboard&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">clipboard&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getClipboard&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">get&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">get&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>起飞🛫️。不过只是测试了在macOS系统下面的使用，按理说其他系统也是可行的，如果有兴趣的可以试试玩玩。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/Java/">Java</category><category domain="https://scottyeung.top/tags/kotlin/">kotlin</category><category domain="https://scottyeung.top/tags/coding/">coding</category><category domain="https://scottyeung.top/tags/%E5%B7%A5%E5%85%B7/">工具</category><category domain="https://scottyeung.top/tags/JavaScript/">JavaScript</category></item></channel></rss>