<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>YeungYeah 的乱写地</title>
        <link>https://scottyeung.top/</link>
        <description>YeungYeah 的乱写地中记录了作者的所思所想及所为。</description>
        <generator>Hugo 0.83.1 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>yeungyeah@qq.com (YeungYeah)</managingEditor>
        
        
            <webMaster>yeungyeah@qq.com (YeungYeah)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Fri, 25 Jun 2021 20:14:06 &#43;0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="https://scottyeung.top/atom.xml" />
        
        
            <item>
                <title>996 的二三事</title>
                <link>https://scottyeung.top/2021/why-refuse-to-996/</link>
                <guid isPermaLink="true">https://scottyeung.top/2021/why-refuse-to-996/</guid>
                <pubDate>Fri, 25 Jun 2021 16:06:10 &#43;0800</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;从五月中在 B 站上面刷到一些关于政经与哲学的视频之后又重新勾起了自己对于这方面知识内容的兴趣，陆续关注了一些 up 主进行了解~~，人也变得越来越左~~。其中有个比较喜欢的 up &lt;a href=&#34;https://space.bilibili.com/23191782&#34;&gt;未明子&lt;/a&gt; 谈了点关于 996 的话题，深以为然，觉得还是启发挺大的，于是写点东西把它记录下来。&lt;/p&gt;
&lt;h2 id=&#34;什么是-996&#34;&gt;什么是 996&lt;/h2&gt;
&lt;p&gt;现在总是在说 996，到底是什么是 996 呢？&lt;/p&gt;
&lt;p&gt;从字面上的意思来看，就是工作时间变成了早上 9 点上班，晚上 9 点下班，每周工作六天。与传统的 965 相比，每周的工作的时间多了 27 小时。以互联网行业来说，这些多出来的工作时间在大多数公司都可以被算作加班时间，可以获得额外的加班费以及相应的福利，因而会有人觉得加班很好，甚至主动加班，主动 996 来开卷。可能是因为太多这样的情况，导致高收入都逐渐与 996 划上等号了，如果想要收入高点，就必须要 996，如果要不加班，就要选择接受较低的收入。&lt;/p&gt;
&lt;h2 id=&#34;996-的结果&#34;&gt;996 的结果&lt;/h2&gt;
&lt;p&gt;所以说 996 就是通过付出更长的加班时间来换取更高的收入吗？或者说如果给多点钱是不是就可以接受 996 呢？想法很美好，但现实很残酷。&lt;/p&gt;
&lt;p&gt;个人消费的目的可以分成两大类型，一是用于再生产，二则是用于提高生产力的发展。后者很明显，就是可以提高自身生产力的投入，例如去学习知识，去练习技能，去维护人脉等。再生产则是指不断更新和重复的生产，个人理解则是为了让状态复原所需要的消费，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;体力再生产：用于维持身体健康与体力恢复&lt;/li&gt;
&lt;li&gt;脑力再生产：娱乐提供情绪价值&lt;/li&gt;
&lt;li&gt;社会关系再生产：维护与他人的社会关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;社会关系再生产中有一种很重要的隐形支出，就是用于维护自己岗位，保护自己饭碗的再生产。这可以理解成需要付出一定的成本来保住工作的机会，换言之，工作的本质可以理解为个体户付出租金来换取工作的饭碗，这个付出的租金就是剩余价值。这个租金是隐形的，也是确实存在的。因为是隐形的，所以就需要与老板进行协商，但往往会被大家所忽略。&lt;/p&gt;
&lt;p&gt;996 的工作模式通过更多的工作时间提高了所创造的价值，但同时员工所需要付出的消费成本向随之增高，包括所付出的租金也相应按比例（甚至是更高的比例）提高了。更长时间的工作使得消费中各种再生产的成本大幅上涨：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;体力再生产：长时间工作容易使身体变差；缺乏时间去锻炼身体/保持健康&lt;/li&gt;
&lt;li&gt;脑力再生产：缺乏娱乐；缺乏脑力上的休息&lt;/li&gt;
&lt;li&gt;社会关系再生产：缺乏与他人交往的时间与机会&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些消费中的各项其实都可以通过时间来换取或者缓解成本，但是因为 996 的存在导致缺乏时间，使得各项的成本大幅上涨。而这些额外的消费成本其实是基本抵消甚至超过超时工作所获得的额外价值/收入，因而自己其实没什么收益，而公司与老板则通过躺收你多付出的租金，没有付出其余任何的代价，因而是净赚的。这也解释了为什么只要我们再努力一点，老板就能买大 house 了。&lt;/p&gt;
&lt;h2 id=&#34;996-的本质&#34;&gt;996 的本质&lt;/h2&gt;
&lt;p&gt;除了更长时间的工作以外，996 为什么还会使我们的消费成本大幅上涨呢？昨晚看完一个视频的讨论后，感觉很有启发。&lt;/p&gt;
&lt;p&gt;为什么 996 的工作时间是九点到九点呢？同样是干 12 个小时的工作模式，666 的效率不得要比 996 还要高吗？996 的工作模式当中，包含了中午饭以及晚饭，每顿饭一般都需要一个小时来解决，再加上吃饭前后工作的低效，其实就效率来讲，996 所带来的好处其实对于公司来说也不算多，尤其是许多人其实都会选择晚上吃完饭后回公司在办公时间摸鱼。如果说追求效率的话，大可以把工作时间提到 666，上下午各有两大段的工作时间，工作得更有效率，也更为纯粹。&lt;/p&gt;
&lt;p&gt;之所以是选择 99 这个工作时间区间，最大的主要原因还是想要包含了你的晚饭时间，进而控制你整个人。因为晚饭的时间被包含到了工作里面，所以就不能选择出去吃饭，就不能够与他人进行交际应酬，从而丧失了饭局时间，公关时间，商务时间。然而这些时间却往往是发展与交易诞生的地方，尤其是在中国式应酬的背景下，许多的生意都是在饭桌上面谈成。所以现在限制了这段时间，其实就是限制了个人发展机会，加大了自我发展的难度。同理，每周 6 天工作日也是如此，把你的休息日减少为一日，而你不得不把这一天的休息日完全拿来休息，而无法抽出时间与精力去参加应酬交际活动，也不会想把这天的休息时间拿去学习和自我提升。选择了 996，其实变相就等于放弃了这些机会，自绝了跳出去另寻机会的可能。&lt;/p&gt;
&lt;p&gt;所以说 996 的本质还不只是剥削，更多的是在 domination. 通过 996 的方式来控制来控制底下的员工，让其缺乏跳出被控制的能力。接受了 996 更像是接受了公司对自身的自我阉割，接受持续给老板打工的这个事实，甚至自觉加入到维护这份工作的任务中。&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1A84y1F7HE&#34;&gt;【政治经济学】为什么再怎么省钱还是穷：花钱的本质，上班的本质，薪水的本质，996的本质，老板的本质&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1U5411T7tV&#34;&gt;【社会观察】996的实质：不！是！剥！削！&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%93%B2%E5%AD%A6/">哲学</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E8%AE%A8%E8%AE%BA/">讨论</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E8%AE%B0%E5%BD%95/">记录</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>博客切换至 Hugo</title>
                <link>https://scottyeung.top/2021/transform-to-hugo/</link>
                <guid isPermaLink="true">https://scottyeung.top/2021/transform-to-hugo/</guid>
                <pubDate>Thu, 03 Jun 2021 12:07:47 &#43;0800</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;不到半年时间，又重新折腾过博客了。大概花了两天多的时间，把博客从原来的 Hexo + Stun 切换到 Hugo + MemE 上面。想要转换的原因有很多，例如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Hexo 生成页面的速度已经进入了有点慢的程度。我也不过 70 个页面，每次构建部署加上提交可能需要花上一两分钟，然后随着时间久了所写的内容越多，还会越来越久。&lt;/li&gt;
&lt;li&gt;原主题看着有点不太合适。现在的自己更加希望博客的风格往简洁靠近，让网站的聚焦点能回归到文字本身。这也促使自己这次在选主题的时候把文章主体不居中的都 ban 掉了。&lt;/li&gt;
&lt;li&gt;原博客感觉有着太多无用啰嗦的页面和功能，包括所谓的背景音乐播放。为了有着更好播放背景音乐体验，又不得不搞 PJAX。但实际上我自己点开背景音乐并播放的次数寥寥可数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然想要更换的最主要原因还是&lt;em&gt;喜欢折腾&lt;/em&gt;，这两天在折腾博客的时候，久违地感受到了那种心思全部集中在一个事情上面的状态。在迁移博客的时候，选主题，配环境，写迁移脚本，改写主题以获取想要的效果和功能，虽然也遇到一些坑，但还是能够拥有着持续的动力去继续和完善。看来自己是真的发自内心的喜欢折腾想折腾的东西。&lt;/p&gt;
&lt;h2 id=&#34;迁移准备&#34;&gt;迁移准备&lt;/h2&gt;
&lt;p&gt;因为 Hugo 和 Hexo 存在一些差异，同时我所选择的主题与原主题不一致，导致博客迁移到 Hugo 的时候需要做一些变更，才比较好实现无缝转换。 &lt;br&gt;
主要需要考虑以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路径组织差异&lt;/li&gt;
&lt;li&gt;分类标签差异&lt;/li&gt;
&lt;li&gt;评论功能实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;路径&#34;&gt;路径&lt;/h3&gt;
&lt;p&gt;在 Hexo 中文章的路径默认通过根目录配置文件的 permalink 来配置文章链接的构成，其可以使用常用的基础变量（年份，月份，标题），也可以使用在 front matter 中自行定义的变量。&lt;/p&gt;
&lt;p&gt;Hugo 则默认是根据在 content 目录下文件的组织情况来构建页面的链接的，也可以在配置文件下面通过配置 permalink 属性来实现，但可选择的变量比较少，通常为年月日标题与文件名，不支持使用自定义的 front matter 变量。&lt;/p&gt;
&lt;p&gt;我之前的博客链接使用的样式都是 &lt;code&gt;/:year/:urlname&lt;/code&gt;，通过在 front matter 中自定义文章的路径名。刚开始一直找不到 permalink 的正确配置方式，最终在文件的 front matter 中使用 url 属性来强行确定文章的链接。于是写了一个脚本，把所有 Markdown 文件当中的 urlname 属性改成 url，并在值前面加上年份，硬编码成 &lt;code&gt;/:year/:urlname&lt;/code&gt; 的形式。后来发现可以通过 slug 变量向 permalink 传递值，所以在配置中设置 &lt;code&gt;posts = &amp;quot;/:year/:slug/&amp;quot;&lt;/code&gt; 然后再写脚本把 url 属性转换为 slug 并去掉前面的年份编码。&lt;/p&gt;
&lt;h3 id=&#34;分类标签&#34;&gt;分类标签&lt;/h3&gt;
&lt;p&gt;刚复制几篇文章到 Hugo 时发现总是运行失败，提示 range cannot iterate 某个分类或标签，把它们删了就能够正确运行。后来发现是所使用的主题 MemE 总是预设这些属性是数组形式，因而如果分类或标签写成 &lt;code&gt;tags: val&lt;/code&gt; 的单行形式便会出错，需要写成多行形式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;为什么分类（category）明明只有一个，但需要使用数组呢？这里 Hugo 就与 Hexo 有点差异，Hugo 的分类其实与标签有点类似，Hugo 中更像 Hexo 的分类反而是 sections，这种是通过目录的文件结构来组织的。&lt;/p&gt;
&lt;p&gt;考虑到这个差异，我干脆把所有的分类都通过脚本一并删了。通过 tags 的方式来组织文章的分类。&lt;/p&gt;
&lt;h3 id=&#34;评论功能实现&#34;&gt;评论功能实现&lt;/h3&gt;
&lt;p&gt;之前使用的是 Waline 评论系统实现，选择的主题只提供 Valine 的设置，而且实现还是不完整，用不了的。于是我就仿照它的思路写了个 Waline 的实现，并且把未实现的部分实现了，并且补上了文章阅读量的显示。&lt;/p&gt;
&lt;h2 id=&#34;博客到底需要什么&#34;&gt;博客到底需要什么？&lt;/h2&gt;
&lt;p&gt;在博客迁移需要对博客的功能内容进行重新取舍时，不禁又在重新思考了一下这个问题：我在写一个博客的时候，到底需要些什么，需要向他人展示些什么？&lt;/p&gt;
&lt;p&gt;在最开始的时候，写博客不过就是在做技术类的笔记，大多时候都在摘抄与记录，少有自己的想法。而这种技术类的文章创作起来也不容易，就导致了更新也不频繁，内容不够充实。于是乎，就很容易花费心思到博客本身上面，而非文章内容本身，总是想着给博客加点什么功能，怎样让博客好看点，通过这样的方式来吸引人前来博客。于是越来越花哨，打开也越来越慢。这样的博客确实可能会给人打开时眼前一亮的感觉，但也仅会在第一次而已。&lt;/p&gt;
&lt;p&gt;在之前给女友写信寻找博客主题时，选择了一个很棒的极简主义风格主题。这个主题让我意识到，我应该要回归到博客的内容本身，让人们的视线重新聚焦到文字上面。所以这次挑选 Hugo 主题时就秉着这个条件，一是要简单，二是则以文字为主。当前这个主题感觉还是能够很好地符合我的要求。&lt;/p&gt;
&lt;p&gt;但写到这里就会觉得，其实在博客内容创造上面，我好像也陷入了一个瓶颈的位置。写技术类文章，简单的类文档形式的比较耗时且繁琐，不如去看官方文档；复杂点的技术性强点的文章，又会使阅读的门槛提高；记录自己爬坑经历与反思，但没有相似的具体场景的话有时也比较无味。写生活类文章，困于校园忙于学业的我似乎也找不到更多的时间去真正生活，即使遇到有意思的事情，首先会想到的也是记录在私密的周记记录当中。而关于练拳，养生，阅读等等各个方面的内容，感觉自己都有点半桶水的感觉。&lt;/p&gt;
&lt;p&gt;不过问题来了：文章写得不够好就不能写吗？显然不是的，越不够好就越要写，只有通过多写多练的方式才能促进水平提示，包括写作水平以及所写内容涉及到的领域水平。&lt;/p&gt;
&lt;p&gt;正如自己更新的个人介绍中写到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🛠️ 什么都会点但又不够精通的杂才&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;希望自己早日能够从杂才成为通才吧！&lt;/p&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%8D%9A%E5%AE%A2/">博客</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Hugo/">Hugo</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%BB%8F%E5%8E%86%E5%9B%9E%E9%A1%BE/">经历回顾</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>CSS 选择器</title>
                <link>https://scottyeung.top/2021/css-selector/</link>
                <guid isPermaLink="true">https://scottyeung.top/2021/css-selector/</guid>
                <pubDate>Sat, 22 May 2021 18:39:56 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;翻 MDN 文档重新系统地学习下 CSS 选择器知识，记录下来当作笔记。&lt;/p&gt;
&lt;p&gt;所谓 CSS selector 用于在 HTML 文档中选取指定的元素节点，可用于 CSS 文件中设置 style 或者在某些库中选取元素节点（如爬虫）。&lt;/p&gt;
&lt;h2 id=&#34;css-rules-中使用&#34;&gt;CSS Rules 中使用&lt;/h2&gt;
&lt;p&gt;在 CSS 文件中 selector 通常为 Rules 的开头，每个 Rules 可以指定单个 selector 或者指定 selectors list，后者以逗号分割 (,)&lt;/p&gt;
&lt;h2 id=&#34;css-选择器类型&#34;&gt;CSS 选择器类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Type selectors: 类型选择器，根据 &lt;code&gt;tagname&lt;/code&gt; 来选择对应的元素&lt;/li&gt;
&lt;li&gt;Universal selectors: 通用选择器，使用 &lt;code&gt;*&lt;/code&gt; 来匹配所有元素
&lt;ul&gt;
&lt;li&gt;可以增强伪类选择器的可读性： &lt;code&gt;div *:first-child&lt;/code&gt; instead of &lt;code&gt;div :first-child&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Class selectors: 类选择器，使用 &lt;code&gt;.classname&lt;/code&gt; 来选择相应的元素
&lt;ul&gt;
&lt;li&gt;可以结合其它选择器如 &lt;code&gt;span.highlight&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以同时选取包含多个 class 的元素 &lt;code&gt;.class1.class2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ID selectors: ID 选择器，使用 &lt;code&gt;#id&lt;/code&gt; 来选取相应元素&lt;/li&gt;
&lt;li&gt;Attribute selectors: 属性选择器，根据元素的属性来选择元素
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[attr]&lt;/code&gt;: 元素包括 attr 属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[attr=&#39;val&#39;]&lt;/code&gt; : 元素的 attr 属性值为 val&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[attr~=&#39;val&#39;]&lt;/code&gt; : 元素的 attr 属性为 val 或该属性的列表中包含 val（如 &lt;code&gt;attr=&#39;val val1&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[attr|=&#39;val&#39;]&lt;/code&gt; : 元素的 attr 属性为 val 或该属性以 val- 开头（如 &lt;code&gt;attr=&#39;val-val1&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[attr^=&#39;val&#39;]&lt;/code&gt; : 属性以 val 开头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[attr$=&#39;val&#39;]&lt;/code&gt; : 属性以 val 结尾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[attr*=&#39;val&#39;]&lt;/code&gt; : 属性包含 val&lt;/li&gt;
&lt;li&gt;取否定需要伪类选择器 &lt;code&gt;:not([attr])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;末尾添加 &lt;code&gt;i&lt;/code&gt; 可以是匹配大小写不敏感&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pseudo-class: 伪类选择器，用 &lt;code&gt;:pseudo-class-name&lt;/code&gt; 可选择在特定状态的元素
&lt;ul&gt;
&lt;li&gt;选择指定顺序: &lt;code&gt;first-child&lt;/code&gt;, &lt;code&gt;last-child&lt;/code&gt;, &lt;code&gt;first-of-type&lt;/code&gt;, &lt;code&gt;nth-child(n or an+b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择特定状态: &lt;code&gt;checked&lt;/code&gt;, &lt;code&gt;disabled&lt;/code&gt;, &lt;code&gt;visited&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;for action: &lt;code&gt;hover&lt;/code&gt;, &lt;code&gt;focus&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pseudo-element: 伪元素选择器，使用 &lt;code&gt;::pseudo-element&lt;/code&gt; 选取
&lt;ul&gt;
&lt;li&gt;与伪类的区别伪元素会为选中的元素添加 HTML 片段，而伪类只会在原元素中修改&lt;/li&gt;
&lt;li&gt;选取特定位置: &lt;code&gt;first-line&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;生成特定内容: &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt; 然后通过 content 属性设置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css-combinators&#34;&gt;CSS Combinators&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Descendant: &lt;code&gt; &lt;/code&gt; 后者元素的某个祖先是前者元素&lt;/li&gt;
&lt;li&gt;Child: &lt;code&gt;&amp;gt;&lt;/code&gt; 后者是前者的直接子节点&lt;/li&gt;
&lt;li&gt;Adjacent sibling: &lt;code&gt;+&lt;/code&gt; 后者紧接着前者，且是同一个父元素节点&lt;/li&gt;
&lt;li&gt;General sibling: &lt;code&gt;~&lt;/code&gt; 后者出现在前者的后面，且是同一个父元素节点&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css-selector-的优先级&#34;&gt;CSS Selector 的优先级&lt;/h2&gt;
&lt;p&gt;如果有多个 CSS Rule 同样选择到了某个元素节点且声明的 CSS 样式出现冲突时，会根据首先根据优先级进行处理，当优先级相同时，选择后声明的规则。&lt;/p&gt;
&lt;p&gt;优先级可以用一个四位数表示，每出现一个选择器在相应位上加一&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;inline style: 行内的 css style 的优先级时最高的，直接在千位加一&lt;/li&gt;
&lt;li&gt;百位: ID Selector&lt;/li&gt;
&lt;li&gt;十位: Class selector,  attribute selector, preudo-class selector&lt;/li&gt;
&lt;li&gt;各位: type selector, preudo-element selector&lt;/li&gt;
&lt;/ol&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/CSS/">CSS</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%89%8D%E7%AB%AF/">前端</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%AC%94%E8%AE%B0/">笔记</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Coding-%E5%AD%A6%E4%B9%A0/">Coding 学习</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>种树，直到把自己围住</title>
                <link>https://scottyeung.top/2021/forest-for-what/</link>
                <guid isPermaLink="true">https://scottyeung.top/2021/forest-for-what/</guid>
                <pubDate>Tue, 18 May 2021 22:36:14 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;blockquote&gt;
&lt;p&gt;对于五月假期回来后状态的复盘，其实是写于 5.15 的周记记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是否还应该要使用 &lt;a href=&#34;https://www.forestapp.cc/&#34;&gt;Forest&lt;/a&gt; 种树呢？在去年的四五月份的时候就曾经有过这样的&lt;a href=&#34;https://scottyeung.top/2020/%E7%AA%81%E7%84%B6%E4%B8%8D%E6%83%B3%E5%86%8D%E8%AE%B0%E5%BD%95%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%BF%E7%94%A8/&#34;&gt;想法&lt;/a&gt;，怀疑自己使用 Forest 等时间记录工具的意义在哪，甚至会觉得使用这些工具使自己对于时间的利用变得很焦虑，进而对自己的时间安排产生焦虑。&lt;/p&gt;
&lt;p&gt;说起来也比较讽刺，原意使用 Forest 是为了记录我日常使用时间的情况，但是演变到今天，已经变成了推动自己工作学习的工具，用来衡量自己有无努力学习，认真工作的工具。我对于 Forest 的使用心态，已经从以往看看今天学了多久时间，变成看看今天能不能学到 300 分钟。一般来说，这个任务是可以达到的，但如果有些特殊的情况，例如昨天提到的状态不好，不想干活，导致开始工作的时间晚了，我就会觉得今天的任务预期好像完成不了，就会觉得愧疚与焦虑。当出现这种心态之后，就会出现想要让自己的数据更加好看的想法，继而会出现一些不妥的功利的想法，例如将一些非工作的活动也计时，又或者是中途需要打断活动的时候还是继续计时，通过这样的方式来让种树的时间更多更好看。&lt;/p&gt;
&lt;p&gt;但这样的行为并没有意义，这样获取到的数据也没有意义，相反，还会给自己增添许多的压力。翻了翻以前的种树的记录，在 19 年刚刚开始使用的时候，那时使用 Forest 就真的纯粹就是记录自己的时间使用情况而已，以及让自己增添的一个开始工作的仪式感。那个时候的我虽然有时种树也能种比较多的时长（挺多 300-400+ 分钟），但是其中也不乏一些 200+ 分钟的日子夹杂在其中。状态的起伏，可利用时间的变化都是很常见的状况，尤其是在读书阶段还需要去上课，需要处理一些额外的状况，又或者是出去玩之类的活动，为什么需要强求自己每天都能够学习到某一个固定的时间呢？&lt;/p&gt;
&lt;p&gt;这种转变大概发生在保研之后的大四上学期，那个阶段的我一下子没有了比较紧迫且具体的任务推动，很多时候不想干活，也不知道要干些什么，干到什么程度。为此，我就想出了一个比较好能够推动自己的方法，既然没有具体的目标，不知道需要完成到什么程度，那我就按照学习时间来衡量，每天学多少时间来判断自己当天有无认真学习。想法是很好的，但这个标准任何制定，制定得是否灵活，就需要衡量太多东西了。&lt;/p&gt;
&lt;p&gt;这样的想法放到了如今重新回到学习生活的我来说，又显得不够灵活。一方面我被其制约，无法更加灵活而合理地利用时间，另一方面，我对于时间的利用也变得更为洁癖与讲究。具体表现为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有些重要但是与学习不太相关的事情，我可能会因为其不能种树（计时）而将其优先级放得比较低，从而导致自己不会去做这些事情。例如运动，尤其是在学习途中的休息活动，因为这些活动不能很直观地将它们的好处与效果表现出来，不像学习能够通过种树显示出学习时间，知道自己今天努力了多久，做了多少。所以不愿意去，也不敢去做，担心占用我的时间。&lt;/li&gt;
&lt;li&gt;对于时间的利用不够灵活，仿佛洁癖一般，总是会抱着一种完美主义的效率至上心态。会认为与其在上课的半个小时里面低效的学，不如在这期间摸鱼休息，然后等到之后可以高效率学习。这样的心态会导致自己在某些时候心安理得地摸鱼不学习，把时间白白浪费掉。其次就是对于时间的要求越来越多，然后就开始成为拖延某些任务的借口。明明可以做半个小时，一个小时，但是觉得这么短的时间干不出什么结果就干脆放弃，不做，选择做一些短平快的事。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然其实工具的本身还是其次，本质上还是自己的心态出现了问题，现在的自己不是很能够接纳没有学习的自己，不能接受好像一天都没怎么学习的自己。原本只是为了对于时间记录这个用于以后留念的数据，现在逐渐演变成证明自己有在努力的工具，很是不妥，而自己也仿佛被困在 Forest 这个工具当中。&lt;/p&gt;
&lt;p&gt;当然你要我一下子就完全不用，我也还是做不到，甚至在写这篇文章的时候，我也开着了 Forest 来计时。不过还是需要改变，正如昨天文章所写，改变只需要一点点的改进，就从看少点 Forest 的种树记录，看轻点里面的数字开始。或许首先可以做到的就是，减少学习时间吧 😆&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/">时间管理</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/">个人随笔</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>“什么都不做”</title>
                <link>https://scottyeung.top/2021/do-nothing/</link>
                <guid isPermaLink="true">https://scottyeung.top/2021/do-nothing/</guid>
                <pubDate>Tue, 18 May 2021 21:21:49 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;blockquote&gt;
&lt;p&gt;对于五月假期回来后状态的复盘，其实是写于 5.14 的周记记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经历了不太想工作的一周工作日，可能是还处在五一的假期后遗症当中，缺乏干活的动力，每天都不想起床，不想干活，但偏偏事情又感觉很多，因而会陷入一种焦虑当中，不想干，但又要干，让人很是闹心。因为不想干活导致了无意义的拖延行为，因为拖延导致不得不利用一些另外的时间来尽量补回被拖延的时间，因为额外的时间被占用了导致某些想做的事情难以完成甚至无法完成，因为做不了自己想做的事情觉得不甘心又导致因为不愿就这样结束自己的一天而自然地熬夜，因为睡得不够又导致了第二天很困起不来，更加缺乏做事的动力与决心。&lt;/p&gt;
&lt;p&gt;感觉像是陷入了一个无解的死循环中，但自己还在寄希望于只是今天先这样，明天就能好起来的幻想当中，还觉得自己只是陷入了一种每个人都会进入的，缺乏动力不想干活的状态。只要等它过去，只要等自己进入一种充满活力的状态，问题就能够自己消解。尽管如此，我也没有去尝试或寻找让自己进入充满精力的状态，只有空想，而没有实践。&lt;/p&gt;
&lt;p&gt;我能够做什么，或是需要做什么呢？应该要意识到，改变并不总是需要翻天覆地，彻彻底底的。我想要变得更具活力，更有动力，做不到也不需要今天还无心工作草草种树 200 分钟，明天就一下子能学到五六小时甚至更多。每天比昨天赖床时间短一点，起床时间早一点，开始学习的时间早一点，走神摸鱼的时间少一点，拖拉的时间短一点，学习的时间多一点，也是一种很棒的改进了。&lt;/p&gt;
&lt;p&gt;但为什么做不到呢？我觉得是现在的自己缺乏一种勇气，一种能够坦然接受现状并寻求应对解决方法的勇气。遇到问题，处于不满意的状态，不能够坦然地接受自己就处于这种状态，以及承受接下来可能出现的后果。出现这种情况，第一时间想到的是逃避，想着明天再来，全然不想处理当天比较糟糕的开局，哪怕只是稍微起晚了一点，哪怕只是上午的学习时间没了。内心居然隐隐会觉得，在状态不好时间不足的一天学习，还不如一天都不学，或者是干一些所谓轻松点的，与任务无关的事情。&lt;/p&gt;
&lt;p&gt;迎着糟糕的情况前进比放弃或拖延所需要承担的压力还要多，因而会使人退缩。所以现在的我会选择早上醒来晚后就多赖一会床，起床晚了后就干脆不去实验室学习，去不了实验室就干脆上午不学习，上午不学习就中午早点睡下午再努力。当事情的一点点发展得不如心意就干脆将后续的发展也跟着打乱，舍弃掉本可利用的时间资源，想的是从下个阶段再开始。但很现实的是，既然第一个阶段的开端会出现意外，那么之后的又如何担保其一定按照预期发展呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://scottyeung.top/posts/2.png&#34; alt=&#34;懂得都懂不懂都不懂的示意草图&#34;&gt;&lt;/p&gt;
&lt;p&gt;勇气怎么培养，我自己也不知道。不过现在的我已经不是之前那个只会接受一切的我，我相信一切都能够改变，都可以尽力去做到。改变自身性格就是一个，哪怕可能只是一点点。当以后出现这种情况的时候，直面它，接受它，应对它，战胜它。希望以后出现今天状态不好不想学习的时候，我的想法不再是等到明天状态好点再开始，而是状态不好的话我应该做些什么，应该怎么做，能做多少算多少的心态。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/">时间管理</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/">个人随笔</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>dotnet 爬虫的神</title>
                <link>https://scottyeung.top/2021/dotnet-god-of-web-crawler/</link>
                <guid isPermaLink="true">https://scottyeung.top/2021/dotnet-god-of-web-crawler/</guid>
                <pubDate>Wed, 07 Apr 2021 18:57:41 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;这一周干了两次需要批量下载图片或文件的自动化工作，连续两次使用都是 dotnet 来完成，着实不错，尤其是配合 c# 的 async/await 语法糖，异步下载性能确实够快。这两次的下载让我对于这种需要批量获取信息或者下载的任务解锁了新的姿势。&lt;/p&gt;
&lt;p&gt;首先需要明确一点，我们需要的只是爬虫的结果而已，只是为了能够自动化获取我们所需要的数据或资源，所以我们所做的事情，所写的代码即使稍微 dirty 点也无妨，只要能 work 就好。尤其是在工程中，过于追求所谓的 elegant 只会让自己痛苦不已，不过这些都是题外话了。&lt;/p&gt;
&lt;p&gt;So glad to make it dirty. 爬虫遇到例外情况时就做特殊判断，有异常就针对异常对个例单独处理，全自动化不行就手工做点操作加点信息。&lt;/p&gt;
&lt;h2 id=&#34;html-parsing&#34;&gt;html parsing&lt;/h2&gt;
&lt;p&gt;html 的解析库用的是 &lt;a href=&#34;https://html-agility-pack.net/&#34;&gt;Html Agility Pack&lt;/a&gt;，可以解析字符串，也可以直接发请求获取页面来解析。其使用 XPath 作为选择器，不支持 css 选择器，学过 XPath 的可以接受，而且 XPath 的表达性足够的强，足够使用。&lt;/p&gt;
&lt;p&gt;code sample 如下，能够根据 XPath 选出特定的节点，然后取出其中的属性和文本其实已经差不多了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HtmlWeb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LoadFromWebAsync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DocumentNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SelectSingleNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xpath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnerText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetAttributeValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;defaultValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;download&#34;&gt;download&lt;/h2&gt;
&lt;p&gt;完全就是根据 dotnet 的 API 来操作的，重点推荐 System.Net.Webclient 的 DownloadFileTaskAsync 方法，直接根据 url 开启异步下载任务，开启下载任务后将所有的 tasks 一起等待运行结束即可。
这里有个需要注意的点是，API 内置的 WebClient 是不支持并行的,这意味着一个 Client 发请求后必须完成任务后才能用它进行下个任务，所以需要并行的时候建议多开几个 client。&lt;/p&gt;
&lt;p&gt;sample 如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tasks&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Task&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;tasks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WebClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DownloadFileTaskAsync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tasks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WhenAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tasks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;tricks&#34;&gt;tricks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;需要下载或者访问的 urls 有时并不需要通过代码中发请求获取页面解析这样的方式来获取，很多时候直接在开发者工具里面用 XPath 来取出相应的 urls 更加简单快捷
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;$x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;//a[@id=&amp;#39;target node&amp;#39;]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;并不需要一次性就能把全部数据抓取下来，不妨合理分批分成多个任务来完成，这样 fail 一次也只需重新执行改部分，而不需要全部重来。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;performance&#34;&gt;performance&lt;/h2&gt;
&lt;p&gt;性能只能说好得离谱，也可能是因为之前的 Python 爬虫给我留下太糟糕的印象作为 baseline 了。这主要得益于 dotnet 本就良好的性能，以及其支持得很好的异步编程设计，基本每个可能会阻塞的 API 都提供了 async 版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载了 90 posts，包括其中的文字和图片，每个 post 平均有两张图片，加起来用了一分钟左右。&lt;/li&gt;
&lt;li&gt;下载了差不多 60 个 pdf，用来不到 20s&lt;/li&gt;
&lt;/ul&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/dotnet/">dotnet</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%88%AC%E8%99%AB/">爬虫</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/">自动化</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%94%9F%E4%BA%A7%E5%8A%9B/">生产力</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>如盲人走路</title>
                <link>https://scottyeung.top/2021/like-blinds-walking/</link>
                <guid isPermaLink="true">https://scottyeung.top/2021/like-blinds-walking/</guid>
                <pubDate>Tue, 06 Apr 2021 22:35:25 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;对比上个学期，自感最近放了比较多的时间在练习太极拳上面，甚至还曾经自我打趣道，这个学期的工作生活重心就在练拳上面。确实是练得比较多，一方面是在杨协呆得久，需要我去带练功操，有时是必须要去，另一方面则是王真人这边也约得比较勤，一周两练，因为人少（就三个人），鸽都不好找理由鸽。当然这些都还只是外部因素，真的是不得不练，被逼着练吗？也不全见得是。&lt;/p&gt;
&lt;p&gt;之前曾经写过&lt;a href=&#34;https://scottyeung.top/2020/taichi-practice-reflections/&#34;&gt;博客&lt;/a&gt;说，感觉自己练拳一直得不到进展，似乎陷入瓶颈位置，导致练习得不太畅快，继而不太想练习。不过最近这种不得劲的感觉似乎逐渐在减退，仿佛找到一些东西，开始在真正地练拳。尽管还是在练习几乎一样的东西，练习的过程还是一如既往地觉得自己很菜，但确实能够发现处处都有不同的感觉。于是近来对于练拳都有着比较高的积极性，即使是自己一个闲在宿舍，或是走在路上，都会不由自主地走走站站，或是伸展肩膀手臂，颇有将太极与练拳融入到日常生活当中的感觉。&lt;/p&gt;
&lt;p&gt;现在的练习其实与之前差别也不是很大，功操，套路，推手，站桩，都还是这些东西。然后我自己的所谓功力，其实也没有提升多少，而且也还是能在练习中发现许多的问题，例如力量不足，例如不够放松而导致的肌肉紧张。为什么会觉得之前的不畅快感已经消失了？&lt;/p&gt;
&lt;p&gt;大概是我开始找到练拳中的所谓&lt;strong&gt;感觉&lt;/strong&gt;了。&lt;/p&gt;
&lt;p&gt;在之前的博客或者动态当中，其实自己之前一直都在吐槽，传统的内家拳过于看重这些玄之又玄的所谓感觉，通过文字口诀来描述，需要靠练习者自己去感悟，不免太难，太过于虚无缥缈。正因为此，所以之前开始练习功操时，可以很明显地让自己出现有被锻炼到的很累的感觉，会觉得很感人，并且会将这些所谓肌肉很累很酸的感觉当成是有练到的表现。&lt;/p&gt;
&lt;p&gt;练得很累很酸就是有练到练对了吗？我曾经问过杨协的人这个问题，然而很可惜的是，很多人都还确实只能通过这种方式来判断，有没有被练到。但事实上，练确实是有被练到，练的东西对不对就不好说，练死肌肉也可以练得很累。之前就试过一次练习步法发力推人，练完几天发现双臂酸软得抬不起，但其实只是全用了肌肉发力来推人，练到的并不是想要的东西。&lt;/p&gt;
&lt;p&gt;前两周王真人转了一篇&lt;a href=&#34;https://mp.weixin.qq.com/s/7RGAwdNH1TYASBSe4OI2sw&#34;&gt;推送&lt;/a&gt;，提到“练拳要学瞎子走路”，瞎子走路身子前后都提着小心，从头到脚都有反应，练拳不是练拳头，而是全身敏感。所以在练拳的时候，感觉是应该重于一切的，一方面感受自身身体的各处状态，另一方面则是接受外界的感受。当然这个说得也很是玄妙深奥，只能看看作为参考。&lt;/p&gt;
&lt;p&gt;上学期刚开始练拳的时候，王真人曾经跟我说过要练出掤劲，并且将其应用到身体的每一处。具体怎么练，靠站桩，练套路，和推手，来撑筋拔骨，锻炼自身。不过我上学期的我一直都感觉很迷，似乎一会出现了，一会儿又找不到了，在与其他人推手的时候，推着推着对方说有点感受到，但自己却觉得其实没有变化过。这个学期好像好了一点，似乎开始感到这种劲，体会到所说的把劲打匀到全身是种什么感觉。&lt;/p&gt;
&lt;p&gt;上周练拳的时候，王真人问我练拳之后有没有什么收获与变化。这个问题其实我自己在寒假的时候就思考过很多次，什么还写了不少文字从身体上和信赖来进行总结。好处与收获当然是有，更健康的身体，更积极的内心，虽然可能并不足以与外人称道，也可能不太明显，不过内心还是真切感受到自己是有不同的。&lt;/p&gt;
&lt;p&gt;想起最开始重拾练拳想法的原因，是因为想着锻炼身体，让自己变得健康。不过其实到自己真正开始练拳的时候，反而并没有了这个想法，甚至觉得其实练拳最多也不过是种锻炼方式，再怎么健康，也不过相当于多运动了。纯粹是觉得挺有意思（以及加入组织开始练习之后不好退出了。&lt;/p&gt;
&lt;p&gt;最后再分享在知乎看到的一个很棒的评论。有个人贴出了他在武当山上面练习传统武术的经历，然后评论区中就出现了很常见的杠精，张嘴就发出传武能不能打的怀疑，什么学得不值，是被骗了之类的评价。然后答主就很坦然地回复，对于他来说，武术只是一个个人的爱好而已，像有的人喜欢跳舞，有的人喜欢打球，一定需要能打，有用，才去做，才去学吗？显然不是。&lt;/p&gt;
&lt;p&gt;所以为什么练习太极拳，喜欢就够了。&lt;/p&gt;
&lt;p&gt;上面提到的推送中说到练拳需要如盲人走路，在练拳过程中要注重全身的感觉。对于整个练拳的历程来说，其实需要像盲人走路一样，专注于当下走的每步路，练的每次拳，也不太需要考虑前路怎样，可以练到什么程度，可以收获什么。反正练习下去，走下去，自然能够进入新的境界。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%A4%AA%E6%9E%81/">太极</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%86%85%E5%AE%B6%E6%8B%B3/">内家拳</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>GraphQL 入门</title>
                <link>https://scottyeung.top/2021/intro-to-GraphQL/</link>
                <guid isPermaLink="true">https://scottyeung.top/2021/intro-to-GraphQL/</guid>
                <pubDate>Wed, 17 Mar 2021 15:46:25 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;blockquote&gt;
&lt;p&gt;GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;why-graphql&#34;&gt;Why GraphQL&lt;/h2&gt;
&lt;p&gt;GraphQL 的出现主要是针对于传统的 REST API。传统的 REST API 使用资源实体的概念来划分各个数据实体，当我们需要请求数据的时候，我们往往需要发送多个请求来获取所需要的数据，一般来说，实体当中往往与其它不同类型的实体有着各样的关系。&lt;/p&gt;
&lt;p&gt;例如我们需要展示各个用户所编写的博客文章，这需要获取博客的数据以及用户的数据。如果我们通过 REST API 获取，我们首先需要通过 &lt;code&gt;GET /api/posts&lt;/code&gt; 获取所有的文章，返回的数据中就包含了文章的相关信息，如标题，内容，创建时间，以及作者的 id。根据获取的作者 id，我们需要根据每一个用户 id，发送请求 &lt;code&gt;GET /api/users/:id&lt;/code&gt; 获取每个作者的信息。所以这样单一个展示页面，我们就可能需要发送大量的请求来获取数据。如果这个情况发生在需要数据现场渲染页面的网站，就比较尴尬，尤其是当网络情况较差时。&lt;/p&gt;
&lt;p&gt;而使用 GraphQL 的话，只需要单个 Query 即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-GraphQL&#34; data-lang=&#34;GraphQL&#34;&gt;&lt;span class=&#34;kd&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;posts&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        	&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;avatar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;catchphrase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;favorite_dog&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;另外传统的 API 在前后端进行接口交互时，往往需要文档来进行沟通交流，通过文档上面的定义和描述，来告诉前端接口到底长什么样，可以获取怎样的数据，以及怎样获取数据。然而文档的质量参差不齐，什么经常存在信息缺失的情况，尤其是需要人工编写的接口描述~~（给你写个类型信息和返回信息都不愿意）~~。尽管有着 Swagger 这些接口文档自动生成的工具，但是还是需要后端开发者付出额外的精力来添加描述信息。而如果写 GraphQL 的话，写一个 Scheme 就可以把支持的类型及其属性都清楚地暴露出去，只要再完善一下其中的 Query 以及 Mutation 内容，即可以把 GraphQL 支持的查询和更改操作都清楚地暴露出来。这些内容都可以通过算是内置的辅助工具 &lt;a href=&#34;https://github.com/graphql/graphiql&#34;&gt;GraphiQL&lt;/a&gt;，进行文档的查询，以及实际的尝试。&lt;/p&gt;
&lt;h2 id=&#34;how&#34;&gt;How&lt;/h2&gt;
&lt;h3 id=&#34;to-build&#34;&gt;to build&lt;/h3&gt;
&lt;p&gt;如何编写一个 GrahpQL 服务呢？我们首先需要定义好它的 Schema，包括其定义的类型（Type），输入类型（Input）。在 GraphQL 里面，服务能够支持的查询和更改操作，也是类型，分别是 Query 和 Mutation。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: 每个类型由多个属性组成，每个属性包含一个名字，以及该属性字段的类型，该类型可以为基本类型（Int, String, Boolean, Float, ID），数组，或者是自定义的对象类型&lt;/li&gt;
&lt;li&gt;Input: 输入类型也是一个 Type&lt;/li&gt;
&lt;li&gt;Query: 表示服务支持的查询内容，每个属性表示某个 query，其类型则为返回类型，可以接收参数&lt;/li&gt;
&lt;li&gt;Mutation: 表示服务支持的更改操作，每个属性表示操作名，需要接收输入类型的参数，其类型为返回类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下为一个关于 todo 的 GraphQL Schema&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-GraphQL&#34; data-lang=&#34;GraphQL&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;TodoItem&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;checked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;createdTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Query&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;todoItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;TodoItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;todoItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!):&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;TodoItem&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;TodoItemInput&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;checked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;createdTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Mutation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;createTodoItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;TodoItemInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!):&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;TodoItem&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;updateTodoItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;TodoItemInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!):&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;TodoItem&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;to-use&#34;&gt;to use&lt;/h3&gt;
&lt;p&gt;怎么使用 GraphQL 服务呢？&lt;/p&gt;
&lt;h4 id=&#34;query&#34;&gt;Query&lt;/h4&gt;
&lt;p&gt;需要查询数据时，我们只需要通过花括号把需要的类型和字段的列举出来即可。当需要传入变量，我们可以在 query 处进行定义，然后在变量处进行值传递。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-GraphQL&#34; data-lang=&#34;GraphQL&#34;&gt;&lt;span class=&#34;kd&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;TodoItem&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# or&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;todoItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# variables&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;mutation&#34;&gt;Mutation&lt;/h4&gt;
&lt;p&gt;进行数据更改时，也是类似，传入变量，调用相应的 mutation 方法即可，另外根据需要，我们还可以选择返回的属性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-GraphQL&#34; data-lang=&#34;GraphQL&#34;&gt;&lt;span class=&#34;kd&#34;&gt;mutation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;TodoItemInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;createTodoItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# variables&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;todo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;asdafa&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;asdaf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;createdTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;today&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;checked&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;to-implement&#34;&gt;to implement&lt;/h3&gt;
&lt;p&gt;怎样快速搭一个 GraphQL 服务出来呢？当然是采用动态语言最快了，而其中，又自然是选择使用 GraphQL 最多的 JavaScript 语言实现起来最快。&lt;/p&gt;
&lt;p&gt;这里我们使用 express 来提高 http 服务，使用 express-graphql 来搭建 GraphQL 服务&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;npm install --save express express-graphql graphql
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后就是一把梭地实现，首先构建 GraphQL Schema，然后搭建 http 服务，构建并绑定一个 GraphQL handler，启动服务，完。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;express&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;graphqlHTTP&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;express-graphql&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;buildSchema&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;graphql&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;schema&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;buildSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;``&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 内容省略
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 那个数组假装一下数据库
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoItemDb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 这里用来存储各个 query 和 mutation 的响应函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;todoItems&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoItemDb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoItemDb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;createTodoItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoItemDb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;todoItemDb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;updateTodoItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoItemDb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoItemDb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;todoItemDb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;express&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/graphql&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;graphqlHTTP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;rootValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;graphiql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}));&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;实现就这么简单 2333&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;在写这篇博客的时候，其实写到后面有点点迷茫，所谓的 GraphQL 真的是这么好吗？如果真的这么好，为什么当前主流的前后端分离，后端接口的方式还是用传统方式的类 RESTful API 的方式来设计和实现呢？&lt;/p&gt;
&lt;p&gt;其实回过头看上面举出的例子，那些所谓的需要多次请求才获取到的数据，其实本质上也是因为后端考虑要获取多个数据，才将其整合在一起，作为一个新的独立的 endpoint 来暴露出来的。换句话，其实传统的 API 也可以做到，只需要再写一个 endpoint，专门为这个情况设置独立的 handler。&lt;/p&gt;
&lt;p&gt;不过这种专门设置一个新的 endpoint 也未免太过不够 elegant，而且 GraphQL 对我这种还没经历过实际项目的新手来说，最大的优点，还是其自带的 GraphiQL 吧，一个带 ui 的 playground 提供给使用者来了解 API 中支持的类型，查询和变更操作，并且可以随时进行尝试，实在吸引。&lt;/p&gt;
&lt;p&gt;所以以后如果需要到 GitHub 挖点数据的时候，不妨把请求方式从其传统的 REST API 上搬到 GraphQL 当中。这样就不需要再在命令行或者是 Postman 的方式来发请求尝试，直接在网页端界面解决。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/JavaScript/">JavaScript</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/API/">API</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Coding-%E5%AD%A6%E4%B9%A0/">Coding 学习</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>双拼使用后记</title>
                <link>https://scottyeung.top/2021/learn-and-use-shuangpin/</link>
                <guid isPermaLink="true">https://scottyeung.top/2021/learn-and-use-shuangpin/</guid>
                <pubDate>Tue, 09 Feb 2021 12:00:22 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;切换到双拼输入法一个多月了，算是掌握了双拼这个技能，现在基本上是完全使用双拼作为日常的输入方案。日常使用过程中，大问题基本没有，但是所宣传的大幅效率提升，也并不见得。不过现在用来已经顺手，应该还是会一直用下去。&lt;/p&gt;
&lt;h2 id=&#34;双拼简介&#34;&gt;双拼简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%8F%8C%E6%8B%BC&#34;&gt;双拼&lt;/a&gt;是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文单字了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来讲，双拼就是通过编码的方式，将拼音当中的韵母用一个单个字母来映射，比如韵母 ang 可以用 h 来输入。通过这种方式，每个汉字的输入，都可以通过两个字母来确定，从输入的编码平均长度来看，可以说是一种更加高效的输入编码方案，每个字符的输入都只需要两个字符。&lt;/p&gt;
&lt;h3 id=&#34;编码方案&#34;&gt;编码方案&lt;/h3&gt;
&lt;p&gt;双拼的思路比较简单，关键是怎样选择一个合适的编码方案。网络上面的方案也比较多，而我这里选择的是小鹤双拼，一个使用量比较大的编码方案。这个编码方案用起来也比较趁手，符合使用习惯，值得安利给大家。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://scottyeung.top/posts/p1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div style=&#39;text-align:center;color:#999;margin-top:-15px;margin-bottom:10px&#39;&gt;小鹤双拼键位&lt;/div&gt;
&lt;p&gt;不过微软自带的输入法还没有这个编码方案，还需要额外设置一下。微软输入法支持手动设置编码方案，所以我们可以通过控制面板中的输入法设置，添加方案，一个一个映射规则的添加上去。当然这个方法也太麻烦了，所以可以直接通过改注册表的方式来改，具体参考这个&lt;a href=&#34;https://ifttl.com/add-flypy-to-win10-microsoft-pinyin-and-other-configuration/&#34;&gt;博客&lt;/a&gt;。不过在我的机器上尝试这个方法没有效果，最终还是找了一个脚本来一键修改注册表，得以成功，可以参考&lt;a href=&#34;https://www.jianshu.com/p/ed15869e03e6&#34;&gt;本篇文章&lt;/a&gt;，使用脚本的话就连设置选择拼音方案都不需要自己来了，直接一步到位。&lt;/p&gt;
&lt;p&gt;至于移动端，常用的手机输入法支持的双拼编码方案基本都有小鹤编码，毫无问题。我现在使用的是 Gboard，用起来也很不错（这个输入法其实本身也很不错，值得推荐，如果不是被墙了，将会绝杀&lt;/p&gt;
&lt;h2 id=&#34;使用体验&#34;&gt;使用体验&lt;/h2&gt;
&lt;p&gt;通过将所有的输入发切换为小鹤双拼进而强迫自己使用双拼的方式，我很快就基本掌握了双拼的使用，从刚开始的时候想不起某个字某个韵母怎么打需要去查表，到现在完全可以直接一个个试/猜出来，其实还是很快上手的，就是刚开始的时候会觉得有点难受，尤其是在你跟人聊天的时候，宛如掉线一般久久不能发言，在群里发言就更加觉得插不上话了。所以我刚开始的时候还专门在手机保留了一个使用全拼的输入法，方便随时切换，转换到能够快速发言回复的状态。&lt;/p&gt;
&lt;p&gt;总体使用下来体验，我觉得还是能够接受的，大体有以下的优缺点：&lt;/p&gt;
&lt;h3 id=&#34;优点&#34;&gt;优点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;更高的输入效率。因为双拼将多个字符的韵母映射到了单个符号，所以平均输入的字符自然降低了。这个也比较直观，例如打出一个 jiang，全拼需要需要敲五个字符，而双拼只需要敲两个字符。&lt;/li&gt;
&lt;li&gt;更快的输入速度。因为需要输入的字符少了，按道理来说输入的速度自然会提上来，打字也应该更加快了。&lt;/li&gt;
&lt;li&gt;更少的键盘敲击。换用机械键盘后总是觉得敲击键盘会不会吵到别人，影响到别人。使用双拼之后，敲击键盘的次数少了，再加上双拼的话有时需要想要敲的字符，不那么肯定，敲击的力度也自然表小了。&lt;/li&gt;
&lt;li&gt;更好的设备定制。这个我是在 LUG@NJU 群看到的，说是使用双拼之后，别人就用不了你的设备打字了 2333，也确实很有道理。不过在另一方面来看，这也能算是一个缺点。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;缺点&#34;&gt;缺点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;经常打错。这里的错误有两个方面，一是记错编码规则，想输入的韵母与输入的字符不匹配。二则是直接拼音打错了，尤其是对我这些周期性前后鼻音不分的人来说，就 in 与 ing 我就已经不知道搞混几次了，而全拼的话打前鼻音 in 大多时候就能够直接匹配了，尤其是组词。&lt;/li&gt;
&lt;li&gt;需要打全拼的字母或者单词的时候很麻烦。输入法中显示的是经过编码方式转换之后的拼音，所以导致看不到原输入了，这样如果我们需要打一些纯拼音，例如某人的名字拼音，就看不到自己是否打对了，是否打完了，需要记住，或者盲猜。另外，当我们需要输入单词的时候，微软输入法是可以给你直接拼个单词出来的，但是使用双拼之后，我们也看不到原来的输入，经常输错，实在难顶。（为什么不切换到英语输入呢，自然是拼不出来单词呀哈哈哈&lt;/li&gt;
&lt;li&gt;有时打一些常用的输入简写很麻烦。例如打一些常用语，最简单的哈哈哈哈哈也要多打一倍字符 (hhhhh -&amp;gt; hahahahaha)，又或是要输入一些姓名，需要从名字的拼音首字母，变成完整地把整个名字的拼音打出来 (yhl -&amp;gt; yhhclb)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;虽说从编码效率来看，双拼的输入效率确实应该提高，不过从个人使用的情况来看，结合上自身输入常常出现的手误，其实也没有提高多少。不过在移动端上面体验就好很多了，因为我在手机打字总是经常按错，打得越快就越容易错，而且一错就是打错一堆，换用双拼之后，因为输入少了，删除都快了。&lt;/p&gt;
&lt;h2 id=&#34;值得推荐&#34;&gt;值得推荐？&lt;/h2&gt;
&lt;p&gt;所以双拼其实值得推荐给大家用吗？个人还是觉得可以尝试一下的，尤其是喜欢学习与尝试新事物的人来说，掌握一门新的技能，学习一个新的东西，也还是大有脾益。回想起我当时想要学习双拼的缘由，也不过是刚好看到了一篇推送，然后刚考完试，实在不想学习，找点有意思的事情做一下而已，这样坚持了一个来月，确实也收获了不少的乐趣。许多事情，其实不去亲自尝试过，就单纯靠着别人的三言两语评论，根本就无法有一个很好的了解。我知道它很好，与我做起来很好区别还是很大的。&lt;/p&gt;
&lt;p&gt;这大概就是学习的魅力吧，我是真的喜欢学习，去学一些杂七杂八的事，去做一些感兴趣的事情。有用无用，好用与否，并不关键。&lt;del&gt;就如同我写这篇博文本身，导致自己的论文一直没看完，虽然良心有点过意不去，但还是很爽的。&lt;/del&gt;&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%B7%A5%E5%85%B7/">工具</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E8%BE%93%E5%85%A5%E6%B3%95/">输入法</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%94%9F%E4%BA%A7%E5%8A%9B/">生产力</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Find Your Sparks</title>
                <link>https://scottyeung.top/2021/find-your-sparks/</link>
                <guid isPermaLink="true">https://scottyeung.top/2021/find-your-sparks/</guid>
                <pubDate>Tue, 05 Jan 2021 22:19:04 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;看完了皮克斯的心灵奇旅（&lt;a href=&#34;https://movie.douban.com/subject/24733428/&#34;&gt;Soul&lt;/a&gt;），还是挺多感慨的。昨天才看到拼多多一应届毕业生猝死，今天又看到母校有一博后跳楼。有时真的怀疑，现在的社会风气到底是出了什么问题。&lt;/p&gt;
&lt;p&gt;Soul 中提到的故事背景为，每个人（或者说是灵魂）都需要找到自己的 spark，才能够投胎成人。这里的 spark 可以是热爱的事物，非常感兴趣的事情，主人公甚至将其当作是个人生来就要做的事情（born to do）。看似很有道理，人生就是要寻找生活的意义，为了自己的目标和理想付出一切，来追求并实现自己的 spark。然而真正抓住了这些之后，真正找寻到所谓的意义之后，接下来呢？&lt;/p&gt;
&lt;p&gt;男主费尽一切心思，忽略了家人与身边人，放弃稳定的职位，就是为了抓住一个表演的机会，成为一个 musician。然后当他真正做到之后，在首次演出之后的晚上，他却陷入了迷茫，我看着也会感到迷茫：他热爱音乐，热爱 jazz，因此想要将音乐作为他的工作，作为他生活的绝大部分，然后他真正做到之后，他有机会可以给众多观众表演，并且作为谋生的方式，然而这样的生活以后每天都会上演，“明晚还是弹奏一样的内容”。当我们穷尽一切去追求某些事情，从而达到某个目标的时候，若真的实现了目标，甚至这个目标以后变得平凡起来，融入日常之后，它还有意义吗？去追求实现这样目标，真的有那么大的意义吗？&lt;/p&gt;
&lt;p&gt;问题的答案也还是很简单，所谓的 spark 无非就是当下，有趣的永远是事情的本身，而不是事情的结果。生活的意义，也仅仅是生活本身，而不是要去做点什么，要取得什么成就。
活在当下，回归过程本身，已是老生常谈了，但真的落实到生活中每一处中，并不容易。我们往往很轻易地就被某些东西所蒙蔽住，从而忘记了生活的本质，就像现在正在准备期末考试的我，每天基本上就是复习，但复习的内容其实并不感冒，甚至自己都觉得极大概率以后用不上（如果现在学几天就能够在以后用上，那在以后要用的时候抽几天现学效果不是更好），但还是要做，要为考试做准备，尽管无趣，更无意义。&lt;/p&gt;
&lt;p&gt;近来的我越发想去寻找生活的意义，想要真正地在生活，而不是平凡地过日子，甚至仅仅只是活着。真的非常佩服甚至羡慕身边会生活的人，能够从一样的生活当中，过出一个不一样的生活，找寻出不一样的乐趣。然而会生活这件事本身，除了需要自身对于生活的感受能力之外，这样的生活方式，还是需要一些成本的，例如时间，需要付出一些额外的时间来做一些不同的事情，又或者是金钱，某些时候花费一点小小的钱财确实可以带来更好的体验。我们是否原意付出这些代价，来更好的生活，或者说我们又是否有能力来作出交换呢？&lt;/p&gt;
&lt;p&gt;不过也不必太过于悲观，这里的核心还是在自身的感受能力上面。拥有良好细致的感受能力，即使是在普通的日常生活中，我们仍然能够找到其中的乐趣，满怀期待地去迎接生活的到来。另外，对于改变来说，进一步有进一步的欢喜，即使是改变一点点，即使是只能改变一点点，生活就会有极大的不同出现。&lt;/p&gt;
&lt;p&gt;热爱生活，从来不应只是一句简单的口号。希望上面的这些文字，能够帮助到大家，以及提醒自己，将注意力回归到生活本身，找寻回对于生活的热爱。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%94%9F%E6%B4%BB/">生活</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%BF%83%E6%80%81/">心态</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/">个人随笔</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>当我们在上课时，我们在</title>
                <link>https://scottyeung.top/2020/complaints-about-courses/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/complaints-about-courses/</guid>
                <pubDate>Wed, 30 Dec 2020 23:59:59 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;blockquote&gt;
&lt;p&gt;某门课程的触发下，忍不住在周记记录里面写了点&lt;strong&gt;暴论&lt;/strong&gt;发泄一下。
然而越写越觉得确实如此，实在有点可悲，也更加想要放出来倾诉一下
&lt;del&gt;然而因为各种杂事加上自己的懒惰，硬是拖到了第二年才放出来，但觉得新年第一篇文章就写这种消极暴论实在不太好，于是还是改回了在 OneNote 写这篇记录的时间&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有时实在感到迷惑，当我们学一门课程的时候，我们到底在学什么。&lt;/p&gt;
&lt;p&gt;首先，怎样才算是学了一门课程呢？选上某门课程并且通过，看起来就算是已经掌握了某门课程，然而，我本科期间修过的不少课程，可能还有些取到了非常不错的分数，但我自认为是没有学会这门课的，甚至某些情况，我可能什么知识都没有学到，什么收获都没有，仅仅只是拿到了学分而已。&lt;/p&gt;
&lt;p&gt;这样的分数有什么意思，实在不明白，更不明白的是，这些反映不了什么的分数在校园生活中还有着非常大的作用，评优评奖，保研推免，出国留学，考公编制，甚至某些单位的工作都需要看你的成绩，看你的绩点，看你的排名。就这样，我们往往就要为这些没什么意义的成绩卷个你死我活。&lt;/p&gt;
&lt;p&gt;一门课，有没有学到知识，是否掌握了其中的核心能力和方法，才是最为重要的，至于学了多少，学得好不好，这些其实都很难衡量，也是很主观的。想起大三修的软件体系结构这门课，基本上一节课都没有听过，平时也没有任何的作业，就一个期末的开卷考试，最终凭借着抄书拿到了 89 分，按照这个分数，我学到了很多东西，而事实上，我已经完全想不起来这门课讲的是什么，考的是什么。&lt;/p&gt;
&lt;p&gt;所以分数能够说明什么呢？无非就是在某次考试或者某次展示上面拿到了好的成绩，并不一定反映了你的真实水平。当然实力足够强的人，或者是为了卷而做了足够多准备的人来说，即使是每一次考试都能拿到好的成绩。这个足够多的准备，就包含了为了考试而进行的超级全面细致的考试，包括课本或者 ppt 中一些非常细节，非常边角的内容，生怕自己遗漏了这些内容也丢了分，从而不能满绩，尽管这些知识真的很冷门，也很无用 &lt;del&gt;（这也是我以前经常会做的事情）&lt;/del&gt; 。&lt;/p&gt;
&lt;p&gt;很好奇，为什么课程的成绩不能够以是否通过来衡量呢？我学一门课，学会了，或者学到了足够的内容，就可以通过，学不会，或者没学够，就不通过。不过这样也就丢失了区分度，你学了全部，他学了一半，大家都只是通过，未免自己也会觉得有点不爽。但其实又很奇怪，为什么会不爽，区分度为什么一定要存在呢，大家都通过了这门课，又有什么问题，你比他学到了更多，掌握到更多知识，你赚了；他可能能力有限，有部分内容就是掌握不了，也可能是他只需要部分的知识，就足够他使用了，学多反而浪费。这样给个分数来增加区分度，没什么意义。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么需要成绩来作为区分度，我觉得还是因为很少可以让自己知识或者能力真实地反映出来的机会。我学习能力比较好，知识储备比较丰富，代码能力也比较强，那又怎么样呢？没有机会展示，也没有人知道。因此，只能通过做题，通过考试，通过成绩来展示自己的能力，证明自己学得好，尽管这其实只能够证明自己拿好成绩的能力更强。但即使这样，也比什么都没有要好。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外，还有一个挺有意思的事，就是课程的先修课程。通常我们选课的时候，其实很多时候并没有关心这门课程的先修课程是什么，事实上开这门课的老师也不关注。因此在第一节课的时候，往往只是单纯列出这门课的前置课程有什么，看看大家有没有修过。&lt;br&gt;
然而前置课程需要到一个怎么样的程度呢？仅仅修过这门课并且勉强通过的程度够不够，还是需要中等一般的水平，还是需要掌握到优秀的程度。没说，确实也不好衡量，而且往往老师认为你掌握的程度，与实际上大多数人的水平是有着挺大的落差的。&lt;br&gt;
想起在修微机接口的时候，老师经常问的问题就是：这个东西有没有学过，在计组/计网里面的 XXX，然后下面基本都没有人可以回答上来，可能是真没学过，但更多是学过但是没有学好，或者已经忘了。&lt;/p&gt;
&lt;p&gt;现在对于成绩的态度，说是及格就行，课程能过就行，分数没什么意义。说是这样说，但真的来个六七十分，真的不会觉得难受吗？&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%AD%A6%E4%B9%A0/">学习</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/">个人随笔</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>非主流下的少数选择</title>
                <link>https://scottyeung.top/2020/minority-under-mainstream/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/minority-under-mainstream/</guid>
                <pubDate>Sun, 13 Dec 2020 19:52:23 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;又再因为环境的差异，因为所使用的操作系统与主流，或者说是大多数人用的不一样，导致额外浪费了不少的时间，尽管最终还是解决了，但内心很是不爽，在这期间还无数次诞生出了重装环境，换个发行版系统的念头，不过考虑到近段时间实在太忙，没时间配置新的系统环境而放弃。话虽如此，新的系统的镜像我已经下好几个了，实在忍不住了，或者是有时间之后，估计马上就会换掉。&lt;/p&gt;
&lt;p&gt;这大概就是使用一些非主流环境和工具所需要付出的最大成本了。这里的非主流，也并不是说所使用的东西很是冷门，没什么人用，更多指的是，在某种使用场景或情况下面，它不是绝大多数人使用的解决方案，也不是官方推荐的方案。因为不是官方推荐，导致文档里面缺失方法步骤，因为它不是绝大多数人的选择，所以我们在搜索问题时能看到的大家出现的问题，其发生的环境都与我们不一样，自然给出的解决方法也不能应用到我们的环境上面。&lt;/p&gt;
&lt;p&gt;以刚遇到的问题为例，我想要在 docker 里面开启 GPU 支持，但是拉下 cuda 的 docker 镜像后使用 &lt;code&gt;--gpus&lt;/code&gt; 的参数却报错了。把错误提示到网上一搜，首页几乎全是一样的错误，然而这些错误发生的环境都是在 ubuntu 当中，给出的解决方法全都需要用到 debian 系的包管理工具 apt，使用 pacman 的 arch 系 Linux 提供自然用不了这些解决方法。即使在搜索框前加上系统的关键词 arch/manjaro，出现的搜索结果仍然还是这些 ubuntu 上的错误。难道说就没有人在 manjaro/arch linux 上面出现过这样的问题吗？这怎么可能？&lt;/p&gt;
&lt;p&gt;参考了一下 ubuntu 上面的解决方法，似乎需要下个 nvidia-container-toolkit 的包。在搜到的官方文档看了一下，给出的安装方式就是没有 arch 系的环境。到 pacman 安装试了一下，没有，发现似乎有用户在 aur 传了相关的包了，yay 试了一次，构建的过程中链接出问题了，构建失败。最终在 yay 试了几个包后才下好，暂时解决了问题。&lt;/p&gt;
&lt;p&gt;明明就是一个很简单的问题，就因为环境的差异，找不到在该环境下面的解决方案，导致额外付出了精力与时间。当然这次算是运气比较好，最终解决了问题，但如果问题解决不了，就真的只能够自己无能狂怒了。在这个过程中，自己也无数次懊悔过为啥要选择 Manjaro，不老老实实选一个最多人选择的 Linux 系统环境。现在选择成为少数，自然要为其付出相应的时间和精力成本。&lt;/p&gt;
&lt;p&gt;即便如此，仍然还是会有很多人选择成为这少数，也包括我。当时为什么会做出这个选择，选择成为少数呢？&lt;/p&gt;
&lt;p&gt;主流很多时候能够成为主流，并不是因为它有多好，更多的只是因为它抓住了某个机会，抢占了绝大多数的用户和市场，而它一旦有了规模效应之后，就能够非常容易地吸收到绝大多数用户的加入这个选择，反向地壮大这个群体。因为绝大多数用户都是 Ubuntu 用户，因此它们所写的教程和资料自然都是在 Ubuntu 环境上的相关内容，作为一个新用户，自然更倾向于加入 Ubuntu 阵营。尤其是在中文互联网社区，百度搜索总是会给你返回在某所谓技术社区上面的大批相似文章。当然这里也不是说 Ubuntu 不好，只是&lt;strong&gt;我们能不能多点选择，对各种选择，各个方向更加友好点，从而让互联网社区更加友好呢？&lt;/strong&gt; 为此，某些时候我更加倾向于所谓少数的选择，也算是一种支持，在某些时候，它们也能够给到我一些惊喜。尽管很多时候我自己也坚持不了，就比如 Chrome，先后转到 Edge 和 Firefox，还是忍不住要回来。&lt;/p&gt;
&lt;p&gt;互联网自由开放的特点，一直都是我比较推崇和向往的。但现在的现象却是比较诡异的，不够自由，开放不足。各家互联网公司的画地为牢，把用户死死地圈在自己的一亩三分地里面，生怕用户和流量的流失，越垄断，越强大，越强大，就越有垄断的实力，不到你不屈服。最近就有一个被点名的现象：互联网企业下场到社区里的生鲜零售，通过超低价格和超高的补贴来占领市场，企图重现一次打车和外卖行业的现象。幸好很快就被大家意识到，官方也下场点名了资本了。&lt;/p&gt;
&lt;p&gt;有实力的公司或者软件，逐渐成为主流难以避免，即使进化到垄断，也不足为奇。我们又能够做些什么呢？我们能不能给予更多的机会给不同的选择，尤其是处于弱势的选择呢？给多一点支持，多一次的尝试，可能就会有不一样的情况出现。然而在处于各种因为并非主流选择带来的不方便情况下，我们又可以坚持多久这些选择，不向主流投靠呢？&lt;/p&gt;
&lt;p&gt;不管怎样，起码我也是坚持过了，而你呢？&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Ubuntu/">Ubuntu</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Manjaro/">Manjaro</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Linux/">Linux</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Linux/">Linux</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>近期太极练习的反思</title>
                <link>https://scottyeung.top/2020/taichi-practice-reflections/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/taichi-practice-reflections/</guid>
                <pubDate>Fri, 04 Dec 2020 17:07:43 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;从十月份开始练太极拳至今，已经差不多两个月了。在这个期间，基本每周会去练两三次，晚上九点跑去恩玲剧场练习松柔功操，周四跑去武术馆练练拳架套路。虽然感觉上已经练得很多，但实际上投入的时间也不算多。&lt;/p&gt;
&lt;p&gt;兴趣确实是有的，收获也似乎算有，用王真人的话来说，也是有一点功力的，算是有点劲出来了。&lt;/p&gt;
&lt;p&gt;然而在这两周的练习中，却感觉到自己好像已经进入到一个瓶颈期，感觉自己练了也有一段时间了，但是没什么长进，尤其是在功操上面。&lt;/p&gt;
&lt;p&gt;当初第一次练松柔功操的时候，因为里面有着比较多的会锻炼到下半身一些不太常用的肌肉群的动作（比如揉膝，蹲坐等集中在下盘的动作），而且强调身体其它地方放松，只靠特定的肌肉群出力，因而特别酸爽。第一次练完，就跟健身练完腿差不多，酸软无力，抬不起来的感觉。&lt;/p&gt;
&lt;p&gt;可惜的是，直到现在的我，也依然会在练习几个揉膝动作后感到大腿酸软，而其余的动作，也依然在练习时有着比较强烈的感觉，让我感觉到自己其实并没有长进，并没有提升。至于其它的套路，站桩，因为太过于强调劲，强调感觉，也太过难以捉摸，这次好像有点感觉，下次同样的动作，同样的打法，却找不回来了。套路动作是学到了，而是否打对了，是否打得更好了，自己也不知道。&lt;/p&gt;
&lt;p&gt;虽说只是为了兴趣在练习太极拳，但是如果一直这样练都还是这个水平，一直都没什么长进的话，其实自己内心也不太舒服，练习也练得没什么干劲。当然练习时间确实不长，每周最多也就三四小时，加起来可能就一两次机会练习，较大的提升自然不容易出现。但我也确实时间不多，虽说晚上去练拳可能也就练个一个小时多点，但是练拳前准备，练拳后的洗浴休息，前前后后可能需要花费自己三个小时的学习时间，作为一个懒散的人来说，代价其实挺大，因为本来的学习时间就不多。&lt;/p&gt;
&lt;p&gt;这也似乎陷入了一个不好的循环，时间不多导致选择去练拳的时间不多，练拳的时间不多自然效果不好进展缓慢，效果不好导致自己练拳的时候找不到感觉，兴趣消减，逐渐就更加不想去练拳，通过自己时间不同的事实作为借口来逃避练拳。这导致我已经一个星期没去练松柔功操了🤣。接下来一个月估计更加忙，可能练习次数更少（逃&lt;/p&gt;
&lt;p&gt;要逼着自己先去练了再说吗？这样就似乎感觉违背自己所谓兴趣的性质了。其实更希望能够将太极，将练拳融入生活当中，时不时就站起来打打拳，站站桩，甚至在平时的生活活动里面，融入一些动作，进行锻炼。然而这样的行为在他人眼中实在有点奇怪，尤其是对于我这种性格的人，总是害怕在他人面前表现自己，羞于被他人看到我在干什么，即使是无意的。&lt;/p&gt;
&lt;p&gt;离这个学期结束还剩一个月，希望自己能够剩下的拳架套路学完吧&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%A4%AA%E6%9E%81/">太极</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%86%85%E5%AE%B6%E6%8B%B3/">内家拳</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>记第一次把系统搞挂掉</title>
                <link>https://scottyeung.top/2020/broke-up-the-os/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/broke-up-the-os/</guid>
                <pubDate>Sun, 08 Nov 2020 22:46:18 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;&lt;strong&gt;高度的自由有时就意味着高度的脆弱性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;今天就因为更换显卡驱动的原因把我实验室的机器给搞挂了，导致无法进入系统。&lt;/p&gt;
&lt;p&gt;在实验室的机器到位之后，基本上我就逐步把工作环境迁移到实验室的机器上面，装了一个 Manjaro 系统，来感受一下滚动升级的爽快（&lt;del&gt;遇坑&lt;/del&gt;）体验。系统采用的是 KDE 桌面，相关的工具环境都已经搞得七七八八了（到时写个文章来讲讲我是咋样在多终端同步工作&lt;del&gt;挣扎&lt;/del&gt;的），在日常的工作和娱乐使用上面，基本已经没什么问题。&lt;/p&gt;
&lt;p&gt;不过最近发现一个问题（bug），就是设备总是会在停止使用一段时间后，界面变色闪烁并且卡死。在忍受几次因卡死不得不重启之后，终于打算上网搜搜解决方法（感谢 vscode 与 typora 等软件的自动保存功能以及坚果云的自动同步让我即使卡死重启也没有丢失数据资料）。网上大多数人说是显卡驱动问题，我就跟着看到的其中一个回答的建议进行操作，把我所装的显卡驱动换成了另一个版本。看上去已经解决了。&lt;/p&gt;
&lt;p&gt;然后出去打个水回来，发现机器又再次卡死了，然而这次重启，却已经启动不了。提示&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Failed to start! Load kernel modules
Failed to start! Load kernel modules
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当时的第一反应居然不是感到很慌，而是在想上午计划的任务做不完了，也是好笑。虽然这是第一次遇到这种状况，而且当时的我还没找到原因，但居然觉得这好像是习以为常的小事，可能这就是 &lt;strong&gt;Linux User Group 成员的觉悟&lt;/strong&gt;吧。因为当时没带电脑，就用手机上网搜了搜相关问题，发现好像是刚刚更换的显卡驱动出问题了，把它换回来应该就没问题了吧。&lt;/p&gt;
&lt;p&gt;那怎么更换显卡驱动，把新装的删掉，把旧的重新装回来呢？首先需要进入 bash。又怎样进入 bash 呢？网上说的 tty 我也进入不了，只能通过启动 U 盘（Live USB）进入系统然后加载本机环境。所以不得不跑回宿舍重新刻录一个启动盘，顺便睡了个午觉。&lt;/p&gt;
&lt;p&gt;拿到启动 U 盘之后就比较简单了，直接通过 U 盘进入 U 盘的系统，然后在里面开终端通过 chroot 命令改到硬盘中的系统执行环境，然后把驱动换回来。（说起来很简单，但事实上这几个步骤以及当中的细节，我重复组合尝试了好几次才好起来了。主要操作为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;manjaro-chroot -a &lt;span class=&#34;c1&#34;&gt;# 根据硬盘安装的系统进行挂载等操作，来切换到硬盘中系统的 bash 环境&lt;/span&gt;

sudo mhwd -li &lt;span class=&#34;c1&#34;&gt;# 列出安装的驱动，&lt;/span&gt;
sudo mhwd -r driver-to-delete &lt;span class=&#34;c1&#34;&gt;# 显卡驱动全删了&lt;/span&gt;
sudo mhwd -i pci nonfree &lt;span class=&#34;m&#34;&gt;0300&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 自适应安装一个闭源的显卡驱动&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 更新升级所有的 package，这一步感觉挺莫名其妙的&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 大概是需要更加内核和引导文件以适配驱动文件？&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 这里几乎把所有的 package 都重新安装了（因为这样导致我第一次不敢尝试又重启多了几次&lt;/span&gt;
sudo pacman -Syyu 
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;现在回顾起来感觉修复好像也还挺简单的，然而当时却搞了我两个多小时。在这次问题之后，重新打开了我里面的备份软件 timeshift，还是有在每天备份快照的（意外发现今天的升级把系统也升了一个小版本号），这也让我萌生出了一种&lt;del&gt;豪气&lt;/del&gt;错觉：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只要给我一个 Live USB 让我进去 terminal，啥问题都好像可以解决。&lt;/strong&gt;&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Linux/">Linux</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Manjaro/">Manjaro</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%BB%8F%E5%8E%86%E5%9B%9E%E9%A1%BE/">经历回顾</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Linux/">Linux</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>又一次的漫画爬取</title>
                <link>https://scottyeung.top/2020/crawl-commic-again/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/crawl-commic-again/</guid>
                <pubDate>Thu, 08 Oct 2020 11:54:28 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近刚开始追了一部 b 站的&lt;a href=&#34;https://www.bilibili.com/bangumi/play/ss34230&#34;&gt;新番&lt;/a&gt;，觉得挺有意思，就打算看看它的漫画，但这漫画也是某站独家，不太想花钱，就打算上网找点资源白嫖（当然大家还是要支持正版的！我是已经支持太多了想省一省 😂)。然而网上找到的资源太少，且大多已经不可用，唯一找到的一个可以看的网站，图片质量太高，加载太慢，而且它的加载方式也很离谱，每一话在一个页面直接丢给你十几二十张图片，而且也没有 lazy load, 全部图片一起加载，体验极差。&lt;/p&gt;
&lt;p&gt;所以没有办法，只能重操旧业，把它爬下来，免去了阅读过程中的等待时间。（对上一次的爬取可以&lt;a href=&#34;https://scottyeung.top/2020/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%BC%AB%E7%94%BB%E6%89%B9%E9%87%8F%E7%9A%84%E7%88%AC%E5%8F%96-%E4%B8%8B%E8%BD%BD/&#34;&gt;看此&lt;/a&gt;）&lt;/p&gt;
&lt;h2 id=&#34;爬取思路&#34;&gt;爬取思路&lt;/h2&gt;
&lt;p&gt;在漫画页的路径规则非常统一，都是那种 &lt;code&gt;http://host/:type/:commic-name/:chapter.html&lt;/code&gt;, 直接根据规则生成 url 就行了。&lt;/p&gt;
&lt;p&gt;打开开发者工具看了看页面的文档具体内容，发现漫画图片就直接硬编码嵌入在 &lt;code&gt;table tr td img&lt;/code&gt; 中，而且每个图片还直接给了个形如 &lt;code&gt;img2&lt;/code&gt; 这样的唯一的 id，XPath 都不需要思考怎么写了，直接 &lt;code&gt;//*[starts-with(@id,&#39;img&#39;)]&lt;/code&gt; 就可了。于是马上拿出 C# 写了一个函数，解析出单话的所有图片链接，然后下载。&lt;/p&gt;
&lt;p&gt;然而发现 xpath 居然找不出了目标元素，一开始还以为是我的 XPath 写得有问题，换了几种写法都不行，看了看获取到的 html 文档全文，才发现这个页面是靠导入 Javascript 脚本，动态插入 DOM 节点来生成完整页面的，所以普通的静态爬取文档方法无效。对这种动态的页面，要么用模拟浏览器，等待它加载执行完 js, 再来解析页面元素，要么就直接深入它动态操作页面的 Javascript 脚本，直接从源头来找数据。因为我算是对 JavaScript 有点熟悉，而且爬虫等待页面加载完再解析页面，性能开销也未免太大（而且 C# 我也不太知道有啥可以像 Python 中的 Selenium 可以模拟浏览器操作的），于是就看了看它导入的一些 js 文件，居然还发现了它所使用的一份来自 2011 年的历史遗留 js 代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://scottyeung.top/posts/crawl-commic-again/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在现在的角度来看这份代码，简直就是灾难。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随意地在随处定义全局变量&lt;/li&gt;
&lt;li&gt;使用匿名对象的成员来封装函数&lt;/li&gt;
&lt;li&gt;随心所欲的变量命名：
&lt;ul&gt;
&lt;li&gt;大量的 a, aa, bb, ll 无意义命名&lt;/li&gt;
&lt;li&gt;英语拼音混杂看不出意义的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符串拼接硬编码组成的待插入 html 标签&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还好有 IDE, 能够有变量搜索和函数跳转，大概的功能还是看出来了：加载文档时调用一个初始化方法，初始化方法根据一个图片的路径变量，生成一系列的 img 标签，插入到 html 文档里面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;imgload&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;qTcms_S_m_murl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;$qingtiandy$&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;qTcms_page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;qTcms_page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ll1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ll1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ll1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;srcid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;qTcms_page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;curpage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f_qTcms_Pic_curUrl_realpic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;limg1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/statics/images/pic_loading.gif&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;#qTcms_Pic_middle tr td&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;div&amp;gt;&amp;lt;img class=&amp;#34;comic_img&amp;#34; src=&amp;#34;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#34; data-original=&amp;#34;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#34; id=&amp;#34;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;srcid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#34; style=&amp;#34;display: inline;cursor: zoom-in;&amp;#34; onclick=&amp;#34;qTcms_page.relpic(\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\&amp;#39;,\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;srcid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\&amp;#39;)&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;但是这个变量 &lt;code&gt;qTcms_S_m_murl&lt;/code&gt; 我怎么找都没找到它在哪里定义的，用倒是到处都在用，找了几个其它的 js 文件也没有找到，后来发现这居然是在原始的 html 文档直接给出的，原始 html 文档给了一个经过 base64 编码的所有图片链接地址作为一个全局变量，然后导入的 js 文件将该变量中的地址解码再分别取出每个图片的地址，生成 img 标签并插入到源文档中。&lt;/p&gt;
&lt;p&gt;发现了它的这个方式之后，工作就很简单了，直接从原 html 文档中找出这个编码后的图片地址合集，解码后分别下载这些图片保存。&lt;/p&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;p&gt;这次我选择了用 C# on dotnet core 来实现爬虫任务。按照上面的思路，具体的实现方式也很简单：&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;根据要下载的漫画章节号，生成它的 url&lt;/li&gt;
&lt;li&gt;发个 Get 请求获取这一话漫画的 html 文档，通过正则获取其中编码后的图片链接合集&lt;/li&gt;
&lt;li&gt;对于图片链接中的每个图片链接，使用自带的 WebClient.DownloadFileAsync 方法直接下载图片文件到本地&lt;/li&gt;
&lt;li&gt;然后就是统筹整个下载任务，逐话下载，每话分别获取图片链接，创建文件夹，下载所有漫画图片&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里必须赞一句 dotnet core 对于异步编程的支持，着实做得太好了，自带的 async 和 await 关键字，以及其中用的几乎所有网络请求或者本地 IO 的方法，都给出了异步版本的实现，可以很容易地就实现异步编程，而这种基本是完全交由编译器去处理多线程的调度处理方式，所实现的效果我觉得是比我自己简单地开几个线程分别跑任务的部分是高效得多的。&lt;/p&gt;
&lt;h2 id=&#34;结果&#34;&gt;结果&lt;/h2&gt;
&lt;p&gt;这个 C# 的实现效率确实太强了，我尝试性下载了一话，二十来张图片，加起来四十多兆，十来秒就下载完了。下载前 80 话漫画，共 1.8G 的图片，总共也就用了 17 分钟，太快了！尤其是对比上一次的下载，下一话居然需要一两分钟，下载了不到一百话就用了两三个小时。当然这里面还有很多因素影响，而且上次的代码的异步编程实现也实现得很糟糕。&lt;/p&gt;
&lt;p&gt;不过还是不妨碍我吹一句：&lt;strong&gt;我们 dotnet 真是太强啦！&lt;/strong&gt;&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%88%AC%E8%99%AB/">爬虫</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/">异步编程</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/">并发编程</category>
                                
                            
                                
                                
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/dotnet/">dotnet</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Coding-%E8%AE%B0%E5%BD%95/">Coding 记录</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>对知行合一的一些想法</title>
                <link>https://scottyeung.top/2020/knowledge-as-action/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/knowledge-as-action/</guid>
                <pubDate>Sat, 03 Oct 2020 13:49:25 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;昨天无意中看到了一个关于王阳明心学的回答，谈到了其中心学的精髓是什么，觉得挺有意思，就在晚上的时候重新认真地翻了翻这个问题，并且将其中的高赞回答摘录到了印象笔记中细细品味： &lt;a href=&#34;https://www.zhihu.com/question/28052564/answer/1282463260&#34;&gt;王阳明的心学精髓是什么? - 知乎&lt;/a&gt;，也算是有点收获，对于一直以来都觉得非常神奇，也非常向往的陆王心学有了更深的了解。&lt;/p&gt;
&lt;p&gt;心学到底是什么？我对其的最主要印象，莫过于当中最为有名的一个信条——知行合一。什么是知行合一，按照字面理解，就是自己的认知，应该与自己的行为相符合一致，怎么想的，就应该要怎么做。这也是我个人对其比较浅显的理解。我对其的了解其实也不算深，大部分好像还是来源于以前初中的历史？ Anyway, 我还是很向往，很佩服这种状态的。知行合一，让自己的行为能够跟上自己的认知，而我现在，或者一直以来的一个很大的问题，就是行为跟不上认知，想得太多，做得太少。&lt;/p&gt;
&lt;p&gt;在初三准备中考的时候，曾经某次跟金鱼闲聊就聊到过，我们很多时候并不是不知道怎样才能学好，怎样才能取得一个好的成绩，学习又有什么难的，每节课认真听课，每晚晚修认真完成作业并按时复习预习，周末回家也保持着完成作业和练习等各种学习任务，学得好自然是顺理成章的。但真的这么简单吗？不是，原因在于我们很多时候都并不能做到这些事情。想起来，计划起来确实简单，但做起来，并坚持做，太难了。&lt;/p&gt;
&lt;p&gt;到了现在，缺少了一些外部环境的约束，以及一些比较紧迫近期的目标推动，自己的行为就更加缺少动力了。想法确实是充满雄心壮志，但是想法最终也只是想法，远远未达到实现的程度。好比最近的我，作业很多，任务很多，也想了一下计划来完成，每天列的 todo 也充满干劲，然而最后每天也并没有完成多少的任务，内心反而充满愧疚与负罪感。&lt;/p&gt;
&lt;p&gt;所以我向往这种知行合一的状态，我也想能够找到方法进入这样的境界，能够让我的行动跟上我的想法。当然，因为弱鸡的行动力，加上其它各种杂事缠身，最终也还是不了了之。不过昨晚看到的这一篇回答，或许就是一个转机？&lt;/p&gt;
&lt;p&gt;所以知行合一到底是什么？文章虽然很长，举了一大堆的例子和背景铺垫，但是核心还是那几样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;知：当我们遇到某一个特定的状况，情景，问题时会自然而然地出现的感觉，潜意识，认知。&lt;/li&gt;
&lt;li&gt;行：就是我们对于这个特定的状况，情景，问题所做出的（应对）行为&lt;/li&gt;
&lt;li&gt;知行合一：我们遇到特定状况时，会自动根据出现的感觉，做出相应的行为&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，实质上，知行合一就是一个&lt;strong&gt;一一对应&lt;/strong&gt;的的思维模型，也就是行为规律，遇到什么样的问题，在怎样的情况下，会怎么做。那知怎么来呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;知不来自于你的意识，而是来自于你上一次对这个媒介做出的行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个人出现在你面前，你一眼看到，一瞬间给你的感觉来自之前，每个人都是，每个人都不一样，都是独一无二的媒介。那这个之前，是哪一次呢？刚认识？还是哪次出去玩的时候？可是生物本能来说，一瞬间的事儿，哪可能给你选啊，这不是你用意识能选的东西。只能来自上一次。可能是上次他的行为给你留下的印象，也可能是上次他出现在你脑海里你对他的想法，总之是来自上次，不是上上次，也不是上上上次，只能是上一次。这一瞬间的感觉，决定了你对他的态度。
这次用这种方式做一件事，下次你还是首先想起来用这种方式。做过的事情再做觉得很简单，没做过的就觉得很复杂不想去做。因为做过的，在你的脑子里有对应的知了，每一步下意识就能完成。&lt;/p&gt;
&lt;p&gt;因此，我们可以通过对问题做出不同的行为，来修正我们此前的知，来不断替换已有的知。
通过不断的替代，一个人给你的印象，也会随之变来变去。假如你通过靠谱渠道听说了一个之前和蔼的亲戚原来是个凶险的逃犯，你下次面对他，还觉得他是那个和蔼的人吗？不要说你因为害怕会装作不知道，我说的是你心里对他的感觉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总结下来，所谓的知行合一，关键点还是在知，**这里的知，是所谓的感觉，是一种出离于意识，与思维无关的感觉，这样的感觉，会决定个人的想法和行为。**而感觉又会被不同的行所积累，修正，甚至是替换。 我们能够做些什么来好好贯彻知行合一，或者说利用好知行合一呢？翻了翻文章本身的评论，并结合我所理解的文章本身，大概可以有几个方向：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;多尝试不同的行。尽可能多地尝试不同方向，不同领域的事情，通过一些活动或行为，积累自己在各个方面的感觉/经验，让自己能够在不经意间积累到将来可能会用到的知。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只有行，才能改变个人的知，才能取代以往的可能有瑕疵的知。所以我在培养习惯，或者指定计划的时候，最重要的还是首先让自己开始起来，让自己进入状态，进入计划。就像早起，即使在脑海中再怎样强调自己早起的各种好处，强迫自己一定要早起，但该起不来还是起不来，该不想起还是会不想起。还不如直接就通过一些别的手段，让自己强制起来，在意识到好像早起其实也没有那么难/早起好像还挺爽的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;良知很重要。正确的感觉很重要，所以我们应该尽可能地在最开始的时候就选择正确的行为，培养正确的感觉&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一些错误的“行”，会导致自身不合适的“知”，近而导致自身出现不合适的潜意识，所以我们在平时的时候，也要注意慎独，如果一件事情是不合适的，那么我们从一开始就不要做，可能我们会觉得一次两次没什么大不了的，但是会影响一个人的以后对此事物的看法，从而千里之堤溃于蚁穴，最终出现严重的后果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在写本文的时候多次回看他人的回答和评论，越看越觉得自己的认识实在浅薄。确实需要多花点时间再好好探索一下。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%BF%83%E5%AD%A6/">心学</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80/">知行合一</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>总是感觉自己很忙</title>
                <link>https://scottyeung.top/2020/looks-so-busy/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/looks-so-busy/</guid>
                <pubDate>Sat, 26 Sep 2020 21:00:00 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;自从上了大学之后，总是感觉自己莫名地很忙，但你要说真的有很多事情做吗？也不是，起码就不是那种忙到说基本没有空闲时间的那种程度。然而还是感觉很忙，感觉会没有空闲时间，去做一些其它的事情，因此选择了避开很多的活动与交际，即使是这样，也仅仅是维持在时间勉强够用的程度。&lt;/p&gt;
&lt;p&gt;最近的一次报告任务就是这样的情况：上两周布置的任务，看五篇论文，然后做个 ppt 来讲一讲论文的内容。时间给的很充足，老师也没有 push. 按理说我应该能够早早地完成阅读任务，从容地准备好论文报告的 ppt 和内容。但最终我却需要奋战到最后一刻：直到今天下午作报告，我中午吃饭前都还在改 ppt。虽说最终报告也还算顺利，但是自我感觉还是挺恐怖的，恐怖的点不在报告本身，而是在完成任务的过程。原本时间很宽裕的任务，随着 ddl 的逼近反而越来越赶，情绪上也是日益焦虑，时不时就会担心好像事情太多要完成不了。&lt;/p&gt;
&lt;p&gt;为什么会出现这种情况？在前几天因午睡赖床产生的愧疚情绪下，分析了一下原因，尝试解答一下为什么自己越做事越感到时间不够用，会感到越来越忙。然后就发现自己当前状态的一个现象：&lt;/p&gt;
&lt;p&gt;如果我有 10 分的时间，完成工作需要 6 分的时间，所以我会觉得在接到任务时觉得时间很宽裕，剩下的 4 分时间可以随意安排在其它地方，比如运动，比如社交，比如娱乐，还可以将多余的时间作为后备，以防突发情况的出现。但实际上，当我在完成这个工作的时候，虽然我只需要 6 分的时间就能够完成，但是我在开始工作之前，或者工作之间的休息时间，总会拖延，或者是干一些不太相关的杂事，总是会花费一些额外的时间。因为完成工作所需要的 6 分时间，一般来说都是比较大块的时间，会选择分开成在一周的几天来完成，那这些拖延，便随之分布在各个小的工作时间之前或之后，聚少成多。完成工作只需要 6 分，但是全部拖延的时间，浪费的时间，加起来就可能有 2 分了。也就是说，完成这个任务实质上用了 8 分的时间。&lt;/p&gt;
&lt;p&gt;因为工作用到了 8 分的时间，变相就挤压了原本存在的空闲时间，所以随着工作的推进，原本存在的空闲时间越来越少，自然就感觉越来越忙了。然后因为剩下的时间少了，对于完成不了的焦虑就更加多了。对于这些空闲时间，也不敢随便使用了，有什么活动不敢参加，有什么事情也不敢尝试，甚至某些人际交往，我也会可免则免，尽量避免。所以会给到别人一种很忙的感觉，自己也会这样觉得，我真的很忙，我没时间干别的事情了。&lt;/p&gt;
&lt;p&gt;这样的状态对于我还是影响很大的，日常焦虑，日常担心，害怕事情不能按照预期正常完成。因为害怕，所以总会有意无意地拒绝了很多可能的发生，因此也错过了不少的机会，在竞赛上，科研上，交往上。对于我的本科生活，常常会感到遗憾，遗憾没有取得更多的成果，遗憾日子过得过于平淡，尽管我也是甘于平淡的人，也并不会对这样的生活觉得枯燥厌倦，但是如果我不那么的“忙”，是不是就会有着更多的可能呢？&lt;/p&gt;
&lt;p&gt;尽管因为拖延这种习惯，让我一直都有一种很是忙碌的感觉，但在大四保研之后，可用的时间一下子大增，尽管还是拖延，需要 6 分时间的任务还是会拖到要用 8 分来完成，总是整体可用的时间却从 10 分变成了 20 分，于是好好地体验了一把时间充足的空闲状态是怎样的。在保研后的一年中，因为所谓变“闲”的状态，我也做出了不少的改变和尝试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加入了一些群并大量的水群（顺带练习出了朋友圈和动态等各种评论技能&lt;/li&gt;
&lt;li&gt;通过群参加了一些线下的活动并认识到了新的朋友&lt;/li&gt;
&lt;li&gt;大量的约饭并维系感情（尽管约来约去都还是固定那些人&lt;/li&gt;
&lt;li&gt;与一些以前很要好的朋友重新建立并保持着联系&lt;/li&gt;
&lt;li&gt;。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在研究生开学，又重新变回到忙的状态，可用时间又回到了 10 分的状态，而任务时间则可能已经不止 6 分了。开学第三个星期，已经出现了 3 proposal 作业以及一个 reading and report 的作业了。能怎么办呢？一方面拖拉的问题需要改改，提高自己做事的效率，更快地完成任务，另一方面也需要开源一下时间了，怎样从原本利用不了的地方，发掘出更多的可用时间，也是一门学问。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/">时间管理</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/">个人随笔</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>notes on How to Read a Paper</title>
                <link>https://scottyeung.top/2020/how-to-read-a-paper/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/how-to-read-a-paper/</guid>
                <pubDate>Sat, 19 Sep 2020 18:48:53 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;在本周的某门研究导引课上，被推荐了一篇讲述如何读 paper 的 &lt;a href=&#34;http://ccr.sigcomm.org/online/files/p83-keshavA.pdf&#34;&gt;paper&lt;/a&gt;. 一直以来，其实我都觉得科研（research）明明是一个 skill, 但是一直都没有过方法或者课程的教授，也没有一个好的学习过程和机会。基本都是老师布置任务方向，交代看些什么 papers, 完成什么任务，就这样靠着所谓的做中学，靠着所谓的骚扰师兄师姐，大家就能突然领悟，就能够上手很好地完成科研工作，掌握科研的方法和技能。&lt;del&gt;而领悟不到的，就只能够解释为自己不适合科研而遗憾退场，或者当一颗科研的螺丝钉来苟活着。&lt;/del&gt;
当然其实基本所有的事情，都有着其自身的方法论，都能够找到相关的系统的训练（maybe&lt;/p&gt;
&lt;p&gt;回到正题，这篇 paper 主要讲了怎样读一篇 paper，以及如何判断读到什么程度和该不该读。&lt;/p&gt;
&lt;h2 id=&#34;why-reading-papers&#34;&gt;Why reading papers?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;reviewing papers for a conference or a class&lt;/li&gt;
&lt;li&gt;keep current in our fields&lt;/li&gt;
&lt;li&gt;doing survey for exploring a new field&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;three-pass-approach&#34;&gt;Three-Pass Approach&lt;/h2&gt;
&lt;p&gt;本文最主要还是提出了一个分成三个阶段阅读的方法。第一阶段的阅读获取文章的大体 idea, 第二阶段的阅读获取文章的主要内容，第三个阶段则深入了解文章，获取各种 details。&lt;/p&gt;
&lt;h3 id=&#34;the-first-pass&#34;&gt;The First Pass&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;a quick scan to get a bird’s-eye view of the paper&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一阶段的阅读快速浏览 paper, 大概以五到十分钟的时间，了解它的大体想讲什么，从而决定后续要不要继续阅读。主要通过以下部分获取信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;仔细阅读文章的 title, sub-title, abstract 和 introduction&lt;/li&gt;
&lt;li&gt;阅读各个章节的标题（仅标题&lt;/li&gt;
&lt;li&gt;跳到最后仔细阅读 conclusion 部分&lt;/li&gt;
&lt;li&gt;扫一下 references, 看看有无熟悉/看过的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过第一阶段的略读，应该能够回答以下的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文章的类别：本文是什么类型的文章？measurement paper, analysis of systems, description of prototype&lt;/li&gt;
&lt;li&gt;Context: 文章属于什么领域？与什么方向相关？&lt;/li&gt;
&lt;li&gt;正确性&lt;/li&gt;
&lt;li&gt;contribution&lt;/li&gt;
&lt;li&gt;写得怎么样（从行文的角度来看&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果出现以下情况，就可以选择 stop 不看了:（如果不是被安排了必须完成的任务&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不感兴趣&lt;/li&gt;
&lt;li&gt;没有相关的前提知识无法理解&lt;/li&gt;
&lt;li&gt;文章存在问题&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;the-second-pass&#34;&gt;The Second Pass&lt;/h3&gt;
&lt;p&gt;第二阶段的阅读可以花上一个小时，对文字的主要内容作一个更加详细的了解，找到 paper 中的关键点。可以通过仔细浏览文章给出的图表入手，通过浏览图表的内容，找出它所表现的数据特征，它 support 的内容或结论，来发掘文章的关键点。&lt;/p&gt;
&lt;p&gt;完成第二阶段的阅读后，应该能够把握到文章的内容，并且能够向他人进行本篇文章的 summarize. 如果所阅读的文章不是当前所研究方向的内容，仅是感兴趣的话，到这一阶段则可以结束阅读了。&lt;/p&gt;
&lt;p&gt;如果结束第二阶段后还没理解一篇文章，则可能是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对该领域不熟悉，不了解这方向的名词概念&lt;/li&gt;
&lt;li&gt;证明或实验技巧不理解&lt;/li&gt;
&lt;li&gt;写得不行影响阅读理解&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于这些情况，我们可以：不看了；读点背景材料再来看；直接跳到第三阶段&lt;/p&gt;
&lt;h3 id=&#34;the-third-pass&#34;&gt;The Third Pass&lt;/h3&gt;
&lt;p&gt;第三阶段则是通过解构重构的方法来读文章，通过由读者来在脑海中重新实现 paper 的方法来进行：基于作者提出的一些 assumptions，我们会怎样来写这篇文章，怎样来展示里面的工作。通过这样的方法，我们自然会对文章中的 assumptions 有着更深的了解，也自然地会去 challenge 它们。当我们自行 virtual re-implementing 之后，再与文章进行比对，查看一致与不一致的地方&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At the end of this pass, you should be able to reconstruct the entire structure of the paper from memory, as well as be able to identify its strong and weak points&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;如何综述--survey&#34;&gt;如何综述 / survey&lt;/h2&gt;
&lt;p&gt;当我们想要了解某个领域某个小的方向时，如果能够搜到 survey 自然是最好的，但有时找不到，可以通过从相关文章中的 related works 里面去找。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%A7%91%E7%A0%94/">科研</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/reading/">reading</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%A7%91%E7%A0%94/">科研</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>生活记录杂谈</title>
                <link>https://scottyeung.top/2020/record-of-life/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/record-of-life/</guid>
                <pubDate>Sun, 30 Aug 2020 23:31:25 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;到达南京之后，基本上每个晚上都是比较早地就回到酒店，洗澡之后就瘫坐在床上看手机，看视频，很颓废，也很无趣，有一种在消磨时间，等待下一天到来的感觉，像是在浪费自己的人生。&lt;/p&gt;
&lt;p&gt;大概是在上了大学之后，我开始变得可以接受无意义地度过某段时间，等待这一段过程的结束。以前的我明明是一个很害怕无聊的人，让我去亲戚家一个下午，即使有电脑可看，有游戏可玩，也有亲友的陪伴，我还是接受不能，感觉在浪费时间，浪费一个美好的假期。现在的我，即使是在乘坐高铁时提早了两个多小时，我也能够安然等待，在完成每周的组会报告之后，也能够心安理得地颓废一两天，美其名曰给自己放一个假。这些都是以前的自己不敢想象的。&lt;/p&gt;
&lt;p&gt;刚刚手机刷到一个同学的同学的个人公众号推送，记录她的每周日常生活，很有意思，并不是说她的日常生活有多么精彩，多么的有意思，主要感觉是她很会抓住这种生活中的一个个有意思/有趣味的瞬间，配上简单的配图与文字，就已经让人有一种身临其境的重现。真的让人有一种是在生活的感觉。&lt;/p&gt;
&lt;p&gt;反观我自己，如果问我近来过得怎么样，都在干些什么，我多半说不出些什么，只能简单地回一个还好，没啥，让我觉得自己仿佛在浑浑噩噩地过日子。我不禁反思，到底是我日子没有过好，还是我没有记录好生活中的各种美好，值得记录回忆的事情。大概率两者都有，而这两个方向都需要我继续努力，尝试找寻更多的生活乐趣。&lt;/p&gt;
&lt;p&gt;原本只是因为看到了别人的推送，想简单地记录下这几天的状况，但刚开了个头，思绪就被拉回到对于过去无趣生活的愧疚，于是又写了点看似很有道理的反思文字。&lt;/p&gt;
&lt;p&gt;希望能够改进现状。&lt;/p&gt;
&lt;p&gt;希望希望能够实现。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%94%9F%E6%B4%BB/">生活</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/">个人随笔</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>C# 爽点记录-1</title>
                <link>https://scottyeung.top/2020/csharp-merit-1/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/csharp-merit-1/</guid>
                <pubDate>Thu, 30 Jul 2020 11:11:06 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;昨晚无意间想到 Leetcode 刷道题，因为太久没刷就随便挑了道 Easy 的题来玩玩，顺便用用 C#。在这个过程中试了试 C# 中的 Linq 特性，果然好用到爆。&lt;/p&gt;
&lt;p&gt;使用的场景为，需要对数组里面的不同元素分别进行计数，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;bat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;rat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;dog&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;rat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CountEle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// should return
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   &amp;#34;cat&amp;#34;: 3,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   &amp;#34;bat&amp;#34;: 1,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   &amp;#34;rat&amp;#34;: 2,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   &amp;#34;dog&amp;#34;: 1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;最为常规的方法当然就是遍历计数了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;n&#34;&gt;Dictionary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CountEle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Dictionary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ContainsKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]++;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样的方法简单直接，但是我对于在遍历时里面还要对于是否包含元素进行一次判断，要多写一个判断，多写一个语句感到不爽，就想着搜搜有没改进的办法，像是在 Python 里面，就可以通过 setdefault 或者 get 方法来避免键值还不存在的情况。&lt;/p&gt;
&lt;p&gt;然后发现了 Linq 的方法，起飞。Linq 的方法思路大概就是将可遍历的元素用 Sql 的方法来处理，还是挺爽挺直观的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;n&#34;&gt;Dictionary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CountEle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;groups&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GroupBy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Word&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Count&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;groups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToDictionary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;最后送上一个 Python 版本更加 tricky 的方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;CountEle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Linq/">Linq</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Python/">Python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Coding-%E8%AE%B0%E5%BD%95/">Coding 记录</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>稳定性与新特性</title>
                <link>https://scottyeung.top/2020/stability-and-features/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/stability-and-features/</guid>
                <pubDate>Sun, 19 Jul 2020 10:39:31 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;对于一个软件来说，版本迭代的更新是必不可少的，可能是功能添加，可能是内容修改，可能是体验优化，也可能是问题的修复。为此，各家软件厂商对于自家产品的更新推广可谓是费尽心力，尤其是手机上的 App，隔三岔五就推个要软件升级的通知给你，不可谓不努力。尽管如此，还是有不少人会选择不升级，要不是当前版本的软件不能用了，绝不升级，包括以前的我也是如此。尤其是某些软件的升级，一直被人吐槽，最为著名的就是 Win10 的更新了，就我所知道的，不少人装完系统后第一时间就是直接禁掉自动更新。&lt;/p&gt;
&lt;p&gt;以前的我，一直都不喜欢更新软件，无论是手机还是电脑。新手机拿到，第一时间就是关闭应用商店里面的自动更新，即使更新提示里面的数字到达了 99+，也完全不为所动，除非是当前版本的软件不能用了，或者是新出的版本出了一些大家都在用的现象级的新特性，我才会跟上。当时的我对于更新的印象，还是非常刻板的，觉得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更新会占硬盘 / 存储空间&lt;/li&gt;
&lt;li&gt;更新后更吃性能导致卡顿&lt;/li&gt;
&lt;li&gt;更新带来的新特性新功能没有多大的用途&lt;/li&gt;
&lt;li&gt;更新带来的新交互方式设计让自己不习惯&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然现在回想起来，其实这些印象还是挺可笑的，前两条现象确实存在，不过最主要还是局限于当时的手机硬件配置以及软件设计实现上面，而后两者其实还是为前面所找的理由，没有多大用途 != 没有用途，而新的交互方式设计，不深入体验过也难以获得最为真实的体验，习惯之后，可能会觉得更好。现在手机的配置上来了，我会隔一段时间就自觉地打开应用商店，批量选取软件进行更新，以往觉得会不习惯，没什么用的新特性，现在往往是我所寻找的新体验。包括电脑也是，准时更新系统以及各种软件，想要获取最好最新的体验。甚至我还想着加入 Windows Insider，想着提前试用新特性，获取新体验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://scottyeung.top/posts/200719.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;center style=&#34;font-size:14px;color:#C0C0C0;text-decoration:underline&#34;&gt;尽管加入了 Windows Insider，但是设备不支持也升级不了（好像有特定设备的 bug &lt;/center&gt; 
&lt;p&gt;新特性新体验很美好，但随之而来的，还有各种各样的小问题。新的版本没有经过足够多的使用和测试，很可能就有一些莫名其妙的小问题，稳定性不够好。这也是预料之中，早早体验新版本新功能，本身也是当作一个 beta 版来测试，但是某些时候，我们真的能够接受这些稳定性不足带来的问题吗？或者说，能够接受用多少的稳定性来换取新特性呢？&lt;/p&gt;
&lt;p&gt;新的 Windows 2004，带来了新的开始界面 UI，WSL2 以及其它的新特性，对我来说虽说不是刚需，但还是挺想体验一下的，官方通知在 5 月底的时候正式推送，但是因为设备兼容的原因，直到 7 月中还没有收到升级通知。于是就萌生出加 Windows Insider 的想法，想着加入预览版本应该能够收到升级通知，能够自动升级，当然结果就如上图，最终没有成功，我也干脆就关了 Windows Insider。&lt;/p&gt;
&lt;p&gt;没能成功更新的原因似乎是&lt;a href=&#34;https://support.microsoft.com/zh-cn/help/4568129/issue-with-some-storage-spaces-configurations-after-updating-to-window&#34;&gt;磁盘管理相关问题&lt;/a&gt;，某些设备上面分区可能会被错误识别，可能会导致数据丢失，暂时还没好的解决方法。这个 issue 是 7 月份才提出来的，之后才禁止相关的设备更新。换而言之，如果早点加入了预览版本，在该 issue 提出之前升级到了对应版本，可能我的设备就遇上了这个问题，我的数据也可能会丢失。作为当前的主力机，出问题丢数据几乎是不能接受的事情，即使有 OneDrive 做了一些最基础的备份。&lt;/p&gt;
&lt;p&gt;想到此内心其实是有一些后怕，也是因为这个问题，我才开始对于稳定性与新特性的权衡有了一点不一样的理解。新特性固然是好，但也仅仅是好，不是必须要的，而为了追求这些可以没有的新特性而把稳定性破坏了，搞出问题影响到基本的使用，就非常难受了，尤其是当前基本所有的工作都在我的唯一主力机上进行，它出了问题就等于我出问题了 😢&lt;/p&gt;
&lt;p&gt;所以还是稳一点好，电脑关掉了预览版重新等待漫长的更新推送，手机上 MIUI 的开发版也回刷回去稳定版了，而软件上面的更新还是会及时去更新升级，毕竟软件挂了出问题可以删了重来，系统出问题可能就直接把数据都搞挂了（尤其是之前我还为了囤空间把分区只剩下一个 C 盘了）。&lt;/p&gt;
&lt;p&gt;仅以此文来对自己做一个提醒，以后要时刻考虑稳定性的问题。&lt;del&gt;本文开始时间太久了很多想法都不清楚了😂&lt;/del&gt;&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Windows/">Windows</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E8%BD%AF%E4%BB%B6/">软件</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/">个人随笔</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>不同系统环境下的换行符</title>
                <link>https://scottyeung.top/2020/%E4%B8%8D%E5%90%8C%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E6%8D%A2%E8%A1%8C%E7%AC%A6/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/%E4%B8%8D%E5%90%8C%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E6%8D%A2%E8%A1%8C%E7%AC%A6/</guid>
                <pubDate>Thu, 18 Jun 2020 16:11:46 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;这两天连续遇到了两个因为在不同操作系统中换行符不同所带来的问题，导致花费了一定的时间和精力。虽然之前就一直知道不同操作系统使用的换行符不一样，但是当实际遇上这些差异带来的问题时，才会发现学习的必要性。&lt;/p&gt;
&lt;h2 id=&#34;换行符&#34;&gt;换行符&lt;/h2&gt;
&lt;p&gt;一般会使用转义字符作为换行字符，包括 &lt;code&gt;\n \r \r\n&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在不同的操作系统的文件系统中，会使用不同的字符作为换行符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux：&lt;code&gt;\n&lt;/code&gt; LF(Line Feed)&lt;/li&gt;
&lt;li&gt;Mac OS：&lt;code&gt;\r&lt;/code&gt; CR(carriage return)&lt;/li&gt;
&lt;li&gt;Windows: &lt;code&gt;\r\n&lt;/code&gt; CR/LF&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然这些对于换行符识别的差异主要还是出现文件系统对于文件的识别当中，实际的 coding 过程中一般都还是全部使用 &lt;code&gt;\n&lt;/code&gt; 作为字符串当中的换行符。&lt;/p&gt;
&lt;h2 id=&#34;踩坑&#34;&gt;踩坑&lt;/h2&gt;
&lt;p&gt;记录一下因为换行符不同所踩的坑。&lt;/p&gt;
&lt;h3 id=&#34;javascript-油猴脚本解析&#34;&gt;JavaScript 油猴脚本解析&lt;/h3&gt;
&lt;p&gt;因为比较经常使用 Google Translate 翻译所看的文档，有挺多的复制待翻译内容到网页端上进行翻译的使用场景，但是 PDF 文档复制时会被换行符也一并复制，所以粘贴的时候原本成句的内容会被分成几段，当作几句话来处理，内容很可能不正确，需要手动删除。一两次还好，次数多了就很麻烦，于是写了一个油猴脚本，捕获 Google Translate 中的粘贴内容，把想要粘贴的内容去除换行符。&lt;/p&gt;
&lt;p&gt;想法很简单，就在输入框元素中监听 paste 事件，当出现 paste 事件时，获取粘贴的内容，阻断粘贴的操作，并把输入框的值改为去除换行符后的粘贴内容。&lt;/p&gt;
&lt;p&gt;第一次尝试没有效果，就在代码里面添加一些 log，来进行 debug，从控制台的输出看到脚本是可以捕获到要粘贴的内容，然后去除换行符后的输出内容也是正常的，但是这个去除换行符后的内容重新复制并粘贴到控制台输入时，却仍然会有换行现象。如果是在控制台中获取元素，用同样的语句移除换行符的话，功能也是正常的。&lt;/p&gt;
&lt;p&gt;最终发现问题就在换行符上面，我从 pdf 中复制的文字中，换行符为 &lt;code&gt;\r\n&lt;/code&gt;，而我去除换行符的操作为 &lt;code&gt;replace(&#39;\n&#39;,&#39; &#39;)&lt;/code&gt;。当我去除了 &lt;code&gt;\n&lt;/code&gt; 之后，网页端的解析还是当有换行符，在控制台的输入上面也还是有换行的作用，最终把去除换行符的语句改为 &lt;code&gt;replace(/(\r\n|\r|\n)/g, &#39; &#39;)&lt;/code&gt;，套了个正则匹配所有类型的换行符，问题解决。&lt;/p&gt;
&lt;h3 id=&#34;cmakelist&#34;&gt;CMakeList&lt;/h3&gt;
&lt;p&gt;打算使用 LLVM 在 GitHub 中的代码仓库拉下来的源代码进行构建，在使用 CMake 的时候出现问题，提示问题在 &lt;code&gt;cmake/config.guess&lt;/code&gt; 文件中，但是又完全没有说是什么问题，而且它提示的行号基本全是空行。搜了一下，发现这个问题出现得还挺多，不过别人的提示信息更多，提示是字符 &lt;code&gt;\r&lt;/code&gt; 出问题，说的大概就是换行符不一致，给的方法是将文件的换行符转成 unix 的换行符即可。&lt;/p&gt;
&lt;p&gt;下了一个工具 &lt;code&gt;dos2unix&lt;/code&gt; 可以直接将文本文件的换行符转成 unix下的换行符，转换之后，cmake 就可正常运行，生成构建文件了。（尽管直到现在过了我都还没有成功 build 好 llvm 及其配套工具。）&lt;/p&gt;
&lt;h3 id=&#34;git&#34;&gt;Git&lt;/h3&gt;
&lt;p&gt;这个是之前遇到的问题了，在 Windows 系统下通过 Git 提交的文件，在使用 WSL 打开时，会提示每一个文件都有修改。在本地中同样的 repo，同样的历史记录，当前状态显示不一样。&lt;/p&gt;
&lt;p&gt;这个可以通过设置 &lt;code&gt;core.autocrlf&lt;/code&gt; 来解决，打开了这个选项之后，在提交时会把所有的 CR/LF 换行符转成 LF 换行符，在 checkout 代码时又会把文件中的 LF 换行符转成 CR/LF。本质就是统一在提交记录里使用 LF 作为换行符。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Windows/">Windows</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Linux/">Linux</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>用于外链的资源库构建</title>
                <link>https://scottyeung.top/2020/%E7%94%A8%E4%BA%8E%E5%A4%96%E9%93%BE%E7%9A%84%E8%B5%84%E6%BA%90%E5%BA%93%E6%9E%84%E5%BB%BA/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/%E7%94%A8%E4%BA%8E%E5%A4%96%E9%93%BE%E7%9A%84%E8%B5%84%E6%BA%90%E5%BA%93%E6%9E%84%E5%BB%BA/</guid>
                <pubDate>Sat, 30 May 2020 22:37:11 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;blockquote&gt;
&lt;p&gt;考虑到可访问性和访问速度，最终还是选择部署在 Gitee Pages 上面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;在升级本博客的 hexo 和主题之前，是曾经搞过一个用 Aplayer 实现的外链播放器的，但因为当时播放过程会被在博客中的页面跳转而刷新页面，导致播放被打断而暂停，体验较差，所以在升级主题版本之后一直没有添加回来。在之后的某次逛 Github 的时候，偶然发现 PJAX 可以实现博客内页面跳转使用 AJAX 不刷新页面。于是又再次把 Aplayer 添加回来。&lt;/p&gt;
&lt;p&gt;有了播放器，最重要的还是要有音乐，有歌曲。原本想着简单地从网上那些外链播放搜索网站，搜索抓取从各大音乐平台的外链，确实能找到，当时也能用，不过好像一般都会有有效期，过了一天就不能用了。为此，参考别人在 GitHub 开启 Repo 作为图床的想法，我也打算在 GitHub 开个 Repo 来存放图片或音频资源，提供外链。&lt;/p&gt;
&lt;h2 id=&#34;methods&#34;&gt;Methods&lt;/h2&gt;
&lt;h3 id=&#34;gtihub-repo&#34;&gt;GtiHub Repo&lt;/h3&gt;
&lt;p&gt;想法比较简单，在 GitHub 上面开一个公共的 Repo，通过其单个文件下载的链接作为外链使用。&lt;/p&gt;
&lt;p&gt;以创建的 &lt;a href=&#34;https://github.com/yeung66/resources&#34;&gt;yeung66/resources&lt;/a&gt; 仓库为例，我在 music 文件下面的音乐文件，其下载链接为 &lt;code&gt;https://raw.githubusercontent.com/yeung66/resources/master/music/恋爱为何物.mp3&lt;/code&gt;，其映射关系还是很直接很简单的。当场生成放到博客测试一下，也能够正常使用，没有什么问题。&lt;/p&gt;
&lt;p&gt;然而过了一会儿我在手机上访问时，就发现播放器出现异常，歌曲无法正常播放，在手机上直接访问了一下音乐的外链，无法访问。上网一看才发现，&lt;strong&gt;域名 &lt;code&gt;raw.githubusercontent.com&lt;/code&gt; 被 DNS 污染了&lt;/strong&gt;，没有梯子的话不能正常访问，而我在电脑上一直挂着梯子，而且这个网址也在我的 PAC 上面（好像还是我手动添加的），而手机非需要使用时都不会开代理工具。考虑到我的多数访客并不会挂着梯子进来，只能放弃这个方法。&lt;/p&gt;
&lt;h3 id=&#34;gitee-repo&#34;&gt;Gitee Repo&lt;/h3&gt;
&lt;p&gt;既然 GitHub 的资源域名被墙了，那就考虑使用国内的替代品 Gitee 码云。思路也还是一样的，来一个公共 Repo，通过文件的下载链接作为外链使用，大概映射关系为 music 文件夹下的 a.mp3 的下载链接为 &lt;code&gt;https://gitee.com/yeungyeah/resources/raw/master/music/a.mp3&lt;/code&gt;。放到博客的播放器中可用，似乎没有问题。&lt;/p&gt;
&lt;p&gt;然而今天手机打开测试又再次播放失败了，在电脑上换了电脑测试访问，发现原因居然是&lt;strong&gt;访问的资源大小超过 1M 时需要登录&lt;/strong&gt;，所以使用外链播放时，如果没有登录过的话，会不断重定向到登录链接，然后就一直失败，真的小气。（我专门到 GitHub 上面试了一下，不需要登录也可）。之前我在上去创建仓库的时候，登陆过，所以测试时一起正常。&lt;/p&gt;
&lt;h3 id=&#34;github--coding-pages&#34;&gt;GitHub / Coding Pages&lt;/h3&gt;
&lt;p&gt;突发奇想，虽然 GitHub 中 Repo 的文件直接下载链接被 DNS 污染了，但是它提供的 GitHub Pages 是可以正常访问的，而其中的静态文件也是能够直接访问的，那干脆就直接将他们当成 Pages 发布，这样就可以直接使用了，音乐文件甚至能够直接链接打开播放（直接通过 Github Repo 的文件下载链接是可以下载但是不能在线播放的）。在 GitHub 开启了 Pages 测试一下，能访问，但速度实在感人，播一秒卡两秒。&lt;/p&gt;
&lt;p&gt;然后想到了现在博客正在托管的 Coding.net 平台（自换域名之后我将所有的解析到解到这里了，国内访问速度满分，但好像 Google AdSense 访问不到了），打开速度非常满意。
&lt;del&gt;于是，我将我的资源 Repo 传到了 Coding.net 平台，开启 Pages 服务，提供资源外链使用。这两者还可以绑定域名，我就顺手绑了个二级域名，爽得直接起飞。&lt;/del&gt; Coding 这个垃圾平台总是反复纵跳，相关的规则变来变去，现在又重新搭上了腾讯云，直接把之前所有部署的 Pages 给停了，而且没给任何的提醒。现在在 Coding 里面使用 Pages，需要使用腾讯云的 Severless 服务实现，而且还是给代金券的方式吸引你过去，之后估计还要收费，有点被恶心到了，果断弃用。&lt;/p&gt;
&lt;h3 id=&#34;gitee-pages&#34;&gt;Gitee Pages&lt;/h3&gt;
&lt;p&gt;在 Coding Pages 挂了之后，只能重新回到 Gitee Pages 的怀抱，虽然 Gitee Pages 免费版不能自行绑定域名，但是它的访问速度和上传速度还是很香的。唯一的麻烦点是，免费版的 Gitee Pages 居然不能够自动更新 Pages 页面，每次 push 之后都需要上网页去手动点更新按钮，比较蠢。&lt;/p&gt;
&lt;p&gt;然后找了一些自动化的方法，主要原理还是通过模拟登录 Gitee 来发送更新请求。一开始找了个用 puppeteer 的 js 脚本，直接是搞了个模拟浏览器登录之后发送模拟点击事件，但这个 package 怎么都下不完（需要下一个 chromium 的驱动，走镜像或者走代理都很慢）。然后又找了个使用 Github Actions 的&lt;a href=&#34;https://github.com/yanglbme/gitee-pages-action&#34;&gt;方法&lt;/a&gt;，先提交到 Github repo，然后触发 action 在 Gitee 里把原 repo 拉过去，在更新 Pages。昨晚搞了一会儿，把 mirror 的部分用在本地 push 两个 remote 替代了，算是能够实现功能了。但是每次 push 到两个 remote 端，感觉有点浪费，尤其是上传到 Github 的速度属实不给力，走代理也不过百来 kb 每秒。&lt;/p&gt;
&lt;p&gt;然后今天早上起来，突然醒悟过来，为啥要用 Github Actions 呢？我直接把他执行的脚本拿到本地，然后在部署的时候在 powershell 脚本里面调用一下不是更方便吗？这样就避免了向 Github 进行无谓的 push，而且账号密码还能存在本地，不需要传到 Github 的secrets 里面。最终的&lt;a href=&#34;https://gitee.com/yeungyeah/resources/blob/master/scripts/gitee-pages.py&#34;&gt;脚本&lt;/a&gt;读一个本地的 json 来获取数据，进行自动的更新 Gitee Pages。这样还避免了 Github Actions 登陆地为美国的异地登录的问题（当然我在本地跑的脚本也提示异地登录）。&lt;/p&gt;
&lt;p&gt;暂时体验完美。（2020.10.18）&lt;/p&gt;
&lt;h2 id=&#34;thinking&#34;&gt;Thinking&lt;/h2&gt;
&lt;p&gt;自说自话一下。&lt;/p&gt;
&lt;p&gt;其实感觉原本是个很简单的问题，但断断续续搞了差不多三四个晚上应该有，最主要的原因还是考虑得不够细致，测试得不够细致，导致总有些问题没有考虑到，疏忽了。过个一天才发现问题，才重新找原因，想解决方法。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%8D%9A%E5%AE%A2/">博客</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>vim 常用命令记录</title>
                <link>https://scottyeung.top/2020/vim-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/vim-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</guid>
                <pubDate>Wed, 06 May 2020 23:26:53 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;开始学习想学很久（或者说是说了很久要学的）的 vim 文本编辑器。虽然说接触了很久，好像从大一开始接触 Linux 系统就不得不与其打交道，但是对于其了解程度一直都处在 &amp;quot;存活期&amp;quot;。所以终于想要进一步学习，进入感觉良好期，甚至是更快更好更强的阶段。于是记录一下一些有用的命令，顺便练一下手，没错本篇博客就是用 vim 写的（完全就是瞎折腾，还发现了不少我觉得是 bug 的问题）。&lt;/p&gt;
&lt;h2 id=&#34;学习阶段&#34;&gt;学习阶段&lt;/h2&gt;
&lt;h3 id=&#34;能用&#34;&gt;能用&lt;/h3&gt;
&lt;p&gt;所谓的存活期，就是能用，知道怎么编辑，怎么保存。（&lt;del&gt;好像这种地步就已经领先一大批人了，当然我也停滞在这里很久了&lt;/del&gt;) 基本上我们只要知道，怎样编辑，怎样保存，就可以用它来作为能用的文本编辑器了。包括下面的内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模式
&lt;ul&gt;
&lt;li&gt;Normal 模式：用于执行命令或者跳转。文件需要在该模式进行保存。&lt;/li&gt;
&lt;li&gt;Insert 模式：进行文本输入。按 i 进入，按 Esc 退出到 Normal 模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;命令
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt;: 在 Normal 模式下进行 Insert 模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;：在 Normal 模式删除光标所在字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:wq&lt;/code&gt;: 保存退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dd&lt;/code&gt;: 删除当前行，并将内容保存到剪贴板&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;：将剪贴板内容粘贴出来&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hjkl&lt;/code&gt;：在 Normal 模式下左下上右 d 移动光标（也可以使用方向键）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;好用&#34;&gt;好用&lt;/h3&gt;
&lt;p&gt;能用之后就可以通过学习一下好用且常用的快捷键来提高使用快感和效率。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入模式
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; : 光标后插入字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt; ：光标下一行插入空行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;O&lt;/code&gt; ：光标上一行插入空行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cw&lt;/code&gt; ：光标后至行末的字符被替换成空白&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;光标跳转
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; ：行首&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt; ：行首第一个非空字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; ：行末&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g_&lt;/code&gt;：行末第一个非空字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/pattern&lt;/code&gt; ：搜索 pattern，支持正则表达式，n 可以到下一个&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nG&lt;/code&gt; ：跳转到第 n 行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code&gt; ：跳转到最后一行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yy&lt;/code&gt; ：复制当前行内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u&lt;/code&gt; ：撤回操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + b / ctrl + f&lt;/code&gt;: 上一页/下一页&lt;/li&gt;
&lt;li&gt;复制粘贴多行
&lt;ul&gt;
&lt;li&gt;将光标移动到要复制的文本开始的地方，按 v 进入可视模式&lt;/li&gt;
&lt;li&gt;将光标移动到要复制的文本的结束的地方，按 y 复制。 此时 vim 会自动将光标定位到选中文本的开始的地方，并退出可视模式。&lt;/li&gt;
&lt;li&gt;移动光标到文本结束的地方，按 p 粘贴。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;暂时先稳固在这一个阶段，基本都够熟悉很久了。&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;p&gt;在 Windows 上面的配置文件位于 $HOME_vimrc&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置行号： &lt;code&gt;set number&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;vim-plug：vim 的插件管理系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;enable and append configs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;syntax on
set background=dark
filetype plugin indent on

set showmatch          &amp;quot; Show matching brackets.
set ignorecase         &amp;quot; Do case insensitive matching
set smartcase          &amp;quot; Do smart case matching
set incsearch          &amp;quot; Incremental search
set hidden             &amp;quot; Hide buffers when they are abandoned

set number &amp;quot; 显示行号
set cursorline &amp;quot; 突出显示当前行
set tabstop=4

set smartindent &amp;quot; 开启新行时使用智能自动缩进
set backspace=indent,eol,start &amp;quot; 不设定在插入状态无法用退格键和 Delete 键删除回车符
set cmdheight=1 &amp;quot; 设定命令行的行数为 1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;issues-on-powershell&#34;&gt;Issues on Powershell&lt;/h2&gt;
&lt;p&gt;在 Powershell 里面使用 vim 总是会有一些奇奇怪怪的问题。&lt;/p&gt;
&lt;h3 id=&#34;编辑&#34;&gt;编辑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;退格键（Backspace）和删除键（Delete）偶尔失灵。常见于删除换行符的时候，尤其是删除空行。空行还可以使用命令 &lt;code&gt;dd&lt;/code&gt; 来删除当前行。但是如果是删除之间两行的换行符使两行合并成一行时，就很尴尬。找到的解决方法是在配置文件中添加下面的退格设置，暂时问题不再出现。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;set nocp
set backspace=2
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;在中文输入的时候，键盘上的某些字符输入无效，需要切成英文输出才能输入。如符号、`，中文的引号和双引号。暂时还不知道怎么解决，使用英文符号凑合一下 😂&lt;/li&gt;
&lt;li&gt;中文输入的时候莫名会多打一些字母出来。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;git-的提交问题&#34;&gt;Git 的提交问题&lt;/h3&gt;
&lt;p&gt;因为是 Windows 系统，我使用的是 Git on Bash, 它是内置了一个 MINGW 的类 Unix 终端，里面也自带了 vim。当我们设置 Git 的提交编辑器为 vim 时，它会默认打开内部自带的 vim，而不是在 Windows 系统安装的 vim。本来这也没什么，但是它似乎是还扫描到了我在 Windows 系统上面的 vim 的配置文件，这就出问题了。我在 Windows 上面的 vim 安装了 vim-plug 插件管理，安装方式是直接下载配置脚本到目录下的 autoload 目录中，而 Git Bash 自带的 vim 没有这个文件，自然无法识别配置文件中的插件配置项，导致每次调用都会出错。大概的提示就是说载入配置文件的时候在插件配置那里出错了。&lt;/p&gt;
&lt;p&gt;问题其实可以转化为：如何将 Git Bash 里面使用的 vim 换成本地 Windows 系统上面的 vim。搜索看了很多网页，看到的方法基本都不可行，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置 alias 让 vim 指向 Windows 系统的 vim &lt;code&gt;alias vim &amp;quot;/c/Program\ Files \(x86\)/vim/vim82/vim.exe&amp;quot;&lt;/code&gt; （这里路径的空格和括号都需要转义）。这样在 Git Bash 命令行调用 vim 确实调用到了 Win 上面的 vim，但 git commit 还是调用回自身的 vim&lt;/li&gt;
&lt;li&gt;设置 git config 里面的编辑器选项。默认使用 vim 的话编辑器设置是直接设成了 vim，但有人说可以设成一个路径，指向想要指向的 vim 程序。尝试后连 vim 都打不开了，添加一些选项也无果。&lt;/li&gt;
&lt;li&gt;环境变量中设置 EDITOR 变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终我选择的方法是移除了 Git Bash 里面的 vim 程序（其所在路径为 &lt;code&gt;/usr/bin/vim.exe&lt;/code&gt;），然后添加一个软连接 &lt;code&gt;ln -s &#39;/path/to/your/vim&#39; /usr/bin/vim&lt;/code&gt;。因为在 Git Bash 里面调用的 vim 实际上是在调用 &lt;code&gt;/usr/bin/vim&lt;/code&gt; ，而这个路径时间上映射到了 Git 安装路径中的 &lt;code&gt;/usr/bin/vim.exe&lt;/code&gt; 。我通过移除原有的 vim 程序，建立新的软链接调用目标的 vim 程序，问题解决。在 Git Bash 中调用 vim 和在 git commit 开启编辑器都能成功开启 Windows 的 vim 程序而没有出错。但是有一个小问题，就是原生提供的 Git Bash 开启不了 vim，提示不是 Cygwin 能运行的版本，不过我现在都是在 Windows Terminal 上面使用，而 Windows Terminal 上面使用没有问题。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/vim/">vim</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/shell/">shell</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%B7%A5%E5%85%B7/">工具</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>WSL环境安装配置</title>
                <link>https://scottyeung.top/2020/WSL%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/WSL%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid>
                <pubDate>Mon, 04 May 2020 10:56:45 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;早在大三上系统级程序设计课程的时候，就通过老师的演示了解到 Windows 的新产品—— Windows Subsystem for Linux(WSL), 可以在 Windows 系统下运行 Linux 系统的程序或命令。不过当时我的旧电脑上装了 Ubuntu 的双系统，所以一直没有尝试。现在换了新电脑之后，一直没有装回 Linux 系统，一是怕麻烦不太想折腾，二是不太想划分硬盘空间。于是干脆就装一个 WSL 吧，尽管现在还没实际使用 Linux 系统的需要，不过就暂时当一个玩具吧。&lt;/p&gt;
&lt;h2 id=&#34;优点&#34;&gt;优点&lt;/h2&gt;
&lt;p&gt;WSL 还是挺爽的，还没用就感觉优点满满：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装简单。简直是傻瓜式的操作，就在系统设置中开启一下，在商店中搜索下载即可，跟在应用商店下个 app 差别不大，而且 Windows Store 的下载速度惊人，非常快就能装好。另外，也不需要考虑任何的驱动兼容问题，少了很多奇奇怪怪的问题。&lt;/li&gt;
&lt;li&gt;空间友好。我下的 Ubuntu 系统才 200+MB, 相比于普通的带 GUI 的 Linux 操作系统，可谓是不占空间一样。另外最关键的一点是，WSL 系统的所有文件都是放在系统盘中，不需要自己另行划分磁盘空间来放置系统。这个点我觉得太赞了，之前装 Linux 双系统最为麻烦的一点就是要专门划分空间，从原有的磁盘中分出空闲空间来专门服务于 Linux 系统，怎么分，分多少，都需要一番思考和设置。分得多吧又感觉浪费，分得少又会不够，到时加空间比较麻烦。&lt;/li&gt;
&lt;li&gt;协同方便。因为 WSL 系统在 Windows 当中，两系统当中的文件都能够轻易地传输使用。之前的话，Linux确实可以通过挂载的方式访问 Windows 的文件，但反过来却不行，而且操作还有&lt;a href=&#34;http://scottyeung.top/2018/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4NTFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%96%87%E4%BB%B6%E4%B8%A2%E5%A4%B1/&#34;&gt;风险&lt;/a&gt;。当时有访问跨系统文件的需要时，还需要专门重启一下切换系统，又或者通过网页微信传输文件到手机作为中转。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;安装还是挺简单的，只要本机的 Windows 版本支持 WSL功能即可。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开“启用或关闭 Windows 功能”，开启适用于 Linux 的 WIndows 子系统。这个可以通过在开始菜单搜索启用（qiyong）的拼音就出现了。&lt;img src=&#34;https://scottyeung.top/posts/image-20200504120230327.png&#34; alt=&#34;image-20200504120230327&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开 Microsoft Store，搜索 WSL 则可以看到支持的所有 Linux 版本。选择其中一个，获取安装即可。安装后可以在开始菜单找到并打开，会自动开启该系统下的 bash 命令行界面。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;p&gt;一个完美的开发运行系统，最关键的还是各种的软件或系统的配置，参考了网上的各种各样的文章，主要有下面的方面需要配置。我使用的是 Ubuntu 系统，不同的系统可能配置的具体方式会有出入。&lt;/p&gt;
&lt;h3 id=&#34;软件源更新&#34;&gt;软件源更新&lt;/h3&gt;
&lt;p&gt;Ubuntu 软件安装/更新源均在国外，下载速度感人，所以可以将所有软件源更换为国内的镜像。这里选择的是阿里云的源。首先将原来的源文件备份，然后更改源文件，将内容换成阿里云的源链接。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo cp /etc/apt/sources.list  /etc/apt/sources.list.bak
sudo vim /etc/apt/sources.list
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过 vim 修改源文件，将文件内容更改为下面内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse 
deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse 
deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse 
deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse 
deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse 
deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse 
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse 
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse 
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse 
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;保存后更新&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt update
sudo apt upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;nodejs&#34;&gt;Nodejs&lt;/h3&gt;
&lt;p&gt;安装方法可以参考&lt;a href=&#34;https://www.runoob.com/nodejs/nodejs-install-setup.html&#34;&gt;这里&lt;/a&gt;。Linux 上面有三个方法，一是直接下载编译后的包来使用，下载后建立链接；二是通过下载源代码来编译构建；三则是使用 apt-get 命令直接安装。我当然是选择了最简单的 apt-get 命令安装大法。两行命令搞定。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get install nodejs
sudo apt-get install npm
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;安装后可以通过查看版本号测试是否成功&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ node -v
v0.10.25

$ npm -v
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我的 node 的确成功安装并测试，但是 npm 却没有，输入命令时提示如下，似乎是命令调用错误，通过 which 命令查看时发现调用的是在 Windows 系统的 npm，着实奇怪。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ npm -v
: not foundjs//npm: 3: /mnt/d/nodejs//npm:
: not foundjs//npm: 5: /mnt/d/nodejs//npm:
/mnt/d/nodejs//npm: 6: /mnt/d/nodejs//npm: Syntax error: word unexpected &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;expecting &lt;span class=&#34;s2&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

$ which npm
/mnt/d/nodejs//npm
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;网上搜索了一下也很多人有类似的问题，GitHub 上面也很多人提了 issue，尝试无果，最终选择换了个方式重新安装，随后解决。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/WSL/issues/1512#issuecomment-303517504&#34;&gt;GitHub issue&lt;/a&gt; ：这里提到的方法主要是修改环境变量的顺序，确保先查找 WSL 安装的 npm 先被搜索到，尝试了一下没有用，which 命令测试也没有变化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;StackOverflow 上的&lt;a href=&#34;https://stackoverflow.com/questions/45853530/npm-install-error-not-foundram-files-nodejs-npm-3-mnt-c-program-files-nodejs&#34;&gt;重装大法&lt;/a&gt; ：将旧的移除后，用新建源的方法重新使用 apt-get 来安装。重新安装后测试成功&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get --purge remove nodejs

curl -sL https://deb.nodesource.com/setup_10.x &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo -E bash -
sudo apt-get install -y nodejs
sudo apt-get install -y build-essential
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;zsh-and-oh-my-zsh&#34;&gt;zsh and oh-my-zsh&lt;/h3&gt;
&lt;p&gt;之前各种的 Linux 系统，无论是服务器还是桌面系统，都是使用自带的 bash，但是大家都说别的 shell 终端更好，于是就干脆试试大家都在推荐的 zsh。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以通过命令&lt;code&gt;cat /etc/shells&lt;/code&gt;查看本机是否有 zsh，有的话可以直接跳到 3&lt;/li&gt;
&lt;li&gt;如果没有的话，使用 apt-get 安装即可 &lt;code&gt;sudo apt-get install zsh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chsh -s /usr/bin/zsh&lt;/code&gt; 通过命令切换到 zsh，重启终端即可&lt;/li&gt;
&lt;li&gt;初次进入 zsh 会提示你需要进行配置文件的创建与配置，我们这里使用 oh-my-zsh 来提供配置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;获取 oh-my-zsh 的方法则比较简单，通过 curl 或者 wget 的方式获取 shell 脚本后执行即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# or&lt;/span&gt;

sh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;但这里我怎么也搞不下来，两种方式都不能建立链接，获取不到这个脚本，自然无法进行后续的安装处理。原因似乎是国内的网络环境因为你懂的原因无法访问这个网址 ，估计走代理的话应该可以解决。所以我采用的方法是在 WIndows 系统下好这个 shell 脚本，然后在 WSL 里面运行，问题解决。之后就可以通过在配置文件 &lt;code&gt;~/.zshrc&lt;/code&gt;里面设置主题里，可选的主题及效果可以&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/wiki/Themes&#34;&gt;点此选择&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我选的是 ys，这里要吐槽一句，不知道为什么网上看到的预览图片，跟我实际使用的效果相差太大了，有些甚至对使用造成了影响，例如主题 agnoster ，显示的实际颜色与下面的样例图出入太大了，在 WSL 里面打开就是目录显示的是深蓝色，深到看不清楚里面的字那种，尽管我挺喜欢这种风格的，但因为影响到实际使用了，只能放弃。&lt;/p&gt;
&lt;p&gt;官方网站以及大多数经验分享文章中的 agnoster 主题效果 &lt;img src=&#34;https://cloud.githubusercontent.com/assets/2618447/6316862/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这是我用主题 agnoster 的效果图。&lt;img src=&#34;https://scottyeung.top/posts/image-20200504173113601.png&#34; alt=&#34;image-20200504173113601&#34;&gt;&lt;/p&gt;
&lt;p&gt;这是我最终选择的主题 ys 的效果&lt;img src=&#34;https://scottyeung.top/posts/image-20200504173241135.png&#34; alt=&#34;image-20200504173241135&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;发现了为啥我的颜色跟网上看到的不一致，原来是需要设置额外的配色，将某些颜色映射为其它色号。我用的是 Windows Terminal，设置配色比较简单，只要在配置文件的 &lt;code&gt;schemes&lt;/code&gt; 属性中添加配色主题，再在想要设置配色的终端设置 &lt;code&gt;color-scheme&lt;/code&gt; 即可。配色主题可以到这个 &lt;a href=&#34;https://github.com/mbadolato/iTerm2-Color-Schemes#windows-terminal-color-schemes&#34;&gt;GitHub repo&lt;/a&gt; 上面挑选。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;powershell&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;的设置项&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;guid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Windows PowerShell&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;commandline&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;powershell.exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;fontFace&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;Cascadia Code PL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;colorScheme&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;OneHalfDark&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;//选择的配色名称&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;//使用的配色主题,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;有些颜色觉得不太行就注释掉，也可以自行修改&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;OneHalfDark&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#282c34&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#e06c75&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#98c379&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;yellow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#e5c07b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#61afef&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;purple&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#c678dd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;cyan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#56b6c2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#dcdfe4&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;brightBlack&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#282c34&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;brightRed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#e06c75&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;brightGreen&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#98c379&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;brightYellow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#e5c07b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;brightBlue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#61afef&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;brightPurple&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#c678dd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;brightCyan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#56b6c2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;brightWhite&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#dcdfe4&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;background&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#282c34&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;#34;foreground&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#dcdfe4&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;oh-my-zsh插件&#34;&gt;oh-my-zsh插件&lt;/h4&gt;
&lt;p&gt;自带的插件只需要在配置文件中添加即可，我这里添加了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;z：路径自动推测跳转 &lt;code&gt;z dir&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;extract：解压所有类型文件 &lt;code&gt;x file&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;git：简化了 git 的常用命令&lt;/li&gt;
&lt;li&gt;npm：npm 命令的自动补全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;额外下载的插件则需要下载源代码到 &lt;code&gt;${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins&lt;/code&gt;目录下面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zsh-syntax-highlighting：自动语法高亮&lt;/li&gt;
&lt;li&gt;zsh-autosuggestions：自动补全建议&lt;/li&gt;
&lt;li&gt;git-open：打开 git remote&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;代理&#34;&gt;代理&lt;/h3&gt;
&lt;h4 id=&#34;simple&#34;&gt;Simple&lt;/h4&gt;
&lt;p&gt;因为我国的独特网络环境，在访问某些网站的时候速度比较感人，有些时候甚至还不能访问，因而需要一些比较科学的方法来访问互联网，这里设置的代理，本质还是让网络请求通过本机（Windows 系统）的工具进行网络请求。在 zsh 的配置脚本&lt;code&gt;~/.zshrc&lt;/code&gt;中添加下面别名即可，里面的端口和协议根据自己的工具具体设置。设置后添加别名 proxy 开启，通过 unproxy 关闭。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;proxy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;export http_proxy=socks5://127.0.0.1:1080; export https_proxy=socks5://127.0.0.1:1080&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;unproxy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;unset http_proxy; unset https_proxy&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;添加后通过&lt;code&gt;source  ~/.zshrc &lt;/code&gt;激活，输入 proxy 后即可打开某些不可访问的网站测试一下。&lt;/p&gt;
&lt;h4 id=&#34;zsh-proxy&#34;&gt;zsh-proxy&lt;/h4&gt;
&lt;p&gt;在实际使用中发现，上面这样的简单的方式在某些地方虽然可行，但是有些地方在实际使用上面却会有问题，例如我在使用 wget 获取网络资源时会提示 socks5 识别不了，说是 wget 并不支持 socks 协议。另外，一些需要频繁访问网络的命令，如 git，npm 等似乎有着自己独特的代理设置方式。没办法，一个 wget 就逼着不得不改变。搜了几个方法之后，最终选择了一个 zsh 插件&lt;a href=&#34;https://github.com/SukkaW/zsh-proxy&#34;&gt;zsh-proxy&lt;/a&gt;来实现代理功能。&lt;/p&gt;
&lt;p&gt;使用方法很简单&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将插件脚本 clone 到本地&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/sukkaw/zsh-proxy.git ~/.oh-my-zsh/custom/plugins/zsh-proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在配置文件&lt;code&gt;~/.zshrc&lt;/code&gt;的插件项中添加插件 zsh-proxy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;激活配置文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过命令&lt;code&gt;init_proxy&lt;/code&gt;进行初始化配置，按照提示输入自己的 http 代理和 socks5 代理即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置完成后通过命令操作即可&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;proxy: 开启&lt;/li&gt;
&lt;li&gt;noproxy: 关闭&lt;/li&gt;
&lt;li&gt;myip: 查看代理的 ip&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;走代理的速度还是挺爽的，我用 wget 下载 Miniconda，虽然才 80 多兆，但不走代理才 30-40Kb 每秒，开启代理每秒 3M 多，半分钟不到就下完。&lt;/p&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;
&lt;p&gt;以前的人都说，Python 在 Linux 环境不需要折腾这么多官方，而我在 Windows 下面进行 Python 项目的开发也确实或多或少地遇到一些小问题，尤其是 package 的安装和管理，使用 pip 的时候莫名其妙地就失败。不过这些问题在开始的时候折腾过后一般就不再发生，尤其是我使用 conda 进行包管理之后，基本很少发生。&lt;/p&gt;
&lt;p&gt;除了可能有奇奇怪怪的的错误之外，使用 Linux 系统开发的好处就是能够接近实际的部署生产环境。因为现在使用的服务器大多都是使用 Linux系统，在相似的环境下开发，部署起来更加方便。&lt;/p&gt;
&lt;p&gt;我也试过跑到 Linux 下面进行 Python 的软件开发，有着 Pycharm 的支持，开发效率也还不错。不过主要的问题是，非开发工具的效率和便利性确实不行。~~就像是简单地从别人那接收一个 QQ 发过来的文件，我需要从手机 QQ 中接收保存下来，再通过微信发送给在 Linux 系统中登录的网页微信。一两次都还好，经常这样的话简直灾难，尤其是某些应用的网页端 app 简直是残废。~~有些沟通交互实在麻烦，而且开发过程中的休息与娱乐也比较困难，使我难以坚持下来。&lt;/p&gt;
&lt;p&gt;WSL 似乎就能完美解决这个问题（当然确实云服务器也可以，但就我能负担的云服务器的硬件配置加网络，可能性能还不如虚拟机），双系统完美交互。确实可以考虑把一些 Python 项目的开发和运行丢到这里。&lt;/p&gt;
&lt;p&gt;说了一堆废话，下面看看安装。机器本身就自带 Python2 和 Python3，不过我现在比较偏向于使用 conda 作包管理和虚拟环境管理，就打算重新下一个 Anoconda。不过完整的 Anoconda 体积庞大，包含了很多不必要的科学计算库，这里选的是 Miniconda。安装也是傻瓜式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;获取安装脚本。建议开启代理，不然速度感人，又或者你在 WIndows 系统下好再在 WSL 里面执行也可以&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;赋予执行权限。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo chmod &lt;span class=&#34;m&#34;&gt;777&lt;/span&gt; Miniconda3-latest-Linux-x86_64.sh &lt;span class=&#34;c1&#34;&gt;# 直接全给权限了&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行安装脚本。安装过程中会出现若干的配置提示信息，包括安装路径等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./Miniconda3-latest-Linux-x86_64.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加环境变量。将&lt;code&gt;export PATH=/home/YOURNAME/miniconda3/bin/conda:$PATH&lt;/code&gt; 放到你的 bash 配置文件中。我放到了 zsh 的配置文件 &lt;code&gt;~/.zshrc&lt;/code&gt;中。添加后重新启动，或者激活配置文件即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;待填坑&#34;&gt;待填坑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;✅ Python。&lt;del&gt;Ubuntu18 自带了 Python2 和 Python3。我已经不再使用 Python2 了，而 Python2 把 Python和 pip 的命令默认调用都占用了，考虑移除 Python2，或者搞一个 Anoconda 来做环境管理。&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;❌ C/C++ 环境​。&lt;del&gt;想好好学习一下 C++，之前因为 Windows 环境的原因，不得不装了个巨占空间的 Visual Studio，然后到现在还没写过一行 C++ 代码。有点想把它删了，在这里搞个 LLVM/clang 编译器。&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;命令与快捷键&#34;&gt;命令与快捷键&lt;/h2&gt;
&lt;p&gt;记录一下一些较为常用和实用的命令和快捷键这里&lt;/p&gt;
&lt;h3 id=&#34;命令&#34;&gt;命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x file&lt;/code&gt;：解压任意类型文件（需要添加 extract 插件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;z dir&lt;/code&gt;：根据给出的目录进行跳转
&lt;ul&gt;
&lt;li&gt;不一定是完整的，可能只是最后一级&lt;/li&gt;
&lt;li&gt;效果感觉一般，感觉需要吃历史记录的，很多新目录访问都完成不了&lt;/li&gt;
&lt;li&gt;看了一些分析，说是要经过过往的 cd 跳转来获取经验的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快捷键&#34;&gt;快捷键&lt;/h3&gt;
&lt;p&gt;好像是仅适用于 zsh&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ctrl + u：清空当前行命令&lt;/li&gt;
&lt;li&gt;ctrl + a：跳到行首&lt;/li&gt;
&lt;li&gt;ctrl + e：跳到行尾&lt;/li&gt;
&lt;li&gt;ctrl + k：删除光标到行尾内容&lt;/li&gt;
&lt;/ul&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Windows/">Windows</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Ubuntu/">Ubuntu</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/WSL/">WSL</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/shell/">shell</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>突然不想再记录时间的使用</title>
                <link>https://scottyeung.top/2020/%E7%AA%81%E7%84%B6%E4%B8%8D%E6%83%B3%E5%86%8D%E8%AE%B0%E5%BD%95%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/%E7%AA%81%E7%84%B6%E4%B8%8D%E6%83%B3%E5%86%8D%E8%AE%B0%E5%BD%95%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
                <pubDate>Sun, 03 May 2020 11:55:30 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;一直以来，都有着记录自己日常时间的使用情况，可能是因为很喜欢回顾这些历史数据，回望过去的事情。通过简单的记录，已经留下了不少珍贵的记录数据。&lt;/p&gt;
&lt;p&gt;最早在高三的时候，我就会用一个小本子，在每天晚自习开始之前写上今晚想要完成的任务，开始时写上开始的时间，结束时打上一个勾并写上完成时间，通过这种简单的方式，来记录自己的学习时间分布和任务完成情况。&lt;/p&gt;
&lt;p&gt;上了大学之后，时间变得充足了许多，人也有时会悠闲起来，对于时间的使用就没那么敏感了，所以一度没有记录时间的使用情况，只是通过手机中的便签，来记录需要完成的任务以及它们的完成状况。在大一大二时，尚有着较多课程和活动的约束，很多需要完成的任务和事情，自然而然地就会被它们的 ddl 推动着，只要记下了某个任务，而该任务确实是需要完成的，自然会去完成。&lt;/p&gt;
&lt;p&gt;到了大三下学期，课变少了，空闲的时间更多了，人也懒散了下来，对于时间的把控似乎有点糟糕。主要原因是，当时没有一个具体而迫近的任务来推动自己。当时的打算是提早做好保研夏令营的准备，提前准备材料和复习专业课知识。然而这些任务普遍不够明确和具体，准备什么材料，复习什么内容，复习到什么程度，都很难把握。尤其是复习，有些专业课的内容比较多，时间跨度自然容易长，时间一长效率就低。为了更好地推动自己，我使用了 Forest 来进行时间记录。一方面是为了让自己学习或工作能够持续一定的时间不被中断，另一方面，则是为了记录自己在学习上的时间使用，通过每日学习时间的数据反馈来推动自己。&lt;/p&gt;
&lt;p&gt;在使用了 Forest 进行时间记录之后，就会发现，其实自己并没有多么的努力，看似学习了一天，非常充实，实际的学习时间却只有三四个小时。虽然说上午下午甚至晚上都有在学习，但实际情况却可能是，睡到九点多才起床，吃完早餐后要差不多十点多才能开始学习，学一个多小时就要结束，去吃午饭并午休。下午睡到两点多才醒，三点多才在图书馆找到位置开始学习，学个一个多小时就五点多，要去吃晚饭了。吃完晚饭回宿舍休息，状态好的话或许能够再战一小时，状态不好的话，就直接开始娱乐了。要注意到，这里说的学习一小时，并不是说你去学习，从坐下开始到结束起来离开的时间有一小时，而是真真切切的学习一个小时，中途的任何休息，包括打水去厕所看手机，都会中断而不计时。所以数据很真实：去了一个上午，两个多小时，实际学了可能 100 分钟不到。这样的时间管理确确实实地使我明白到自己其实并没有做多少事情，对于自身的能力有一个更加真实的判断，这样的反馈或多或少地推动了我更加努力地前进。&lt;/p&gt;
&lt;p&gt;除了让时间记录的数据推动自己以外，这样的记录还有的珍贵价值，就是可以让自己回顾过去的努力和付出。尽管有些时候工作的时间并不如自己的预期，但是还是有一些值得回味的记录的。例如在准备保研和实训的六月份，每天基本保持长达 300 分钟以上的高强度工作，还有在准备软工期末考试前夕的学习了 600 分钟的一天，都是珍贵的回忆。&lt;/p&gt;
&lt;p&gt;在 Forest 上面种了差不多一年的树，记录了 50000+ 的专注时间，真实的树苗也在上面种了一棵。说实话，这样的数据是很能给到人触动的，尤其是回过头来重温当时的某段努力的时光，看着图上树木繁多的森林，总能够给人一种自身努力过的痕迹。&lt;/p&gt;
&lt;p&gt;然而，在三月中的时候，可能是因为疫情原因导致时间上更加空闲的缘故，我似乎有更多的时间和精力来记录时间，收集更好看的数据，原有的 Forest 只有一个简单的类别标签，没有办法记录该段时间做了什么具体内容。另外，Forest 无法记录回过去忘记记录的时间，也是让我有点不满。刚好在某个推送上面看到了有时间管理工具的介绍，就转而使用 Toggl 进行时间记录。&lt;/p&gt;
&lt;p&gt;Toggl 的时间记录方式比较自由，也比较专业，毕竟 Forest 始终都是一个帮助人专注的工具，在单纯的时间记录上面，Toggl 远胜于 Forest。Toggl 可以使用计时模式，也可以手动输入时间数据，对于过往的数据，也能够很容易地就修改。另一方面，每一条时间记录，可以添加 Project 和若干个 tag，便于进行聚类统计分析。&lt;/p&gt;
&lt;p&gt;虽然工具很好，但是在用了一个来月之后，我却不想再用了。就在这两天，有一种不再想记录时间使用情况的想法。时间记录得太细，太过频繁，太过复杂，越令我萌生出一种很不耐烦，很功利的感觉。尤其是这几天在做的数据分类的工作，尽管我感觉只是在做无聊而重复的无意义的工作，但是，为了记录下时间的使用，让时间的使用显得更有价值，我还是记录了下来，美其名曰科研数据处理，甚至连几分钟的空闲间隙时间也不放过，一天能够记上差不多十条的记录。我觉得很没意思。&lt;/p&gt;
&lt;p&gt;另外，还有一件很可怕的事情是，这样子记录时间，有点助长自己对于时间利用的功利性，事事都想记录下来，证明自己是有做事情的，是没有浪费时间的。但我们的人生真的可能时时刻刻都被妥善利用在所谓的有意义的事情上面吗？可能有这样的人，但个性闲散的我并不是这样的人。因为发现记录下来的时间并不满足自己的预期，心里受到了落差与打击，时常都会出现自己不过如此的感觉。为了抵消这种错觉，我便变得将日常所做的所有事情的一一记录，甚至夸大了从事某些事情的时间，以营造出我很努力的感觉，来抵消自己的愧疚。事实上，这样只会让自己错误地判断自己的工作和学习状况，对所能完成的任务和事情的预期产生错误的判断，当某些目标完成得不如预期时，又或者某天的记录回归正常时，就会产生出自身能力在现实和设想的落差，进而导致不自信和愧疚。&lt;/p&gt;
&lt;p&gt;尽管如此，我还是忍受不了这种诱人的历史数据的引诱，在写这篇文章的时候，我都还是用回了 Forest 进行时间记录。不过为了进一步减少这样功利感，还是使用回这样的比较简单的工具好一点，起码这样我就不能够修改我的时间记录，而产生虚伪的结果。另外，对于一些小的碎片时间，也不应该太过执着于记录，毕竟&lt;strong&gt;时间的本质是为了我们的使用而服务，而不是为了被我们记录&lt;/strong&gt;。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E6%AF%8F%E6%97%A5%E5%8D%83%E5%AD%97/">每日千字</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/">时间管理</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>shell 脚本入门</title>
                <link>https://scottyeung.top/2020/shell-%E8%84%9A%E6%9C%AC%E5%85%A5%E9%97%A8/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/shell-%E8%84%9A%E6%9C%AC%E5%85%A5%E9%97%A8/</guid>
                <pubDate>Tue, 21 Apr 2020 21:17:55 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;shell 是一个用 C 编写的程序，既是一种命令语言，又是一种程序设计语言，常用于运行自动化执行 Unix/Linux 系统命令的脚本。在最近的数据收集等任务当中，发现其实对于脚本的使用其实有着较大的需求，之前我都是直接用 Python 写脚本来完成，效果也不错，但总感觉总有点杀鸡用牛刀的感觉，而且对于系统命令的执行也比较不方便。写过几个自动化提交代码的 shell 脚本，但还是不太熟悉，于是打算找个教程过一遍 shell 脚本编程，算是入门了。&lt;/p&gt;
&lt;h2 id=&#34;执行&#34;&gt;执行&lt;/h2&gt;
&lt;p&gt;创建 shell 脚本文件，以后缀 .sh 结尾，就可以&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接通过执行文件的方式执行脚本 &lt;code&gt;./script.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通过 sh 命令的方式 &lt;code&gt;sh script.sh&lt;/code&gt; 执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;变量&#34;&gt;变量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;shell 中的变量只有两种，分别为数字和字符串，数组。&lt;/li&gt;
&lt;li&gt;shell 变量命名由字母，数字，下划线组成&lt;/li&gt;
&lt;li&gt;通过反引号 ` 可以执行命令，将结果作为返回值赋予变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;操作&#34;&gt;操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;赋值
&lt;ul&gt;
&lt;li&gt;变量直接通过 = 号进行 &lt;code&gt;var=125&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通过语句赋值，如 for 循环语句 &lt;code&gt;for file in $(ls /etc)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;只读：通过设置 &lt;code&gt;readonly var&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除：&lt;code&gt;unset var&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用：通过在变量前使用 $ 则可&lt;/li&gt;
&lt;li&gt;字符串拼接：可以通过 字符串变量字符串 的方式进行拼接&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字符串&#34;&gt;字符串&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;单引号：不转义原样输出，变量也无效，可以通过成对出现来拼接&lt;/li&gt;
&lt;li&gt;双引号：可以有变量，可以有转义字符&lt;/li&gt;
&lt;li&gt;可以通过 &lt;code&gt;$#&lt;/code&gt; 获取长度&lt;/li&gt;
&lt;li&gt;可以通过 &lt;code&gt;${var:1:3}&lt;/code&gt; 的方式进行切片&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数组&#34;&gt;数组&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;由括号括住，元素通过空格分隔 &lt;code&gt;arr=(var1 var2 var3)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通过下标 [] 获取元素&lt;/li&gt;
&lt;li&gt;使用 @ 可以获取所有元素&lt;/li&gt;
&lt;li&gt;通过 # 可以获取数组的长度 &lt;code&gt;{{&amp;quot;${#arr[@]}&amp;quot;}}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;通用变量&#34;&gt;通用变量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;命令行参数
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$n&lt;/code&gt; 表示第n个参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$#&lt;/code&gt; 参数个数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$*&lt;/code&gt; 所有参数以单个字符串的方式返回&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$$&lt;/code&gt; 当前进程ID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$@&lt;/code&gt; 所有参数以字符串的方式逐个返回&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;运算符&#34;&gt;运算符&lt;/h2&gt;
&lt;p&gt;bash 原生并不支持数学运算，需要通过其它命令来实现，如 expr&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算术运算符
&lt;ul&gt;
&lt;li&gt;加减乘除取余赋值。乘法需要转义 *&lt;/li&gt;
&lt;li&gt;相等与不相等：比较数字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关系运算符
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-eq -ne -gt -lt -ge -le&lt;/code&gt;  等于 不等于 大于 小于 大于等于 小于等于&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;布尔运算符
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;! -o -a&lt;/code&gt; 取反 或 与&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;逻辑运算符
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp; ||&lt;/code&gt; 与 或&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符串运算符
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;= != -z -n $&lt;/code&gt; 等于 不等于 长度为0 长度不为0 是否空字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件测试运算符
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-b -c -d -f -p&lt;/code&gt; 是否块设备 字符设备 目录 普通文件 管道&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r -w -x -s -e&lt;/code&gt; 文件是否可读 可写 可执行 为空 是否存在&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;命令&#34;&gt;命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;echo：字符串输出&lt;/li&gt;
&lt;li&gt;read：从标准输入读取一行&lt;/li&gt;
&lt;li&gt;printf：与C的类似，进行格式化输出
&lt;ul&gt;
&lt;li&gt;转义序列：&lt;code&gt;\b \c \n \t&lt;/code&gt; 后退 不换行 换行 制表符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;test：检查条件是否成立
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test bool-expr&lt;/code&gt; = &lt;code&gt;[bool-expr]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$[a+b]：执行基本的算数运算，符合两边不能有空格&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;控制逻辑&#34;&gt;控制逻辑&lt;/h2&gt;
&lt;h3 id=&#34;if&#34;&gt;if&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; condition
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    commands
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; condition
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    commands
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
    commands
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; condition
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    commands
&lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; condition
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    commands
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;for&#34;&gt;for&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; var in item1 item2 item3
&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
    commands
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;in后除了可以跟元素序列，还可以接一个返回多个元素的命令&lt;/p&gt;
&lt;h3 id=&#34;while&#34;&gt;while&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; condition
&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# infinite loop&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; / &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; :
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;case&#34;&gt;case&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; var in
    1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
    2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
    *&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#其余情况&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;breakcontine&#34;&gt;break/contine&lt;/h3&gt;
&lt;p&gt;跳出循环与跳到下次循环&lt;/p&gt;
&lt;h2 id=&#34;函数&#34;&gt;函数&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 定义&lt;/span&gt;
func&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
    commands
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;使用参数时通过 &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; 调用&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;也可以没有返回&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 调用（不需要括号&lt;/span&gt;
func

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;重定向&#34;&gt;重定向&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;command &amp;gt; file 输出重定向&lt;/li&gt;
&lt;li&gt;command &amp;gt;&amp;gt; file 追加方式输出重定向&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;导入-shell-脚本&#34;&gt;导入 shell 脚本&lt;/h2&gt;
&lt;p&gt;通过 &lt;code&gt;. filename&lt;/code&gt; 或 &lt;code&gt;source filename&lt;/code&gt; 的方式导入脚本中的变量或函数&lt;/p&gt;
&lt;h2 id=&#34;unixlinux-命令&#34;&gt;Unix/Linux 命令&lt;/h2&gt;
&lt;p&gt;shell 脚本最强大的功能，还是在于能在脚本中自动化地使用对于系统命令的调用，而其中主要是 Linux 的命令使用，这些就需要额外的学习了，不在此处展开。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/shell/">shell</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>知不可而为 与 为而不有</title>
                <link>https://scottyeung.top/2020/%E7%9F%A5%E4%B8%8D%E5%8F%AF%E8%80%8C%E4%B8%BA-%E4%B8%8E-%E4%B8%BA%E8%80%8C%E4%B8%8D%E6%9C%89/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/%E7%9F%A5%E4%B8%8D%E5%8F%AF%E8%80%8C%E4%B8%BA-%E4%B8%8E-%E4%B8%BA%E8%80%8C%E4%B8%8D%E6%9C%89/</guid>
                <pubDate>Sat, 18 Apr 2020 11:47:07 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;昨晚因为看了实习职位，沉浸于幻想当中太久，导致千字任务最终未能完成。不但如此，上床了之后脑海中仍然不断地想着去实习的事，面试能不能过，能不能被录取，有没有机会去，导师会不会不批准，众多问题萦绕于脑海，挥之不去，睡也睡不着。想得最多的，还是组里会不会不给，或者实习之后老师仍然不时安排科研任务。想了很多，也只能是空想，没有实质的结果。Anyway，有机会还是要试一试，简历也是要投一投的。过去的我错失了很多的机会，就是因为所谓的“自知不可为”，而根本不去尝试一下，所谓的未免浪费时间精力，很多时候也只是害怕面对失败结果的借口而已。&lt;/p&gt;
&lt;p&gt;之前看梁启超的散文，其中有一篇说到其处世观，知不可而为，与为而不有。知不可而为，就是即使知道所做的事情可能很难，会没有结果，没有收获，仍然去做，不考虑成败。为而不有，就是做事情不带有目的，并不是为了某些回报才去做某些事情。以上两种做事观念，我都非常欣赏，且非常向往。做事情，就应该不用也不必考虑这么多，难易，成败，得失，只要是我想做的事情，我就去做，不论结果。&lt;/p&gt;
&lt;p&gt;这样的观念境界很是理想，很是美好，同时也很难实现，很难保持。为而不有，前几天就谈到过，如此功利主义的我，对于任何时间的规划，事情的安排，总是按照所谓的重要程度来进行排序。就如学习的优先级，对我来说，就比运动锻炼要高，所以在一早起床后大块的可利用时间内，我会选择坐在桌子前学习工作，而从来不会先运动一下。为有而为，因有而为，就导致了很经常会因不有而不为，从而损失了很多的机会与乐趣。正是这样，让我在大学期间基本没怎么参加一些课外的活动，因为其“无用”，实在可惜。&lt;/p&gt;
&lt;p&gt;而知不可而为，就更加难了。每个人都有畏难的情绪，害怕挫折，害怕失败，所以会选择止步于舒适区当中，选择放弃不可为之事。明知不可为而行动，怕不是浪费时间，所以我们选择了不为，选择了其它事情了来做。现在的我也是这样想的，尤其是功利的我，凡事追求最高效率，最大收益，不可为，完成不了，就等于没有收益，零效率，根本不能接受。&lt;/p&gt;
&lt;p&gt;不能知不可而为，更为可怕的，是这样会经常地自认为自己不可为，不能为，从而束缚了自己。我在大一下学期时，无意中进入了学校的ACM集训群，并激发了我对于搞ACM算法竞赛的兴趣，然而这份热情很快就被自己的“理智分析”打散了：别人都有基础，比不过人家；需要投入大量的时间，可能会影响正常的学习与活动；比赛还要组队，而我一个人都不认识。我找了众多的理由，来告诉自己这是不可行的，我是做不来的。现在回想起来，如果当时没考虑这么多，选择了参与其中，尝试一下，那我如今的生活状态可能就大不一样了，也不是说我参与了可能就可以得到多好的成绩，而是在做这件事的过程中，我会受到许多的影响，从而被推动或改变。&lt;/p&gt;
&lt;p&gt;但这也只是个人的选择，又能怎样呢，毕竟当时选择了知不可而不为的时候，也享受到了闲散带来的悠闲与轻松。不过仍然希望将来能够更好地践行这两个观念，作出改变。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E6%AF%8F%E6%97%A5%E5%8D%83%E5%AD%97/">每日千字</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>博客域名迁移</title>
                <link>https://scottyeung.top/2020/%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E8%BF%81%E7%A7%BB/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E8%BF%81%E7%A7%BB/</guid>
                <pubDate>Wed, 25 Mar 2020 11:56:16 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;一早起来，发现使用两年的域名还有一个月就要到期了，提醒续费。在处理完一些事情后去续费，发现续费需要每年 72 元，震惊，当时开通的时候也就几块钱，第一年续费也就二三十块，变动也未免太大了，而且对于我这种个人小站来说确实贵。上去查了一下现在域名的价格，发现 club 后缀的价格确实是独一档的贵，甚至比一些 cn 后缀的都贵，有点离谱。于是果断选择转换回去最早使用的 top 域名，续费也才 25 一年，加上首年优惠三年才花了 60 不到。&lt;/p&gt;
&lt;p&gt;另一方面，转域名也是有着不少的成本，而且是越用的久，沉没成本就越高。积累的 SEO 和 RSS 订阅都难以跟随域名转换而跟着转化过来，又可能要重新积累，各种的统计分析也可能需要废弃。但还是需要去做，毕竟互联网的特点就应该是开放而自由，不应该受到过多的枷锁。&lt;/p&gt;
&lt;p&gt;本站现已迁移到域名 &lt;strong&gt;&lt;a href=&#34;http://scottyeung.top/&#34;&gt;http://scottyeung.top/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;相关工作&#34;&gt;相关工作&lt;/h2&gt;
&lt;p&gt;以下是迁移域名做的一些工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;✅ Github Pages 切换解析到新域名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;域名添加 DNS 解析，两个 A 记录指向 GitHub 的 ip 地址，一个 cname 绑在二级域名 www 上指向博客的源地址&lt;/li&gt;
&lt;li&gt;Github Repo 修改 Github Pages 的 Custom domain&lt;/li&gt;
&lt;li&gt;修改 public 文件夹当中的 CNAME 文件的内容为新域名（我已经忘了这个的作用了 2333&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;✅ Coding.net 添加解析（现在已经基本完全归属到腾讯了）。原本是当作国内百度搜索引擎的专用解析，但因为下面的 Google Search 需要旧网址跳转，遂暂时使用它来提供 Pages 服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;✅ LeanCloud 修改安全域名，添加对新域名的支持。发现可以直接使用过往的阅读量数据和评论数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;✅ Google Analytics： 修改监测网址即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;💤 Google Adsense： 添加新网址即可，需要重新进行审核，等待通过中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;❌ 因为疫情的原因，拒了我两次，原因居然是因为疫情而无法审核&lt;/li&gt;
&lt;li&gt;❌ 两次都说我的网站已经下线或无法访问，上网搜了一下，发现一些人也有这个问题，可能是 DNS 对于域名国外访问的解析出了问题，建议添加额外的国外线路解析。当时我是使用 coding.net 提供的 pages 服务，好像这个是国内的服务（存疑），全部的解析到转到了那里。&lt;/li&gt;
&lt;li&gt;💤 第五次审核中。添加了额外的海外线路解析到 Github Pages。海外线路走 Github，国内访问走 coding.net.&lt;/li&gt;
&lt;li&gt;❌ 因为多次审核不通过而被禁止申请一段时间，卒&lt;/li&gt;
&lt;li&gt;✅ 过了禁止时间几天之后，一申请第二天就申上了，然后感觉广告量少了很多，点击就更加了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;✅ Google Search&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加新域名并进行所有权验证&lt;/li&gt;
&lt;li&gt;新域名添加站点地图抓取&lt;/li&gt;
&lt;li&gt;尝试将旧网站的索引的 SEO 资源继承到新域名中，Google Search Console 中的确有网站转移的功能，要求旧网址发 301 响应重定向到新网站。可选的方法有：旧域名 DNS 解析中添加显式 URL 跳转，跳转到新域名，但是目标跳转域名需要备案。选择支持绑定多个域名的 Pages 服务提供商，如 coding.net，可以绑定多个域名，然后选择一个首选域名，其它域名跳转到该域名，浏览器调试验证确实可行，但 Google Search Console 不知道为啥通不过，暂时放弃。过了一个多小时又可以了，不过需要一段时间来处理，不知道要多久，然而提示最好保留重定向 180 天，旧域名只剩下一个月，如果不能在一个月之内迁移成功旧白干了。&lt;/li&gt;
&lt;li&gt;最终基本成功迁移，但是搜索的展示量和点击量都有一点下降，不过好像现在已经回归到跟之前差不多水平了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;✅ 百度站长工具：类似于 Google Search，添加新的网址进行所有权认证即可。依然采用主动推送和 sitemap 的方式来提交链接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;✅ 360 站长工具：同上，操作简单，不过连同上周其实没有期望多大的效果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据损失&#34;&gt;数据损失&lt;/h2&gt;
&lt;p&gt;因为转换域名而无法继承的数据造成的损失：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;❌ 卜算子站点统计。因为它的统计似乎是以站点网址作为键值来进行统计的，更换后直接重新进行统计。（服务开启得太过简单的后果就是维护性/扩展性的牺牲&lt;/li&gt;
&lt;li&gt;❌ 部分 rss 订阅的损失（虽然本来也没有多少&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信息修改&#34;&gt;信息修改&lt;/h2&gt;
&lt;p&gt;此处是一些记录下我网址的需要改过来的地方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;✅ GitHub 上博客的 repo 简介和个人简介&lt;/li&gt;
&lt;li&gt;✅ 中文独立博客 repo 中的博客列表需要修改网址，发 PR 来改&lt;/li&gt;
&lt;li&gt;✅ twitter 上面写的个人网址&lt;/li&gt;
&lt;/ul&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%8D%9A%E5%AE%A2/">博客</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%BB%8F%E5%8E%86%E5%9B%9E%E9%A1%BE/">经历回顾</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Python 中的并发编程</title>
                <link>https://scottyeung.top/2020/Python-%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/Python-%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</guid>
                <pubDate>Mon, 09 Mar 2020 20:51:07 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;尽管 Python 当中有着 GIL（Global Interpreter Lock）的限制，在同一时间当中一个进程只能由 GIL 解释单个线程的代码，但是合理地进行并发编程，仍然可以解决不少的性能瓶颈问题，大大提高效率。尤其是在看完 Fluent Python 之后，对于 Python 的并发编程有了更加深厚的了解。
以下介绍几种可用的并发编程方式，以及它们相关的概念和使用的基本方法。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;以下只考虑 Python3 的状况。&lt;/p&gt;
&lt;h2 id=&#34;threading--multiprocessing&#34;&gt;Threading / Multiprocessing&lt;/h2&gt;
&lt;p&gt;最简单的并发编程形式，莫过于直接开启新的线程或者进程来执行代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;threading.Thread(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)&lt;/code&gt;
通过调用该方法可以直接创建线程对象，其中 target 为需要执行的目标函数，args 和 kwargs 为该目标函数的参数，创建后，通过
&lt;ul&gt;
&lt;li&gt;调用 start 方法以开启线程，进行调度执行 target 函数&lt;/li&gt;
&lt;li&gt;线程开启调度后，调用&lt;code&gt;join(timeout=None)&lt;/code&gt;方法可以阻塞调用线程，等待线程结束或者超时&lt;/li&gt;
&lt;li&gt;使用 threading 进行多线程编程实现并发的话，仍然受到 GIL 的限制，但仍可以避免因等待 IO 完成的阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multiprocessing.Process(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)&lt;/code&gt;
类似于线程的创建，创建进程实现多线程可以避免 GIL 的限制从而利用到 CPU 的多个核心，在 CPU 密集的代码中非常有用。
&lt;ul&gt;
&lt;li&gt;类似于线程的使用，通过 start 方法开启进程任务调度，调用 join 方法等待完成&lt;/li&gt;
&lt;li&gt;除此以外，可以调用进程池 Pool 进行多个任务的调度处理，通过 map 或者 apply 方法，开启多个进程处理多个任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直接创建线程/进程这种方式简单、直接、粗暴，不过大多时候需要自己进行任务的调度，需要自己安排怎样创建进程，怎样完成任务。在之前尝试 &lt;a href=&#34;http://scottyeung.club/2020/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%BC%AB%E7%94%BB%E6%89%B9%E9%87%8F%E7%9A%84%E7%88%AC%E5%8F%96-%E4%B8%8B%E8%BD%BD/&#34;&gt;批量下载漫画&lt;/a&gt; 的过程中，使用的就是 threading 方法，就需要自己进行任务的安排，进而安排线程的创建和执行。当时还不知道怎么合理地分配调度任务，就只能将任务分为若干子集，每个子集开启独立的线程来完成下载任务，但是仍然无法避免下载过程中网络访问和文件保存的 IO 阻塞。另外，线程创建之后就是独立运行的线程，除了等待结束返回之后，无法传输数据进行额外的控制。&lt;/p&gt;
&lt;h2 id=&#34;concurrentfutures&#34;&gt;concurrent.futures&lt;/h2&gt;
&lt;p&gt;它在 Python3.2 中被引入，提供了高层次的异步可调用对象执行的接口。我们可以通过 ThreadPoolExecutor 在线程级别上进行异步执行，或者通过 ProcessPoolExecutor 在不同的进程中实现。两者实现相同的抽象接口类 Excutor，因而具有一样的调用方法，便于进行转换。&lt;/p&gt;
&lt;h3 id=&#34;executor&#34;&gt;Executor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;submit(fn, *args, **kwargs)&lt;/code&gt; 提交任务进行调度，返回 Future 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map(func, *iterables, timeout=None, chunksize=1)&lt;/code&gt; 类似于 map 方法，对于 iter 里面的每一个对象都会异步地调用 func，当任务结束时返回各个函数返回结果的迭代器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;future&#34;&gt;Future&lt;/h3&gt;
&lt;p&gt;在 futures 里面具体的任务类，由 submit 方法创建。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;result 获取任务的返回结果，若未结束则阻塞至结束或超时&lt;/li&gt;
&lt;li&gt;cancel 关闭任务&lt;/li&gt;
&lt;li&gt;canceled 是否关闭&lt;/li&gt;
&lt;li&gt;done 是否结束&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用方式&#34;&gt;使用方式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;通过 submit 提交任务创建获取任务的 future 对象，再通过 as_completed 等待 future 对象结束，获取结果。as_completed 接收 future 对象的迭代器。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;concurrent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;futures&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_workers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;executor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# Start the load operations and mark each future with its URL&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;future_to_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;URLS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;future&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;concurrent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;futures&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as_completed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;future_to_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;future_to_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;future&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; generated an exception: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; page is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; bytes&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;通过 map 方法批量执行任务，再获取结果。但是 map 方法返回结果的顺序与调用顺序即传入的迭代对象的顺序一样，若前面的任务耗时过长会阻塞后面执行快的任务返回。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;concurrent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;futures&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ProcessPoolExecutor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;executor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prime&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PRIMES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;executor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_prime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PRIMES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; is prime: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;asyncio&#34;&gt;asyncio&lt;/h2&gt;
&lt;p&gt;asyncio 采用 event loop 的事件驱动型的异步调度执行。&lt;/p&gt;
&lt;h3 id=&#34;coroutine&#34;&gt;coroutine&lt;/h3&gt;
&lt;p&gt;coroutine（协程）从定义上来说，指的是包含 yield/yield from 语句的函数（在 Python3.5 引入 async 和 await 之前）。在此之前，我们可以通过生成器的形式来实现，样例如下。首先可以调用函数获得生成器对象，然后调用 next 方法或 send(None) 的方法开启 coroutine，开启后，函数执行到 yield 位置，返回 yield 右侧的表达式后则挂起自己，将控制流交回给主线程。当再次调用 send 方法时，可以传输数据并激活协程，继续执行至结束或者下一个 yield 语句处。该样例则是一个计算累计输入的平均值协程。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;# BEGIN CORO_AVERAGER_TEST
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;gt;&amp;gt;&amp;gt; coro_avg = averager()  # &amp;lt;1&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;gt;&amp;gt;&amp;gt; next(coro_avg)  # &amp;lt;2&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;gt;&amp;gt;&amp;gt; coro_avg.send(10)  # &amp;lt;3&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    10.0
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;gt;&amp;gt;&amp;gt; coro_avg.send(30)
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    20.0
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;gt;&amp;gt;&amp;gt; coro_avg.send(5)
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    15.0
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;# END CORO_AVERAGER_TEST
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;averager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;total&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;average&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# &amp;lt;1&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;term&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;average&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# &amp;lt;2&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;total&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;term&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;average&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当 coroutine 运行结束时，会抛出一个 StopIteration 的异常，告知协程结束。若协程函数有返回值，也会被存在 StopIteration.value 中随着异常返回。如果我们要获得返回值，必须要捕获异常。另外，在使用 coroutine 的过程中，我们还需要手动调用 next 方法来开启 coroutine。这些不方便之处，使我们通常会使用一个 delegating generator 来进行中间的调用操作。在 delegation generator 当中，通过 yield from 来调用 subgenerator，并可以直接获取返回值，且 delegating generator 可以处理 subgenerator 抛出的异常。&lt;/p&gt;
&lt;h3 id=&#34;使用方式-1&#34;&gt;使用方式&lt;/h3&gt;
&lt;p&gt;asyncio 库则是通过协程的方式，引入事件循环（event loop）的方式，通过事件轮询与回调的方式进行异步编程。具体的使用方式通过书中一个具体的例子来说明。这个例子是批量从网上下载不同国家国旗的图片，通过将每一个国家国旗的下载任务封装为一个协程，进行并发编程。在协程中，对于每一个可能会发生阻塞，需要等待的操作，均使用 yield from 进行调用。当运行到此处时，程序会交出当前的控制权，异步调用并执行 coroutine，当运行完返回之后才会将控制权交回给之前的线程。&lt;/p&gt;
&lt;p&gt;当编写完协程函数之后，通过 list comprehension 批量生成协程对象，通过 wait 方法开启新的协程，来调用开启所有的任务协程对象。在通过 loop.run_until_complete 等待所有协程完成。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@asyncio.coroutine&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# &amp;lt;3&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{}/{cc}/{cc}.gif&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BASE_URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;aiohttp.request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# &amp;lt;4&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;resp.read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# &amp;lt;5&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@asyncio.coroutine&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;download_one&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# &amp;lt;6&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;get_flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# &amp;lt;7&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;save_flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;.gif&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cc&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;download_many&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cc_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;asyncio&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_event_loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# &amp;lt;8&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;to_do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;download_one&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cc&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cc_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# &amp;lt;9&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wait_coro&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;asyncio&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_do&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# &amp;lt;10&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run_until_complete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait_coro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# &amp;lt;11&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# &amp;lt;12&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;PS：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可能会出现的阻塞应该全部使用异步调用。因为这里采用的是 event loop，其实还是在同一个线程，如果使用了线程阻塞的操作，依然会阻塞其余所有的操作。因而应该使用异步调用的方式，如 aiohttp 进行 http 请求，或者 asyncio.sleep 进行休眠操作，当会发生阻塞的时候，抛出控制权给回 event loop&lt;/li&gt;
&lt;li&gt;此处调用 wait 后再调用 run_until_complete，需要等到全部协程完成时才会一并返回结果，不利于判断完成情况。可以利用 asyncio.as_completed 进行代替，可以马上返回以及完成的任务&lt;/li&gt;
&lt;li&gt;只有通过 loop 或 async 中相关的 run 方法，任务才会被执行&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;update&#34;&gt;update&lt;/h3&gt;
&lt;p&gt;在 Python3.5 中，引入了关键字 async 和 await，以及 coroutine 类型。可以更加清晰地使用 asyncio 进行并发编程。其中 async 等价于装饰器&lt;code&gt;@asyncio.coroutine&lt;/code&gt;，可以将函数声明为 coroutine 对象。await 关键字则可以取代 yield from 关键字，进行异步函数的调用。看了看变化还挺大的，尽管核心的思想没变，还是需要重新看看。具体的文档 &lt;a href=&#34;https://docs.python.org/3/library/asyncio.html&#34;&gt;见此&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;在学习了 Fluent Python 中的并发编程之后，突发兴趣打算使用 asyncio 和 concurreny.futures 来重写之前的漫画下载任务，来看看实际的效果提升。尽管在看书的过程中，感觉自己掌握得好像还行，对于样例代码也能一看就可以理解，而且目标任务也比较简单，应该可以比较快就实现目标任务。然而实际操作编写代码就发现并不是这么简单。首先，书中的代码有些已经落后（如 async 和 await 关键字没有引入），越看文档就越能发现新的 features，有些还与书中的样例代码有所出入。其次，现实中代码的实际运行状况远比书中的理想状况复杂。就错误处理而言，一开始并没有做错误处理，导致出错后就静静地挂起，没有提示，也不会结束。后面做了简单的错误处理后发现，异常类型真可谓各式各样。最后，就是书中不能对全部状况状况作出全面的介绍，存在着许多未知的状况。发现很多错误也还好，最怕的是发现不了错误，或者知道有问题但是找不出来，还没有信息。&lt;/p&gt;
&lt;p&gt;coding 还是需要多动手实践，从具体的代码编写入手，这样才能真正提高所谓的 coding 能力，否则只看书的话，很容易就会陷入一种我都会了的感觉，但这其实只是我都知道的状态，并不代表我都会用，我都能用，我都可以用好。看书更多的是留下一种对某方面知识或技能的印象，当需要的时候能够根据这些印象进行快速的索引和学习，重新获取知识。两者都很重要，缺一不可。&lt;/p&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Python/">Python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/">并发编程</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>记一次漫画批量的爬取/下载</title>
                <link>https://scottyeung.top/2020/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%BC%AB%E7%94%BB%E6%89%B9%E9%87%8F%E7%9A%84%E7%88%AC%E5%8F%96-%E4%B8%8B%E8%BD%BD/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%BC%AB%E7%94%BB%E6%89%B9%E9%87%8F%E7%9A%84%E7%88%AC%E5%8F%96-%E4%B8%8B%E8%BD%BD/</guid>
                <pubDate>Fri, 28 Feb 2020 22:01:33 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;想找回一部很久之前看的漫画，网上的资源较少，大多都已被封禁，少数能看的网页加载还超级慢，有些图片显示还非常奇怪，影响正常阅读，遂萌生了下载下来在本地看的想法。后来找到一个网页，显示正常，能看，但是速度有点不稳定，于是就选择爬取该网页，将漫画全部下载到电脑上。&lt;/p&gt;
&lt;h1 id=&#34;实现思路&#34;&gt;实现思路&lt;/h1&gt;
&lt;p&gt;漫画下载无非就是图片的抓取下载，也算是一种比较简单的爬虫。分析选为抓取来源的网页的URL，发现其URL规律为&lt;code&gt;host/type/漫画的ID+漫画章节号+第几页&lt;/code&gt;，可以按照该规律生成所有漫画每一页的URL，则可以根据每一个URL获取里面的漫画图片下载。进一步分析这些页面上漫画图片的URL，发现是跳转到一个ASP页面进行提供，链接为三级ID组成，包括漫画ID，章节号，页码组成。在浏览器直接访问图片的URL，发现会跳转到404页面。根据开发者调试工具的Network栏中拦截的请求，发现图片实则来自另一个URL，并且图片URL的规律十分明显。于是问题就转变成根据规律批量生成图片的URL并下载。&lt;/p&gt;
&lt;h1 id=&#34;具体实现python&#34;&gt;具体实现：Python&lt;/h1&gt;
&lt;p&gt;为了简单，就没有使用任何的轮子。直接使用 requests 库访问这些 URL 获取图片资源，并写入到本地文件中保存。&lt;/p&gt;
&lt;h2 id=&#34;v1&#34;&gt;v1&lt;/h2&gt;
&lt;p&gt;具体的实现思路大概如下。对于漫画的每一话，先创建目录，然后根据该话的序号和页面生成目标资源URL，发送GET请求获取资源，通过文件写入保存到本地，直到访问的 URL 不存在漫画图片，跳转到 404 页面，此处我们通过判断响应首部的内容长度是否等于 404 图片的大小来判断该话是否结束爬取。根据漫画的总数，对每一话进行下载。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;n&#34;&gt;baseUrl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://www.xxxxxx.com/1234/1234/{0:0&amp;gt;3d}/{1:0&amp;gt;3d}.jpg&amp;#39;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getChapter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;获取并保存第no话的漫画&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cnt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mkdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;saveDir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;baseUrl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cnt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status_code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status_code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Length&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size404&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;saveDir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cnt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.jpg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;           
        &lt;span class=&#34;n&#34;&gt;cnt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;baseUrl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cnt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;效果&#34;&gt;效果&lt;/h3&gt;
&lt;p&gt;实在是太慢了！&lt;/p&gt;
&lt;p&gt;尝试着下了一话大概花费半到一分多钟左右，这里总共有一百多话，两个多小时肯定是走不掉了，而且还没考虑网络不稳定的因素。考虑了一下其中效率的制约因素，最主要为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络请求。发请求获取资源需要传输时间。&lt;/li&gt;
&lt;li&gt;IO。图片保存到本地需要写入时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;v2&#34;&gt;v2&lt;/h2&gt;
&lt;p&gt;考虑使用多线程进行并行下载，进而提高速度。虽说Python提供的多线程只是伪多线程，实际上还是只能有一个线程被核心处理，但应该还是可以减少其中的等待时间。采用 threading.Thread 对象，将下载任务分成若干个 patch 交由不同的线程完成，每个线程完成 20 话的下载任务。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getPatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_chapter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_chapter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;save chapter {:0&amp;gt;3d} page {:0&amp;gt;3d}&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getChapter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;patch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threading&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getPatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;max_chapter&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;136&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;效果-1&#34;&gt;效果&lt;/h3&gt;
&lt;p&gt;并没有提升多少速度。感觉这个多线程并没提高多少并行程度，我开了7个线程，但是最开始只创建了4文件夹进行下载，在这4话中进行调度交替下载。也不知道花了多少时间，下完这4话之后，我就强制关掉了，弃掉该方案。&lt;/p&gt;
&lt;h1 id=&#34;具体实现golang&#34;&gt;具体实现：Golang&lt;/h1&gt;
&lt;p&gt;说到多线程，最方便的肯定就是Go语言了，直接的关键字支持多线程。于是拾起很久没碰过的 Goland，甚至新电脑上还没安装环境，还需要重新安装 Go语言，配置环境和开发工具，就下 vscode 的插件都花了点功夫。&lt;/p&gt;
&lt;p&gt;实现思路还是同 Python 版本一样，为了简单不使用任何额外的轮子，直接使用 net/http 包进行 http 访问，获取图片，并写入到本地文件。&lt;/p&gt;
&lt;h2 id=&#34;v3&#34;&gt;v3&lt;/h2&gt;
&lt;p&gt;具体的单话下载代码如下。方法跟 Python 版本的几乎一样，不过 Go 语言做了额外的错误处理，显得有点冗余。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;downChapter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;no&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Stat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;saveDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;saveDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Mkdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;saveDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ModePerm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;baseUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Content-Length&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;size404&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;saveDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;postfix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;down chapter %3d with %3d pages\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用 Go 语言最主要就是要用它的多线程特性。在 Go 中只需要在调用函数前加上关键字 Go 就可以开启新的多线程调用函数。将下载任务分成 20 个为一批的多个 patch，开启了 7 个线程进行下载。此处使用 WaitGroup 进行多线程的等待，避免主线程提前结束。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;downPatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxChapter&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;cnt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;patch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maxChapter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nf&#34;&gt;downChapter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;cnt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;down patch from %3d to %3d total %d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cnt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cnt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maxChapter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;downPatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maxChapter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;finish!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;效果-2&#34;&gt;效果&lt;/h3&gt;
&lt;p&gt;速度确实提升了，但是感觉没有到很快的程度。。。&lt;/p&gt;
&lt;p&gt;直到写文章的此刻，跑了两个半小时，下了大概 86 话。打开任务管理器看了看情况，CPU 占用率一直很低，磁盘读写占用也很低，感觉瓶颈就在网络传输上面。另外，觉得7个线程也开得有点少了，应该多开一点，榨干电脑的性能，而且开多了也不会有很大的浪费。不过似乎制约速率的瓶颈就这网络传输上面，确实没办法。&lt;/p&gt;
&lt;h1 id=&#34;思考&#34;&gt;思考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;对于网络爬虫/下载，最为制约效率的因素始终是网络因素，这个也是我们最不能把握的。可能是服务器端的接入速率因素，可能是服务器端的处理计算速度因素，可能是链路的传输速度因素，还可能是墙的因素，有很多的可能性。&lt;/li&gt;
&lt;li&gt;在程序刚运行的时候，我想到过多的 http 请求会不会把那个站点搞崩。一百多话，每画平均 25 页，接近三千多张图片，需要发三千多个 http 请求，会不会 over 了，不过在当前这个速度下显然是想多了。不过这在以后的爬虫获取数据或者资源的时候确实需要考虑，为他人想想，可以考虑加点间隔时间。&lt;/li&gt;
&lt;li&gt;东西不用了就会忘记，技能确实需要是不是拾起来使使。&lt;/li&gt;
&lt;li&gt;有时候问题并不是在选择的方法或工具上面，可能只是简单的自己做错了/做得不够，或者当时的环境不行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;后记&#34;&gt;后记&lt;/h1&gt;
&lt;p&gt;最终因为电脑在休眠的时候自动更新，强行重启了，最终还是没下完，大概下了120话，花了4个半小时，远远超出我的预期。大概原因为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程设置有误。原本想设置7个线程，但没考虑到 Go 里面除法取整，少了一个线程，最后一个 patch 的任务没有执行，实际是六线程运行。&lt;/li&gt;
&lt;li&gt;代码存在一些不合理的地方，造成了操作上的重复。如判断在每一话当中判断文件夹是否存在，我把他放到了循环当中，每下载一页的图片前都会判断；还有设置 patch 的时候没有考虑开闭区间，且下载的时候没有判断文件是否已经下载，导致首尾的漫画重复下载。&lt;/li&gt;
&lt;li&gt;后期漫画的图片质量上去了，由前面的一百几十 kb 提升到后面的四五百 kb，所以负责后面漫画下载的线程速度较慢，速度没有达到预期。&lt;/li&gt;
&lt;li&gt;网络问题。可能昨天晚上的网确实不行，也可能是频繁访问被制约了网速。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天早上用 Python 把剩下的十几话下载下来，发现其实昨天的多线程代码有问题，修改了一下，顺利下载，而且速度还不错，我开了 6 个线程，下 18 话用了不到 20 分钟。看来还是网络的问题，难顶。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Python/">Python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Golang/">Golang</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/">异步编程</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/">并发编程</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%88%AC%E8%99%AB/">爬虫</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%BB%8F%E5%8E%86%E5%9B%9E%E9%A1%BE/">经历回顾</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>太极拳中的劲</title>
                <link>https://scottyeung.top/2020/%E5%A4%AA%E6%9E%81%E6%8B%B3%E4%B8%AD%E7%9A%84%E5%8A%B2/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/%E5%A4%AA%E6%9E%81%E6%8B%B3%E4%B8%AD%E7%9A%84%E5%8A%B2/</guid>
                <pubDate>Sun, 16 Feb 2020 22:59:05 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;相信每个男生一直以来都有练习武术的想法，一是想强身健体，二是可保护自己，幻想着如同武侠小说中主角般生活。我也不例外，自小就比较好动，加上一直都比较胖，就有着搞点运动的想法，武术就是当中一个很好的选择。最开始在贴吧上面接触到的就是太极拳与站桩，感觉很玄乎，也好像很厉害。后来叶问兴起，人人都在谈咏春，我也跟我堂哥学习了一下，在网上学了小念头。上了高中之后，追求先进，又开始向拳击，散打等靠拢。最终一无所获，不过也不觉得有什么可惜。&lt;/p&gt;
&lt;p&gt;最近，又开始寻找锻炼方式，最好是一种万能的方法，能够对全身有着极大的帮助，于是又开始转回太极，在YouTube上面学了几个动作，回家后又再次搁置下来。在书柜乱翻时，心血来潮将高中时买的一本书《内家拳的瑰宝——懂劲》再次拿出来看看。这本书主要是描述内家拳当中最重要的核心——劲。所谓的劲，比较玄乎，大致的理解为肌肉收缩产生力，筋的收缩则产生劲。从太极拳等内家拳当中领悟到劲的感觉，且带着劲来打拳架，才是真的入门，用书中的话来说，才能到达“阶及神明”的地步。主要的好处有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;劲能够刺激锻炼到全身，对身体当中的筋有很好的锻炼效果&lt;/li&gt;
&lt;li&gt;通过劲在打拳当中能够更好的效果，尤其是在推手或技击中&lt;/li&gt;
&lt;li&gt;只有领会到真正的劲，才能体会到太极当中的松，在生活当中有更好的状态&lt;/li&gt;
&lt;li&gt;不伤身，可长久练习，不像一些刚猛的技击方法，对身体有所损耗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;怎样练习而找到这种劲呢？当时第一次看这本书，就是因为书中写得太过玄乎，而练习方式的叙述又太简单，被当时因学业紧张而对时间使用非常功利的我放弃掉。如今在家里比较闲，生活没有那么紧张，而且对有无所成感到没什么要求，又重新找了一下。劲怎么来？主要是从地来，力从地起，通过脚对地面的各种接触方式，产生根劲。再通过筋脉，由脚到腿，由腿到腰，由腰到全身。怎么练习呢？个人感觉关键有两点，一是怎么由脚产生劲，二是怎么在全身传导劲。前者，书中讲到一个脚掌落地与落地的方式，以左脚为例，从右上方根据顺时针分成四块，落地顺序为一四二三，离地则反过来。后者则需要注重旋转，变换重心等方式来转移劲。当然纸上谈兵非常简单，真的练习找到感觉非常困难，且是需要那种讲究顿悟的学习。具体的练习可以站桩，或者走拳架。书中给出了作者简化的二十二式太极拳，每天走十遍左右，可以试试感悟，不过书中的每一式就附上一张静态图片和一段文字解释（甚至不是动作描述），学会还是有难度的，不过太极拳的招式大致相同，且并不需要走套路，单独的招式也有效果（可能），网上找找估计能找到。&lt;/p&gt;
&lt;p&gt;附上书中的二十二式太极拳：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;起势，左掤，右掤，捋，挤，按，单鞭，采，挒，肘，靠（左右二式），提手上式，搬拦捶，右斜飞式，搂膝拗步（三式），上步十字手，半步崩拳，抱虎归山，如封似闭，倒撵猴（三步），半单鞭（三式），左每人照镜，收势。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常说传武式微，但就当前这种环境以及流传下来的资料，确实难以传承，就这本书来讲，一味地讲理论，讲劲的好处，而练习方式，拳架教学，只有短短不到三十页，还不到全书五分之一，仅凭这些就能够学会的确实是天赋非凡。因为没有资料，只能靠师傅人工传承，但终有各种的不方便，最主要的，还是好师傅难寻，寻到也不一定愿意教，这样的环境，技艺失传又有何奇怪。不过我也没想着练出啥绝世的武功，无非是希望能锻炼下身体，以及能够以太极的松柔状态来过生活，仅此而已，所以随缘就好。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%A4%AA%E6%9E%81/">太极</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%86%85%E5%AE%B6%E6%8B%B3/">内家拳</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>就医当中的医疗选择——《最好的抉择》读书总结</title>
                <link>https://scottyeung.top/2020/%E5%B0%B1%E5%8C%BB%E5%BD%93%E4%B8%AD%E7%9A%84%E5%8C%BB%E7%96%97%E9%80%89%E6%8B%A9%E6%9C%80%E5%A5%BD%E7%9A%84%E6%8A%89%E6%8B%A9%E8%AF%BB%E4%B9%A6%E6%80%BB%E7%BB%93/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/%E5%B0%B1%E5%8C%BB%E5%BD%93%E4%B8%AD%E7%9A%84%E5%8C%BB%E7%96%97%E9%80%89%E6%8B%A9%E6%9C%80%E5%A5%BD%E7%9A%84%E6%8A%89%E6%8B%A9%E8%AF%BB%E4%B9%A6%E6%80%BB%E7%BB%93/</guid>
                <pubDate>Sat, 01 Feb 2020 17:20:32 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;在就医过程，存在着很多的选择，如何选择医生/医院，选择治疗方式/药物，以及治疗后如何选择恢复方式，都存在着许多的学问。在国内，大多数人就医时面对医生有着天然的敬畏，将医生的话视作权威，但是某个医生能够一直保持最正确的判断吗？难以保证。另外，当某些需要做出选择而承担责任的时候，当医生抛出治疗方式的选项时，我们又如何做出最合理，最适合病人情况，且又能满足病人的心里意愿的选项。本书通过若干的例子，对该问题进行深入的探讨。&lt;/p&gt;
&lt;h2 id=&#34;理想状况&#34;&gt;理想状况&lt;/h2&gt;
&lt;p&gt;最理想的就医情况，莫过于在就医时，医生可以根据个人的具体情况，进行具体的分析，对于病症，给出可供选择的治疗方案。每个方案，都给患者进行完备的解释，包括具体流程，治疗效果，方案成功率，副作用的几率及程度，并且可以提供一定的数据，对效果和概率进行形象化的说明。患者可以根据医生提供的方案和说明，清楚自己的选择可以带来的效果和副作用，并向医生提出自己的疑问和担忧以获得解答。最终两者达成一致，进行治疗。&lt;/p&gt;
&lt;p&gt;但事实上，这样的理想情况，很难出现，尤其是在国内的就医环境当中。医生往往因为无法根据患者的具体情况进行判断，一是会诊时间不多无法对患者进行详细的询问以获取更多信息，二是病患有些时候也不知道如何表达自身情况，应该告诉医生什么信息。所以医生有些时候只能流水线般地给出一些固定的方案。另外，因为患者有些时候对于医生的权威有着畏惧，不敢提出自己的疑问，甚至反对意见。病人怕于见医生，怕于反对医生，最后可能糊里糊涂地就接受了医生的某个方案，最终只能对着不好的效果后悔。&lt;/p&gt;
&lt;p&gt;所以，就医过程中，需要考虑若干因素，从医生的角度，从病人自己的角度，做出最佳选择。&lt;/p&gt;
&lt;h2 id=&#34;医生的建议&#34;&gt;医生的建议&lt;/h2&gt;
&lt;p&gt;当医生给出若干的选项，然后建议你其中一个最好时，甚至医生只给你提供了一个医疗选项，说其它的不够好时，你是否应该听从呢？&lt;/p&gt;
&lt;p&gt;书中讲到了一个治疗甲亢的例子，主人公因为甲亢而去看内科医生，医生给出的方案是让其服用放射性碘丸，利用放射性烧掉甲状腺，日后通过口服甲状腺激素进行补充替代，需要终生服药。破坏掉人体中的一个器官，并且终身都离不开某种药物，相信很多人都不太能接受，真的只有这种方法吗？患者经过查询向其他医生求助时发现，其实还有两个方法，一是手术切除甲状腺，后续终身服药，另一种是通过服用一些抑制药物来抑制症状。在得知这些信息后，患者重新去询问该内科医生，医生只是简单地回答这个方法效果最好，好在哪里，也说不出个所以然。但是根据数据统计，其实三种方法的效果都差不多，而放射性碘丸还可能有辐射到其它器官的风险。说是最好，也未必是。&lt;/p&gt;
&lt;!-- 医生的偏见。 --&gt;
&lt;p&gt;医生会有这样不同的观点，很显然医生也有着自己的偏好，当可供选择的方案相差不大时，医生可能会因为自己的主观因素而对其中的某种选择有着更高的偏好，或者对某种方案有着偏见。如同上面提到的三种方案，根据调查，经历过地震导致核泄露的日本医生就会更偏向于不使用放射性碘丸，而传统的极端的医生则倾向于通过手术切除甲状腺，一步到位。带有偏好的选项，真的适合我们吗？我们做出的选择恐怕会受其影响。为了避免这种情况的出现，不妨对医生深入地询问备选方案，问清其利弊，偏好或是建议的原因。若在该医生处得到的信息不够完备，不妨多问几个不同的医生，上网查询相关的方案信息和病例数据。&lt;/p&gt;
&lt;h2 id=&#34;选择的影响因素&#34;&gt;选择的影响因素&lt;/h2&gt;
&lt;p&gt;除了医生的影响之外，影响病人做出医疗方案选择的，还有许多因素。在选择时，我们需要考虑这些因素，排除噪声影响。&lt;/p&gt;
&lt;h3 id=&#34;易得性因素&#34;&gt;易得性因素&lt;/h3&gt;
&lt;p&gt;对于听到的具体的传言或故事，我们的印象总是要比冰冷的数据更为深刻。尽管医生推荐你可以用方案B，告诉你方案B相较于方案A的成功率要高，副作用相对可能较少，但若果你知道身边的某个人通过方案A成功治愈，且效果良好，没有副作用，你也会被这个真实的例子吸引住，进而选择方案A而不是方案B，因为你不知道这个成功率高，可能较少，是一种什么情况。同理，像治疗高血脂的药，如果不服用降低血脂，会有一定的概率出现心血管疾病，但是服用药物有一定的概率出现不良反应。一般来说，医生应该给出不服用的心血管患病概率，以及不良反应的症状和概率，由患者进行权衡（不过在国内好像很少会考虑药物的不良反应，都是有症状就直接开，出现不良反应就再治不良反应或换药）。尽管可能不良反应概率可能很低，或者可以通过停药而消失，但如果你的身边有人服用这些药物出现不良反应，而且消失不了，相信你的心里对服用这些药物也会有着一定的介怀。&lt;/p&gt;
&lt;h3 id=&#34;自然主义与极端主义&#34;&gt;自然主义与极端主义&lt;/h3&gt;
&lt;p&gt;有一部分人，对于服用药物，进行手术等通过外力改变身体状况的方式比较排斥，这些人可以成为自然主义者，这些人信奉可以通过自己调整生活方式或生活状态，使身体自然恢复。当身体出现某些症状后，他们第一时间通过调整生活方式，试图消灭这些症状，当没有效果时，他们才会去寻求医生和药物的帮助，即使如此，他们仍然希望接受最少的治疗，他们的内心对于医学有着一定的怀疑。与之相对的，还有极端主义者。他们一旦身体出现了某些症状，甚至只是某些身体指标的升高，他们就会第一时间寻求医生的帮助，试图通过药物或手术让身体指标回复正常，不能容忍身体存在一丝异常。&lt;/p&gt;
&lt;p&gt;此处并不能指出两者谁更好，两者都有正面与反面的例子。当然这两者都比较极端，我们在生活中也很少极度偏向一端，而且我们的观点也很可能会随着某些事情的出现而改变。既然有着某一边的偏向，就要向医生表达出来，达成妥协，不然在治疗过程中，内心可能会心生不满，甚至事后埋怨治疗结果。&lt;/p&gt;
&lt;h3 id=&#34;病人的交流&#34;&gt;病人的交流&lt;/h3&gt;
&lt;!-- 向病人寻求咨询和交流，获取信息以帮助交流 --&gt;
&lt;p&gt;上面提到的易得性原则，大多数具体信息的获得来自于其它病人。当我们患病需要寻求其它信息帮助我们做出选择时，我们可以通过求助于此前使用这些治疗方法的病人。通过他们，我们可以获取详细而真实的信息，病人往往无所顾忌，对于疗效和后续的不良反应能够直接表达。当然，有些时候，病人也可能会因为某些原因而隐瞒一些状况。这就需要自己思考过滤信息了。&lt;/p&gt;
&lt;h3 id=&#34;承受程度&#34;&gt;承受程度&lt;/h3&gt;
&lt;!-- 低估对生活状况的忍受程度。觉得接受不了，其实未必 --&gt;
&lt;p&gt;在我们健康的时候，我们总会对生活质量的下降而感到不能忍受，就如若让你去除双眼以保住性命，很多人可能宁可不活了，也不能忍受失明后的生活。我们很多人其实都低估了自身对于生活质量下降的承受程度，觉得不能承受这些改变。不过当我们真的不得不做出如此改变，生活质量下降之后，我们其实也能够迅速适应，并且觉得不以为然。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;许多心理学研究发现，人们往往低估了自己适应新环境和新情况的能力。很多健康的人会把遭遇某种医疗问题后生活的“效用”或者“价值”低估，但是真正有这些问题的人却远没有那么悲观。比方说，健全的人会认为失明是非常糟糕的事情，但是失明几年之后的盲人却认为情况没有健全的人想的那么坏。这对那些在肠道造口术后无法控制排便的人也一样。许多健全人觉得这些结果非常可怕，所以给它们的“效用”或者“价值”打了非常低的分数，但是那些需要承受这些结果的人却觉得生活比前者所想的好多了。&lt;strong&gt;人们的适应能力其实是很强的，我们总能够在生活中发现“价值”，总有未爆发的抗挫潜力&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;代理人的选择&#34;&gt;代理人的选择&lt;/h2&gt;
&lt;!-- 代理人为在病人无法做出选择时，替代其做出医疗方案选择的人。

三个原则：自决性，行善性，不伤害性。 --&gt;
&lt;p&gt;除了需要病人自己做出选择以外，在有些特殊情况，还需要选择代理人，通过代理人来替自己做出选择。所谓的代理人，为在病人意识不清楚而不能做出决定时，代替病人做出选择的人。代理人做出的选择，也是需要通过非常艰难的抉择，一方面要符合病人的意愿，选择不能让其反对，必须要他接受，另一方面又要最为适合病人，效果最好。当病人的意愿与最佳疗法冲突时，当病人的想法与代理人的想法有出入时，当病人没有或无法表达选择意愿时，代理人应该怎样做出选择。&lt;/p&gt;
&lt;p&gt;书中给出了三个原则以帮助代理人做出抉择，三种的优先级从高到低。首先是自决性原则，无论如何，承受治疗的主体都是病人本书，好与不好都由他本人承受，因而所有的选择都必须符合其意愿，至少在他做出选择的一刻是符合他当时的意愿的。其次，则是行善性，所做出的选择必须是对病人有利的，是不是最优的先不谈，但必须是有帮助的，有帮助的可以先上。最后，是不伤害性，治疗方案应该尽可能对人体无害，当然这个在有些时候也不能百分百保证，尤其是当情况紧急，状况不佳时，不得不采取一定的权衡。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;书中称医学为一门精确而不确定的科学。说其精确，是因为现代医学将一切都数据化，精确化。对于某些症状，其数据指标符合特定的数据指标，则判定为某疾病，采用某治疗方式。然而这种全通过数据，机械化的诊断流程，真的可以适应任何人，满足任何人吗？在这样的灰色地带，想要做决定往往并不容易，选择也往往不是那么明显。因此，医学涉及医生和病人微妙并且私人的决定。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过研究和数据，我们可以知道在100位像苏珊·鲍威尔那样的妇女中，会有一两位患有高胆固醇，但究竟是哪一两位呢？同样，我们也无法判断在300位妇女中，有哪一位或者两位妇女服用他汀类药物会产生疗效。甚至通过检测带有遗传信息的BRCA基因，我们也只能得到一个癌症发病率的估计值。没有人能够确切地知道，哪位妇女会在哪个确定时间患上乳腺癌；也没有人能够清楚地指出心房颤动、前列腺癌或者其他的疾病会给个体的生活带来怎样的影响，某种治疗方案在某个人身上又会出现怎样的副作用。我们每个人都是由不同的基因组合以及各自的环境造就出来的独一无二的个体。怎样保持健康或者从疾病中康复，并没有一个统一的方法。
然而这一本质性的问题往往被一些专家忽视，他们试图将治疗标准化，而不考虑病人的个体需求。虽然有人把这些公式当作科学来看，但是其实这种方法的实质是要把患病的经验转变成数字，这种努力的方向其实就是错误的，是徒劳的。然而保险公司和政府官员却总是在给医生和医院施加压力，要求他们通过各种公式把医疗服务标准化。保单设计人员，甚至是某些医生自己都宣称，把医学当作一门艺术的想法已经过时了。现在，医疗服务应当按照工业生产的方式来提供，医生和护士只要按照操作手册亦步亦趋就可以了。这些人甚至认为，医生和病人没有资格决定什么治疗方案最好。所以，当他们大谈医疗改革的目标是“以病人为中心”的时候，他们其实追求的是“以体制为中心”。&lt;/p&gt;
&lt;/blockquote&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%81%A5%E5%BA%B7/">健康</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/summary/">summary</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Maximum Sum Circular Subarray</title>
                <link>https://scottyeung.top/2020/Maximum-Sum-Circular-Subarray/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/Maximum-Sum-Circular-Subarray/</guid>
                <pubDate>Tue, 21 Jan 2020 19:59:53 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;source: &lt;a href=&#34;https://leetcode-cn.com/problems/maximum-sum-circular-subarray/&#34;&gt;Maximum Sum Circular Subarray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;difficulty: Medium&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.&lt;/p&gt;
&lt;p&gt;Here, a circular array means the end of the array connects to the beginning of the array.  (Formally, &lt;code&gt;C[i] = A[i] when 0 &amp;lt;= i &amp;lt; A.length&lt;/code&gt;, and &lt;code&gt;C[i+A.length] = C[i] when i &amp;gt;= 0&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Also, a subarray may only include each element of the fixed buffer A at most once.  (Formally, for a subarray $C[i], C[i+1], ..., C[j]$, there does not exist $i &amp;lt;= k_1, k_2 &amp;lt;= j$ with$k_1 mod A.length = k_2 mod A.length $.)&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Example 1:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Example 2:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Example 3:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [3,-1,2,-1]
Output: 4
Explanation: Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Example 4:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [3,-2,2,-3]
Output: 3
Explanation: Subarray [3] and [3,-2,2] both have maximum sum 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Example 5:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [-2,-3,-1]
Output: -1
Explanation: Subarray [-1] has maximum sum -1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;$-30000 &amp;lt;= A[i] &amp;lt;= 30000$&lt;/li&gt;
&lt;li&gt;$1 &amp;lt;= A.length &amp;lt;= 30000$&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;h2 id=&#34;暴力法&#34;&gt;暴力法&lt;/h2&gt;
&lt;p&gt;因为太久没有做过题了，对题目都没什么感觉了，感觉有点熟悉，好像可以用 DP（发现是暑假的时候在紫书中看过），但是一下不知道怎么用。于是先用暴力法试试水。&lt;/p&gt;
&lt;p&gt;题目当中要求的是最大子段和，所以考虑枚举所有的子段，每个子段包含一个普通的区间和一个首尾相接的连续区间。
枚举的情况有 $2 * C_n^2$ 种，每种情况计算子段和可以通过累计前缀和来计算，总复杂度为 $O(n^2$)。&lt;/p&gt;
&lt;p&gt;最后结果为超时，大概能过 91 / 109 个样例。&lt;/p&gt;
&lt;h3 id=&#34;最大子序列和算法&#34;&gt;最大子序列和算法&lt;/h3&gt;
&lt;p&gt;暴力法超时后思考无果，上网看看别人的思路。发现求解最大子序列的和有一个很好的算法，就是 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E5%88%97%E9%97%AE%E9%A2%98&#34;&gt;Kadane 算法&lt;/a&gt;。很好理解，直接在下面提出代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;kadane&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;源方法来自于DP的化简，设 $dp[i]$ 为数组以元素 &lt;code&gt;arr[i]&lt;/code&gt; 结尾的最大子序列和，则有下列的转移方程。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;实际使用过程中无需存储dp数组，为了降低空间复杂度，使用数值变量记录数值即可。&lt;/p&gt;
&lt;h3 id=&#34;问题进一步分析&#34;&gt;问题进一步分析&lt;/h3&gt;
&lt;p&gt;于是问题就变成了在求解数组的最大子序列和的基础上，进一步考虑双向区间的和。原本的子序列，只考虑数组的单向区间，这一块可以通过kadane算法求解，所以所需考虑的问题为怎么求双向区间（一头一尾组成）的子数组和。大致有下面三种方法。&lt;/p&gt;
&lt;h4 id=&#34;相邻数组法&#34;&gt;相邻数组法&lt;/h4&gt;
&lt;p&gt;单区间子序列的最大值可以通过Kadane算法直接求出。
环形序列的双区间子序列则可分成左右两部分来找出，我们定义 &lt;code&gt;maxright[i]&lt;/code&gt; 为下标为i的元素右侧的最大子序列和，这个可以通过一次倒序扫描求出。所以双区间最大子序列和为 &lt;code&gt;max(leftsums[i] + maxright(i+1) for i in range(N-2))&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fun1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;leftsums&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;leftsums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;leftsums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;rightsums&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;maxright&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;rightsums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rightsums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;maxright&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxright&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rightsums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;leftsums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxright&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;变号法&#34;&gt;变号法&lt;/h4&gt;
&lt;p&gt;本方法将双区间的序列和转化为整个数组的总和减去单区间子段和，其值为$S - \sum_{k=i}^jA_k$，该值的最大值为后者取最小值时的值，问题变成求解数组元素i到j的最小值，将数组元素全体乘以-1，则变成求解最大值，可套用 kadane 算法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fun2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;kadane&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;alls&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ans1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kadane&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ans2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alls&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kadane&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;前缀和优先队列&#34;&gt;前缀和+优先队列&lt;/h4&gt;
&lt;p&gt;因为数组A的循环子段必然是数组B=A+A的子段，所以可将数组拼接一次在求单区间的最大子序列和，只需满足子序列长度不超过原数组长度。
对于子序列 &lt;code&gt;B[i+1:j+1]&lt;/code&gt;，其和为 &lt;code&gt;P[j]-P[i]&lt;/code&gt;，这里我们固定j，找出使 P[i] 最小的 i 值，可通过优先队列实现，这里通过在插入元素时比较当前元素与队列末元素的大小进行插入处理，手动实现优先队列。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

    &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;collections&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deque&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;popleft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Python/">Python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/LeetCode/">LeetCode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/DP/">DP</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>谈谈牙齿</title>
                <link>https://scottyeung.top/2020/%E8%B0%88%E8%B0%88%E7%89%99%E9%BD%BF/</link>
                <guid isPermaLink="true">https://scottyeung.top/2020/%E8%B0%88%E8%B0%88%E7%89%99%E9%BD%BF/</guid>
                <pubDate>Fri, 03 Jan 2020 19:43:59 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;周一的时候突发急性牙痛，可能是周六的时候吃了烤羊肉，还喝了点啤酒。在知乎看了看，估计是牙髓炎或者是牙根尖周炎，大概就是细菌进入牙齿根部/牙髓引起发炎，炎症分泌物导致牙髓内压力增大，巨痛，基本不拔牙的话都要进行根管治疗，当然小地方的话可能就打开消毒，不痛后又重新补上。在痛了一个晚上后，根本睡不着觉的我第二天一早就跑去武大口腔治疗。&lt;/p&gt;
&lt;p&gt;因为来得比较早，加上只是挂了个普通号，比较快就看上了。拍了个牙片，给医生看了看，病情和治疗方式基本如之前设想的一样，需要做根管治疗。所谓的根管治疗，是将牙齿内部的根管/神经清理干净，彻底清理消毒后，填入消毒材料进行填充。根管治疗后牙齿因为失去神经/根管的营养，会比较脆弱，需要加个牙冠。在医生再三向我强调根管治疗的注意事项以及协商了时间之后，我签署了同意意向书，开始治疗。给我看牙的是一个很温柔的女医生。暂时的治疗只是在病牙上打了一个洞，对牙齿内部进行了药物冲洗，让其暴露几天，流出之前的发炎的分泌物。治疗后就不怎么痛了，不过仍然要进行后续的治疗。&lt;/p&gt;
&lt;p&gt;一直以来，我的牙齿都不是特别的好，这也已经不是第一次牙齿出问题了。在小的时候，对于牙齿不是很重视，在没换牙之前，牙齿就出过问题，换了牙之后，也出过不少的问题。在中考结束后，第一次补了牙，当时是因为大牙出现冷热酸痛。后面陆续补过几个牙，之后才开始重视牙齿问题。但已经感到有点为时已晚。个人感觉小地方的牙医诊所有些不足的地方：一是治疗追求治标，蛀牙了便补，牙痛了便打开杀神经再补，再痛就再来一次。二是没有一个很好的教育预防理念，牙痛/蛀牙去看牙，都是帮你补了就算，也没有告诉你成因，提醒了你应该怎么做，更不会顺便检查你的其它牙齿，最有趣的是我箍牙的时候的医生，经常跟我说我没有好好刷牙，但事实是我刷的认真且勤快，他也不给出具体的解释或者补充。&lt;/p&gt;
&lt;p&gt;大一的时候也有出现过牙痛的状况，寒假的时候以为是普通的小事就忍了忍，开学就发作，也是跑去了武大口腔，两个连着的牙齿蛀了，其中一个还疑似深髓，可能要根管，当时对于金钱还比较敏感（也可以说是没这么多钱），听到要可能 2000+ 之后就放弃了在那里治疗，忍了一个学期回去小城市治，方法就是普通的去除蛀牙部分，补牙，痛了就下杀神经的药，下周再来，陆续也治了三周，最后不痛了，也不知道是不是就算是治好了。&lt;/p&gt;
&lt;p&gt;在当时回去治疗之前，上网看牙齿相关的资料，发现了一本很有趣的书 &lt;em&gt;Cure Tooth Decay: Heal &amp;amp; Prevent Cavities with Nutrition&lt;/em&gt; 是说用营养学来治疗牙齿疾病的，中心内容就是多吃富含脂溶性维他命的东西，鱼肝油，无机盐钙和镁，少吃升血糖指数高的和植酸食物。书中其实没给出什么比较科学的解释，基本都是通过一些资料/实际情况做的实证研究/统计，试了下，也就那样，该疼还是疼。&lt;/p&gt;
&lt;p&gt;在这次痛的过程中，我又重新翻了翻这本书，又上网搜了搜这本书，结果在豆瓣找到了一个对于这本书的读者&amp;amp;实证者，此处贴出他的一篇&lt;a href=&#34;http://blog.sina.com.cn/s/blog_6e979bb90100mnf0.html&#34;&gt;文章&lt;/a&gt; 基本上就是在上面的营养防治的理论的完善补充。为什么会蛀牙，出现牙病，原因无非是细菌繁殖在我们的牙齿上，造成了酸性的环境，腐蚀我们的牙齿。一直以来的理论，都是让我们通过刷牙来消灭这些细菌，但对于有些人，例如我，效果就属实一般，即使是使用电动牙刷+牙线+漱口水，该蛀还是得蛀。采用营养学的方法是另一种思路，通过加固/恢复我们的牙齿，进行防治。一方面，还是需要使用牙线+冲牙器清洁牙齿，去除细菌，但另一方面，还需要补充一些营养来恢复牙齿，加固牙齿。
书中给出的主要方法是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用牙线 + &lt;strong&gt;冲牙器&lt;/strong&gt; 来保持牙齿的清洁&lt;/li&gt;
&lt;li&gt;补充维生素$K_2$和$D_3$帮助牙齿吸收钙质元素&lt;/li&gt;
&lt;li&gt;补充钙和镁等矿物质&lt;/li&gt;
&lt;li&gt;尽量避免摄入酸性物质，对牙齿有腐蚀作用的食物&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感觉还是挺有道理的，可以尝试一下。不过这些方法感觉都只能用在预防上面，当牙齿真的出了问题，还是建议去大医院好好地看看！&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%81%A5%E5%BA%B7/">健康</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>&lt;唤醒大脑：神经可塑性如何帮助大脑自我疗愈&gt; 读书笔记</title>
                <link>https://scottyeung.top/2019/%E5%94%A4%E9%86%92%E5%A4%A7%E8%84%91%E7%A5%9E%E7%BB%8F%E5%8F%AF%E5%A1%91%E6%80%A7%E5%A6%82%E4%BD%95%E5%B8%AE%E5%8A%A9%E5%A4%A7%E8%84%91%E8%87%AA%E6%88%91%E7%96%97%E6%84%88-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/%E5%94%A4%E9%86%92%E5%A4%A7%E8%84%91%E7%A5%9E%E7%BB%8F%E5%8F%AF%E5%A1%91%E6%80%A7%E5%A6%82%E4%BD%95%E5%B8%AE%E5%8A%A9%E5%A4%A7%E8%84%91%E8%87%AA%E6%88%91%E7%96%97%E6%84%88-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
                <pubDate>Mon, 30 Dec 2019 17:53:48 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;本书主要介绍如何通过一些物理方式（非药物），利用神经可塑性，帮助大脑进行自我疗愈。本书主要通过介绍作者遇到的病例，或者当前进行过的相关实验，来说明什么是神经可塑性，怎么利用神经可塑性帮助大脑疗愈，有什么具体的方式帮助了特定的什么疾病的恢复。整本书下来，其实作者并没有明确地输出什么理论/观点，同时通过摆出例子，使用春秋笔法来告诉大家，什么对什么有帮助，这样一来，可以避免放出研究的数据/实验支撑的需要，当然可信程度也随之下降，另一方面，这种讲故事的书对于我这种功利的阅读者也不太友好，都找不出重点进行阅读记录。最后只能翻了翻目录，大概记录下讲了些什么。&lt;/p&gt;
&lt;p&gt;一直以来，大脑都是被认为是一个精密的仪器，一旦某处出现问题，身体就会出现相关的问题，且难以治疗。作者提出，可以利用神经可塑性的方法，使用一些自然的刺激手段，帮助大脑进行自我修复，进而治疗因大脑的问题而出现的疾病，如中风，帕金逊。&lt;/p&gt;
&lt;p&gt;具体的疾病及其治疗如下：&lt;/p&gt;
&lt;h2 id=&#34;慢性疼痛&#34;&gt;慢性疼痛&lt;/h2&gt;
&lt;p&gt;疼痛其实并不是疼痛源引发疼痛而被大脑感觉到，而是大脑为了警告危险的出现，而发出疼痛的表现来提醒自身。每次疼痛，相应的神经元会进行放电，长期某个位置疼痛，会形成一个习惯，即使身体痊愈，疼痛系统仍然会放电，引发疼痛。&lt;/p&gt;
&lt;p&gt;神经可塑性的一条核心规律是，同时启动放电的神经元是连接在一起的，也就是说，反复的精神体验使大脑处理该体验的神经元产生结构性变化，令神经元之间的突触连接更为强健。反过来也是一样。如果一个人长期放弃执行某一活动，这些连接就弱化了，随着时间的推移，很多连接甚至消失了。这说明了神经可塑性的一条更普遍的原理：用进废退现象。&lt;/p&gt;
&lt;p&gt;疼痛需要大脑的神经元进行处理，因而我们可以通过分散大脑区域的资源，减少处理疼痛的大脑区域。具体可以通过可视化想象的方法来压倒疼痛。处理视觉信息和疼痛的有两个脑区，后扣带回（帮我们从视觉上想象东西所处的空间位置）和后顶叶（也用于处理视觉输入）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每当疼痛袭来，他就立刻开始可视化想象。但想什么内容呢？他想象的就是自己绘制的脑图，他提醒自己，大脑真的可以改变，好让自己保持动力。他先栩栩如生地想象大脑处于慢性疼痛中的画面，然后观察慢性疼痛过程中脑图有多少地方的神经可塑性在扩展。接着，他会想象启动放电的区域渐渐缩小，看起来就像是大脑没有感到疼痛时的样子。“我必须无情，比疼痛信号本身更无情。”他说。他用大脑疼痛区域缩小的画面迎接每一波疼痛，他知道，必须强迫自己的大脑后扣带回和后顶叶处理视觉图像。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为神经可塑性用进废退的特点，当每次慢性疼痛出现的过程，通过可视化的方式，分散/避开/减少大脑对疼痛的处理来减轻疼痛，弱化疼痛的感受，久而久之，疼痛的回路弱化，慢性疼痛的现象消失。&lt;/p&gt;
&lt;h2 id=&#34;走路疗愈帕金逊综合征的症状&#34;&gt;走路疗愈帕金逊综合征的症状&lt;/h2&gt;
&lt;p&gt;帕金逊综合征为大脑黑质出现问题，影响了关于身体活动所需的多巴胺，会导致身体的活动能力丧失，但通过每天坚持锻炼，尤其是走路，可以使身体保持活动的能力，当然这并不是治好帕金逊综合征，药物也不能轻易地减少，但通过保持每天的走路，保持每天的运动量，可以通过另一种方式来保持自身的活动能力。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;其它的章节感觉比较玄乎，篇幅也比较常，待填坑。包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;光帮助大脑连接&lt;/li&gt;
&lt;li&gt;帮助自闭患者重新获得会话能力&lt;/li&gt;
&lt;li&gt;一位盲人学会了看&lt;/li&gt;
&lt;li&gt;重新习得发声的能力&lt;/li&gt;
&lt;/ul&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%81%A5%E5%BA%B7/">健康</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>&lt;被讨厌的勇气&gt;读书体会与摘要</title>
                <link>https://scottyeung.top/2019/%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94-%E8%AF%BB%E4%B9%A6%E4%BD%93%E4%BC%9A%E4%B8%8E%E6%91%98%E8%A6%81/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94-%E8%AF%BB%E4%B9%A6%E4%BD%93%E4%BC%9A%E4%B8%8E%E6%91%98%E8%A6%81/</guid>
                <pubDate>Thu, 19 Dec 2019 12:08:40 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;&lt;a href=&#34;https://book.douban.com/subject/26369699/&#34;&gt;《被讨厌的勇气》&lt;/a&gt;通过哲人与青年的对话，探讨人如何获得幸福，并且通过阿德勒心理学对人生的诸多问题进行剖析。&lt;/p&gt;
&lt;p&gt;这本书最早在是在知乎看到有人强推，遂在微信读书里找到此书并读完。在读的过程中，感到其所谈到的一些现象真实地切中了我的想法，感觉到描述的例子就正正是我本人。其中的一些观念我觉得很好，或者说是很适合我，于是在看的时候进行了若干地记录，摘录了一些语句，并写了点个人的体会。但因为始终不是在上课做笔记，摘录得也有些随意，有些摘录也是根据我的体会二次加工出来的，所以就这样看吧（逃&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;世界是简单的，人也是简单的。复杂是因为人把世界看得复杂，这就涉及到有无勇气，正视世界的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;另一种心理学&#34;&gt;另一种心理学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;另一种心理学：阿德勒心理学，属于目的论，对比于传统心理学流派的原因论，区别相当于想法影响情绪还是情绪影响想法。对于原因论，有几个问题：对于当前遇到的心里问题，一味分析其成因，对于解决问题没有太多实际的意义，如同感冒去看医生，医生只告诉你感冒是因为之前着凉了一样了；给予同样的经历，即原因相同，但是不同人会有不同的结果。目的论讲究目的，认为主要是取决于个人的看待态度与方式。重要的不是经验本身，而是对待经验的方式。换而言之，情绪是可以控制的，情绪只是某些时候特定行为的一个借口。同样，人的性格与本性也是可以改变的，受到自身的观念所影响，很多时候不是不想改变，而是自身不想改变，缺乏面对改变时可能会遇到的陌生与不安的勇气。另外，也担心改变之后失去了对当前不满的状况的解释借口。不去改变，借口没有这个条件才不能实现这件事情，这样就能掩饰自己实现不了这件事的状况。&lt;/li&gt;
&lt;li&gt;自卑感与自卑情结。自卑感是一个很正常的感受，每个人都会有，健康的自卑感应该来自当前的自己与理想中自己的落差，而不应该来自与他人的对比。通过健康的自卑感，我们可以找到自己努力成为更好的自己的方向 。至于自卑情结，则是一种不健康的状态，由不健康的，过度的自卑感来形成。带有自卑情结的人，往往会将生活遇到的问题，对当前状况的不满，归结于当前所拥有的自卑感。因为在某些条件上处于落后，感到自卑，所以在某些事情上面失败就有理由了，要不是那样，我就怎么样了。因为有着可以逃避的借口，带有自卑情结的人会一直处于这种自卑的状态来保护自己。另外，自卑情结还会带来：权势张越，因为自身的不自信，所以需要通过一些外在的事物/功绩来夸耀自己；弱者保护，我弱我有理，因为我弱，所以我做出了某些成绩我就是了不起，做不出来的话则是我本应如此。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关于竞争&#34;&gt;关于竞争&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;竞争应该是在一张平面上各人沿着自己的方向按照自己的速度前进，竞争的对象应该是自己，而不是其他人。每个人的速度不一样，必然有人走在前面，有人走在后面。走在前面的未见得能够一直保持走在前面，如果选择了不当的对比对象，只能造成自身长久的失败感。另外，将他人放在竞争对手的位置上面，很难够成为真正的伙伴。竞争必然存在输赢，有时候我们不能发自内心地为他人的成功高兴，就是因为将其放在竞争对手的位置上面，因而会有他人的成功等同于自身的失败这种想法。&lt;/li&gt;
&lt;li&gt;基于上面的原因，也没有必要与人争执，尤其是争执的程度发展到企图通过发怒来解决。发怒不只是情绪，其实也是你的一种表达方式，一种不太好的表达方式，遇到争执时，可以通过发怒来表达，但效果没有通过言语沟通交流来得好。所以遇到争执无法解决时，不妨承认错误，以免事情的讨论上升到人身的讨论，变成你对我错的二元选择。当你坚信是对的话，别人持什么样的态度都无法改变你的观点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关于人生&#34;&gt;关于人生&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;人生行为的两大目标：自立和与社会和谐相处。而支持这些想法的也有两个心理目标：我有能力的意识和人人都是我的伙伴的意识。这些目标可以通过直面人生课题来解决，包括工作，交友，爱。&lt;/li&gt;
&lt;li&gt;人生的谎言。我们常常为逃避生活中遇到的事情而寻找开脱的谎言和借口。一个很典型的例子，不是因为某人的缺点而讨厌某人，而是因为讨厌某人而自然就会去发现其缺点，归根到底，实在逃避糟糕的人际关系。我讨厌某人，不愿与某人相处，我发现到他有什么缺点，因为他有这些问题，我就可以离他远点，不用相处。&lt;/li&gt;
&lt;li&gt;否定寻求他人认同的行为和想法，我们没有必要总是想着需要满足他人的期待。每个人都只是为了自己活着，而非为了其他人活着。但在实际生活中，好多人都无法做到这一点，甚至可能会事事都想着得到他人的认同，从而被他人影响自身的行为，不得不做许多并不情愿的行为。&lt;/li&gt;
&lt;li&gt;工作课题的分离。所谓的工作课题，为每个人各自应该要做的事情，不同人，具有不同的身份，处于不同的位置都具有不同的工作课题，我们不应该干涉他人的工作课题，也不应该被他人干涉。如何判断工作课题属于谁？谁将承担后果就由谁来处理。当我们在日常生活中陷入困境或对现状不满时，我们不妨想一想有没有进入到他人的课题中，如果有，果断抛开，进行分离。正如上面说到的让他人满意，他人接受，这不应该是你的课题，你做完了自己的工作就已经足够，他人是否接受，如何评价，会否反对，都是他人的课题，你不应该操心，操心也没有用。而如果你操心了他人的课题，选择采取额外的工作或者改变来迎合他人，则只会增加自己的不满。另外，因为工作课题的分离，我们的责任也可以随着不干涉他人的课题一并减轻。&lt;/li&gt;
&lt;li&gt;但是，有些人却对着这种所谓的责任存有留恋，并认为这种操心他人课题的责任能够有利于他人的成长。就像家长操心孩子的成长，干涉孩子的成长的课题，以是为了孩子好的理由，为其铺排好一切道路。是选择带着不满接受父母为其铺排好的可能较大几率有着较好前程的道路，还是自由地选择自己想要的道路，这取决于个人的选择，没法给出一个确定的答案。但前者的所谓较好前程，难道不是在满足他人的认可和期待吗？尽管如此，很多人可能还是会倾向于前者，因为不需要自己做出选择，可能是因为确实迷茫不知道如何选择，更有可能是因为前者不需要自己亲自做出选择，选择都不是我做的，如果结果不好的话，我能够有埋怨的对象，“都说了不这样”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关于勇气&#34;&gt;关于勇气&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;被讨厌的勇气。我们不可能做到不被所有人讨厌，自由就是被别人讨厌。每个人都有寻求认可的倾向性，而从中寻求解脱就是获取自由。当否定了寻求他人的认可之后，必然会存在有人不认可你，进而产生讨厌的念头。我们对此无能为力，也无须担心。他人是否讨厌我，这是他人的课题，我操心不来，而如果为其改变了自己，则违背了工作课题分离的原则，徒增自身的麻烦。&lt;/li&gt;
&lt;li&gt;人的一切烦恼皆来自于人际关系。即便如此，在我们的人生课题中，我们还是无法避免人际关系，尤其是我们在社会中其实均处于一个共同体当中。所谓的共同体，可以大至一个国家，也可以小至一个两人的家庭。我们应该主动参与到共同体当中，这也课题分离并不矛盾，共同体并不唯一，也不存在非加入不可的共同体。基于此，当我们在某一共同体中出现不满或者矛盾，我们可以及时离开这一个共同体，将目光转向更大的，别处的共同体。&lt;/li&gt;
&lt;li&gt;不应该批判，也不应该表扬。因为批判和表扬很容易将自身和他人放入一种纵向的关系当中，我对你进行批判或表扬，暗含着我有这个能力，暗示着我比你高一等的感觉，我可以批判你，也可以表扬你，带有一种操纵干涉的味道在此。值得提倡的，是鼓励。鼓励，是站在横向关系的角度。大多数人并不是缺乏解决问题的能力，而是缺乏面对问题的勇气，而鼓励，正是帮助对方意识到问题的本质，帮助他人寻找面对的勇气。&lt;/li&gt;
&lt;li&gt;每个人都会受到自我意识羁绊，不能无拘无束的活动。正如在他人的面前，我们会很小心自己的言行，生怕影响了在他人面前的印象，但是只有自己一个人独处的时候，就会将其压抑完全暴露。本质上，我们是缺乏暴露本真的自己在他人面前的勇气。为此，我们需建立共同体感觉，所谓共同体感觉，就是对自我的执着，转化为对他人的关心。建立共同体感觉，需要从下面三点做起：自我接纳，他者信赖，他者奉献。&lt;/li&gt;
&lt;li&gt;所谓的自我接纳，正如其本身的意思，就是接纳真实的自我，意识到自己能做什么，做不到什么。这是一种肯定性的达观，对于无法改变的，淡然接受，可以改变的，勇敢地取面对它。所谓的他者信赖，即是在人际关系中需要建立无条件的信赖关系，信任遭到了背叛怎么办，还是需要保持这种无条件的信赖关系，是否背叛这个属于他人的课题，我们不应该操心，但是若果多次背叛你，使你不愿与其继续相处，可以及时断绝关系，进行分离。他者奉献，则是在向作为伙伴的他人奉献的过程中找到自己的价值，区别于寻求他人的认同，我们所做的事情是否有价值，不是由他人来评价的，而是由自己的内心来决定。这里要将贡献和作用区分开来，你做出的贡献，判断其是否具有作用，这是他人的课题，我们只需将目光集中在自己的贡献即可。我做了某些事，我觉得自己对他人，对共同体都是有奉献的就可以了。&lt;/li&gt;
&lt;li&gt;犹太教教义中有这么一段话：“假如有10个人，其中势必会有1个人无论遇到什么事都会批判你。他讨厌你，你也不喜欢他。而且，10个人中也会有2个人能够成为与你互相接纳一切的好朋友。剩下的7个人则两者都不是。”如果我们总是将目光只集中在事物的部分来决定其总体，我们则无法获得人生的和谐。另外，只将目光集中在人生的特定侧面，也是如此，例如工作狂。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关于幸福&#34;&gt;关于幸福&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;相比于设定一个远大目标，然后当下一直为其进行铺排和准备，我们更应该活在当下，活在此时此刻。人生不应该是一条线，并不是设定一个个的目标点，就能将自身和人生中的一个个阶段，一个个目标点连接起来的。如果只为了所谓的远大目标，我们在目标达成前所做的一切都只是在忍受获得成功的痛苦，这样是不理智的，万一失败了，到达不了终点呢？当前的忍受皆是白费？我们应该将人生看成是一个个不连续的点，每一个不连续的点都是当下，只有集中于当下，专注于此时此刻所做的事情，不考虑过去与将来，我们才能够获得长久的幸福感。正如登山，从踏出的第一步就开始了个人的旅途，如果我们只是一心想着登到山顶，那么途中的一切乐趣就会丢失，还不如直接坐缆车到山顶。&lt;/li&gt;
&lt;li&gt;专注于此时此刻，不考虑过去与将来，我们能够很自由地活在当下，享受当下，但是，我们可能会感到迷茫，如何选择人生的方向呢，也就是下一个此时此刻怎么选择？答案是他者奉献。无论你过着怎样的刹那，即使有人讨厌你，只要没有迷失“他者贡献”这颗引导之星，那么你就不会迷失，而且做什么都可以。即使被讨厌自己的人讨厌着也可以自由地生活。而且，我们要像跳舞一样认真过好作为刹那的“此时此刻”，既不看过去也不看未来，只需要过好每一个完结的刹那。没必要与谁竞争，也不需要目的地，只要跳着，就一定会到达某一个地方。&lt;/li&gt;
&lt;/ul&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%BF%83%E6%80%81/">心态</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Some Notes About SQLAlchemy</title>
                <link>https://scottyeung.top/2019/Some-Notes-About-SQLAlchemy/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/Some-Notes-About-SQLAlchemy/</guid>
                <pubDate>Sat, 07 Dec 2019 10:24:35 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;近期在收集处理大量的数据，通常是把 XML/文本格式的数据转为关系型，结构化的的数据，能够方便导出直接进行分析，尤其是导出能直接被 pandas 分析的格式（csv/json）。因此需要使用一个在 Python 下的 mysql 处理库，既然找了处理库，也干脆一步到位，直接选一个支持 ORM 的库。于是，就选择了 SQLAlchemy。用了一段时间后，写个记录来记下这段时间用到的常用的东西。&lt;/p&gt;
&lt;p&gt;SQLAlchemy 是 Python 编程语言下的一款开源软件。提供了 SQL 工具包及对象关系映射（ORM）工具，主要能满足一下的需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供对数据库的常用操作：增删改查&lt;/li&gt;
&lt;li&gt;提供 ORM 功能，可以让操作的单元变为对象，而不用写 sql 语句进行硬编码/解码解析数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据库连接&#34;&gt;数据库连接&lt;/h2&gt;
&lt;p&gt;SQLalchemy 不能支持操作数据库，因而需要安装额外的数据库驱动，对于不同的数据库与驱动，有着不一样的配置 URI，总体格式为&lt;code&gt;dbms://user:pwd@host/dbname&lt;/code&gt;。这里用的 Mysql+mysqlconnector，具体的连接代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

sql_connection = &#39;mysql+mysqlconnector://root:pwd@localhost:3306/database&#39;
engine = create_engine(sql_connection)

# 执行 sql 事务需要使用会话
DBsession = sessionmaker(bind=engine)
session = DBsession()

# 结束前需要关闭 session
session.close()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;结构定义&#34;&gt;结构定义&lt;/h2&gt;
&lt;p&gt;在 SQLalchemy 中，ORM 通过定义对象进行数据库 model 的绑定。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relation, sessionmaker

Base = declarative_base()
 
class Movie(Base):
    __tablename__ = &#39;movies&#39;
 
    id = Column(Integer, primary_key=True)
    title = Column(String(255), nullable=False)
    year = Column(Integer)
    directed_by = Column(Integer)

 
    def __init__(self, title=None, year=None):
        self.title = title
        self.year = year
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;ORM 的 model 类通过继承 declarative_base 进行定义，通过&lt;code&gt;__tablename__&lt;/code&gt;绑定到对应的 table&lt;/li&gt;
&lt;li&gt;每一个 Column 属性为表中的一列，需要设置类型，类型必须要与数据库中列的类型对应，常用类型有 Integer，Float， String（对应 varchar），Text&lt;/li&gt;
&lt;li&gt;必须设置一个属性/列为&lt;code&gt;primary_key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以通过&lt;code&gt;Base.metadata.create_all(engine)&lt;/code&gt;创建 table&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据操作&#34;&gt;数据操作&lt;/h2&gt;
&lt;p&gt;数据使用 ORM 进行操作，操作的基本单位为对象（也可以直接使用 sql 语句，但对于常用操作来说没有必要）。除查询外，对数据库有修改的操作都需要 commit 事务&lt;/p&gt;
&lt;h3 id=&#34;插入&#34;&gt;插入&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;m1 = Movie(&amp;quot;Star Trek&amp;quot;, 2009)
session.add(m1)
session.commit()
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;创建待插入的对象，添加相应的数据属性&lt;/li&gt;
&lt;li&gt;添加进 session 中&lt;/li&gt;
&lt;li&gt;提交 session，提交事务&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;查询&#34;&gt;查询&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;movies = session.query(Movie).all() # 获取所有数据
movie = session.query(Movie).get(movie_id) # 获取单个记录
filter_movie = session.query(Movie).filter(Movie.id == 1).one()
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;查询中 query 的参数为查询的 table/返回的对象&lt;/li&gt;
&lt;li&gt;filter 等于 where 语句，可以对查询结果进行进一步筛选，one 返回唯一行，all 则返回所有行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;更新&#34;&gt;更新&lt;/h3&gt;
&lt;p&gt;查询出来的数据，修改属性后重新提交事务即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;movie = session.query(Movie).get(id)
movie.year = 1999
session.commit()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;删除&#34;&gt;删除&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;movie = session.query(Movie).get(id)
session.delete()
session.commit()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;some-problems&#34;&gt;some problems&lt;/h2&gt;
&lt;h3 id=&#34;大批量数据插入&#34;&gt;大批量数据插入&lt;/h3&gt;
&lt;p&gt;在使用的过程中，遇到一次需要插入三十多万条数据到数据库的情况。在此之前，我一直都是插完数据再一起 commit 的（几千/几百条），因为每次 commit 需要写入数据库，会比较慢（磁盘 IO 制约）。
但这次数量过多的话，提交的时候出现错误，提示 mysql 的连接丢失。估计是写入的时间太多，时间太长超出了其限制，进而断开了连接。于是我选择批量 commit，在添加一定数量数据后提交一次（5000/1000/500/100/10），但是没有成功，插入一定量的记录后，提示某一条插入的记录的某一列过长（尽管我那一列是不限长度的 Text），显然有问题。
上网搜索批量数据插入的方法，但内容基本都是千篇一律，全部都是转载/翻译 StackOverflow 上的一篇 &lt;a href=&#34;https://stackoverflow.com/questions/3659142/bulk-insert-with-sqlalchemy-orm&#34;&gt;回答&lt;/a&gt;。给出了两种方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bulk_save_objects(objects)&lt;/li&gt;
&lt;li&gt;add_all()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都没有效果，最终还是采取了逐条添加并提交的方法，虽然慢了点，但是能 work。&lt;/p&gt;
&lt;p&gt;写这件事只是为了吐槽一下现在用 Google 搜索一些具体的技术问题是，内容严重同质化的现象，大家都抄来抄去，转来转去。像这一次的搜索，最开始的 source 是在 StackOverflow 上的提问，然后有网站翻译成了中文并发布（甚至初创，然后就流传于各个中文网站了，一搜，全是这些内容相同的网页，属实恶心。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Python/">Python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Summary of Automate the Boring Stuff with Python</title>
                <link>https://scottyeung.top/2019/Summary-of-Automate-the-Boring-Stuff-with-Python/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/Summary-of-Automate-the-Boring-Stuff-with-Python/</guid>
                <pubDate>Mon, 04 Nov 2019 16:15:25 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;&lt;a href=&#34;https://automatetheboringstuff.com/#toc&#34;&gt;本书&lt;/a&gt;是为如何用Python进行自动化处理工作以及可以用在哪些方面，面向的人群为想要提高生产力，减少重复劳动的非程序员。&lt;/p&gt;
&lt;p&gt;作为一个未来的程序员，我为什么推荐这本面向非程序员的书呢？在我看来，code是一个工具，既然是一种工具，就应该用于帮助解决问题和满足需求。但实际上，在我们许多的coding相关的学习中，我们并没有考虑why，而是简单粗暴地去学习what，这样学习效率不高，而且最关键的是会有一种不知道有什么用/有没有用的迷茫感，从而丧失继续学习的动力。因此，我推荐这本书，从需求出发，以需求作为目标驱动，告诉你能干什么，而且具体的使用部分也不必按部就班的学习，掌握一定的基础语法后即可根据需求跳转到相关部分。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;本书结构分为三部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开头首先解释了为什么可以用编程提高效率以及为什么选择Python&lt;/li&gt;
&lt;li&gt;Python的学习&lt;/li&gt;
&lt;li&gt;Python在日常生活/工作的具体使用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;鉴于笔者已经学习过Python，故直接跳过前两部分，进行阅读记录。&lt;/p&gt;
&lt;h2 id=&#34;读写文件&#34;&gt;读写文件&lt;/h2&gt;
&lt;h3 id=&#34;文件&#34;&gt;文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;程序运行时，数据可以存储变量中，但若想持久地存储数据，则需存储在文件中&lt;/li&gt;
&lt;li&gt;文件的表示由路径+文件名组成&lt;/li&gt;
&lt;li&gt;Windows系统路径使用\进行分隔 而Linux/Mac使用/，为确保代码能统一运行，可使用&lt;code&gt;os.path.join&lt;/code&gt;进行连接路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.path.getsize&lt;/code&gt;获取文件大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.listdir&lt;/code&gt;获取文件夹内容&lt;/li&gt;
&lt;li&gt;文件按内容可分为文本文件和二进制文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;读写&#34;&gt;读写&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;过程
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;open(path, mode=&#39;r&#39;)&lt;/code&gt;打开文件返回&lt;code&gt;File&lt;/code&gt;对象&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;read&lt;/code&gt;或&lt;code&gt;write&lt;/code&gt;对文件对象进行读写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close&lt;/code&gt;关闭文件对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;文件打开分为读(r)，写(w)，追加(a)&lt;/li&gt;
&lt;li&gt;read以字符串形式返回整个文件内容，readline逐行返回&lt;/li&gt;
&lt;li&gt;可通过&lt;code&gt;shelve&lt;/code&gt;模块进行变量的读取和保存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例&lt;/h3&gt;
&lt;h4 id=&#34;随机生成测试文件&#34;&gt;随机生成测试文件&lt;/h4&gt;
&lt;p&gt;地理老师打算给35个学生出一份关于美国50个州对应的城市的选择题，目标形式为35个测试题文件，35个对应的答案文件，要求是35份选择题不一样，其中题目顺序不一样，选择题选项不一样。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将测试数据以&lt;code&gt;dict&lt;/code&gt;的形式存储在文件中/输入代码中&lt;/li&gt;
&lt;li&gt;创建测试文件和答案文件，并写入首部信息&lt;/li&gt;
&lt;li&gt;随机函数打乱数据给出的州的顺序，选出对应的城市，在给出的城市数据中删去正确答案，随机选出3个作为错误答案&lt;/li&gt;
&lt;li&gt;将3中得到的州以及选项城市写入测试文件和答案文件&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;多重剪贴板&#34;&gt;多重剪贴板&lt;/h4&gt;
&lt;p&gt;当需要多次进行复制粘贴时，下次的复制内容会把上一次的内容给覆盖，这样当需要重复使用复制内容时就很不方便。因此，实现多重剪贴板的功能，可以记录过往的复制内容，便于重复使用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每次运行程序时通过&lt;code&gt;shelve&lt;/code&gt;读取本地的变量数据&lt;/li&gt;
&lt;li&gt;根据输入的参数判断执行的功能&lt;/li&gt;
&lt;li&gt;当需要记录剪贴板时，调用&lt;code&gt;pyperclip.paste&lt;/code&gt;获取当前剪贴板内容，并存至变量&lt;/li&gt;
&lt;li&gt;当需要展示历史剪贴板内容时，将存储的变量列表或单个变量转化为字符串通过&lt;code&gt;pyperclip.copy&lt;/code&gt;复制进剪贴板&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;整理文件&#34;&gt;整理文件&lt;/h2&gt;
&lt;p&gt;批量处理文件，包括遍历，复制，重命名，移动或压缩。主要使用&lt;code&gt;shutil&lt;/code&gt;模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复制：
&lt;ul&gt;
&lt;li&gt;shutil.copy&lt;/li&gt;
&lt;li&gt;shutil.copytree&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移动：
&lt;ul&gt;
&lt;li&gt;shutil.move&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除
&lt;ul&gt;
&lt;li&gt;os.unlink&lt;/li&gt;
&lt;li&gt;os.rmdir 空目录&lt;/li&gt;
&lt;li&gt;os.retree 目录所有&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;遍历 os.walk 返回迭代器关于 current_folder,sub_folders,files&lt;/li&gt;
&lt;li&gt;压缩 zipfile模块&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例-1&#34;&gt;实例&lt;/h3&gt;
&lt;h4 id=&#34;文件名字转换&#34;&gt;文件名字转换&lt;/h4&gt;
&lt;p&gt;将数千个文件的名字中的美式时间
(MM-DD-YYYY)改为欧式时间
 (DD-MM-YYYY)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构造正则表达式用于识别时间&lt;/li&gt;
&lt;li&gt;遍历目录的名字 &lt;code&gt;os.listdir&lt;/code&gt;，并通过正则表达式进行识别，并将其分割&lt;/li&gt;
&lt;li&gt;若满足正则表达式，则通过shutil.move改名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;相关任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;批量文件名字添加前缀&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文件夹压缩&#34;&gt;文件夹压缩&lt;/h4&gt;
&lt;p&gt;将指定文件夹及其下所有文件和文件夹压缩&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;寻找一可用不重复的压缩路径+文件名&lt;/li&gt;
&lt;li&gt;创建压缩文件&lt;/li&gt;
&lt;li&gt;遍历目录，将所有文件和文件夹写入压缩文件&lt;/li&gt;
&lt;li&gt;关闭压缩文件&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;web爬取&#34;&gt;WEB爬取&lt;/h2&gt;
&lt;p&gt;设计模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;webbrowser
&lt;ul&gt;
&lt;li&gt;open 打开网页&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;request
&lt;ul&gt;
&lt;li&gt;get 获取资源&lt;/li&gt;
&lt;li&gt;raise_for_status 判断是否就绪&lt;/li&gt;
&lt;li&gt;iter_content 获取内容的迭代器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Beautiful Soup 解析HTML文档
&lt;ul&gt;
&lt;li&gt;select&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Selenium&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例-2&#34;&gt;实例&lt;/h3&gt;
&lt;h4 id=&#34;批量打开网页&#34;&gt;批量打开网页&lt;/h4&gt;
&lt;p&gt;根据给出的地址批量打开Google Map的网页&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据给出的地址生成URL地址&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;webbrowser.open&lt;/code&gt;打开URL地址的网页&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;搜索关键词&#34;&gt;搜索关键词&lt;/h4&gt;
&lt;p&gt;根据关键词进行google搜索，并将搜索结果的每一个页面打开&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据关键词使用&lt;code&gt;request.get&lt;/code&gt;
请求搜索结果页面&lt;/li&gt;
&lt;li&gt;使用Beautiful Soup解析页面，找出所有搜索结果的超链接&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;webbrowser.open&lt;/code&gt;打开获取的超链接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;类似用途：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开购物页面所有商品的页面&lt;/li&gt;
&lt;li&gt;打开商品的所有评价页面&lt;/li&gt;
&lt;li&gt;获取搜索图片的所有结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;下载网页漫画&#34;&gt;下载网页漫画&lt;/h4&gt;
&lt;p&gt;下载XKCD的漫画，下载完后下载上一页，直至下载完第一页后结束&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取XKCD的网页，抽取漫画部分写入文件&lt;/li&gt;
&lt;li&gt;找到上一页按钮的超链接，并获取上一页的漫画网页&lt;/li&gt;
&lt;li&gt;重复1-2直至找不到上一页按钮&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;操作excel&#34;&gt;操作Excel&lt;/h2&gt;
&lt;p&gt;利用第三方模块&lt;code&gt;openpyxl&lt;/code&gt;，进行excel文件的读写&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;load_workbook&lt;/li&gt;
&lt;li&gt;get_sheet_by_name&lt;/li&gt;
&lt;li&gt;cell(row=1, column=2)&lt;/li&gt;
&lt;li&gt;save&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例-3&#34;&gt;实例&lt;/h3&gt;
&lt;h4 id=&#34;读取excel并统计数据&#34;&gt;读取Excel并统计数据&lt;/h4&gt;
&lt;p&gt;根据Excel文件的数据，进行聚类分析，分别进行聚类计数以及聚类求和。
事实上，Excel本身功能即可完成并且更加简单，故跳过。&lt;/p&gt;
&lt;h4 id=&#34;更新excel文件中指定列&#34;&gt;更新Excel文件中指定列&lt;/h4&gt;
&lt;p&gt;读取Excel文件，遍历每一行，如果该行为指定商品，则修改其价格&lt;/p&gt;
&lt;h2 id=&#34;操作pdf&#34;&gt;操作PDF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;打开PDF文件并提取文本&lt;/li&gt;
&lt;li&gt;PDF文档解密——输入密码&lt;/li&gt;
&lt;li&gt;文档加密&lt;/li&gt;
&lt;li&gt;创建pdf文件，添加页面&lt;/li&gt;
&lt;li&gt;pdf页面合并——添加水印&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例-4&#34;&gt;实例&lt;/h3&gt;
&lt;h4 id=&#34;多个pdf文档指定页面合并&#34;&gt;多个PDF文档指定页面合并&lt;/h4&gt;
&lt;p&gt;选择目录下所有PDF文档的非首页按照字典序合并到一个新的PDF文档中&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取当前目录所有文件名，并取出以.pdf结尾的文件名添加至数组&lt;/li&gt;
&lt;li&gt;数组根据文件名排序&lt;/li&gt;
&lt;li&gt;按顺序打开每一个PDF文档，每一个文档读取从第二页开始读取，添加至新文档&lt;/li&gt;
&lt;li&gt;保存新文档&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;操作csv和json&#34;&gt;操作CSV和JSON&lt;/h2&gt;
&lt;h3 id=&#34;csv&#34;&gt;CSV&lt;/h3&gt;
&lt;p&gt;通过csv模块，可以进行csv的读写。读取类似于一个二维数组，写可以通过write_row写入行。&lt;/p&gt;
&lt;h4 id=&#34;实例-5&#34;&gt;实例&lt;/h4&gt;
&lt;p&gt;读取目录下所有csv文件的数据，去除首部信息&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取目录所有文件名，并进行遍历，非csv文件跳过&lt;/li&gt;
&lt;li&gt;打开csv文件，读取csv数据，跳过第一行，其余的行添加进数组&lt;/li&gt;
&lt;li&gt;将数组中的行以csv方式写入新文件&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;json&#34;&gt;JSON&lt;/h3&gt;
&lt;p&gt;Json为常用的一个数据格式，多用于API之间进行交互，但日常生活中用得比较少。通过json模块，可以将json格式的字符串转成dict。&lt;/p&gt;
&lt;h4 id=&#34;获取实时天气数据&#34;&gt;获取实时天气数据&lt;/h4&gt;
&lt;p&gt;通过网上提过的天气服务接口，获取指定地点的实时天气情况&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过命令行获取地点输入&lt;/li&gt;
&lt;li&gt;将地点作为参数向指定天气服务API发送HTTP请求&lt;/li&gt;
&lt;li&gt;解析返回的json数据，进行输出&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;操作email&#34;&gt;操作Email&lt;/h2&gt;
&lt;h3 id=&#34;实例-6&#34;&gt;实例&lt;/h3&gt;
&lt;p&gt;根据Excel表格中的会员数据情况，给其中尚未支付本月会籍费用的会员发送邮件进行提醒&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开Excel文件读取会员数据，判断最后一列是否为paid，若是，则记录会员名与邮箱地址&lt;/li&gt;
&lt;li&gt;通过模块smtplib登录邮箱，跟根据上一步记录的信息一一发送邮件&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;自动化操作鼠标和键盘&#34;&gt;自动化操作鼠标和键盘&lt;/h2&gt;
&lt;p&gt;通过第三方模块pyautogui实现，可进行图形界面的相关操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制鼠标以指定速度移动&lt;/li&gt;
&lt;li&gt;获取鼠标位置&lt;/li&gt;
&lt;li&gt;鼠标进行交互操作
&lt;ul&gt;
&lt;li&gt;点击&lt;/li&gt;
&lt;li&gt;拖动&lt;/li&gt;
&lt;li&gt;滚动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;截屏&lt;/li&gt;
&lt;li&gt;图像识别&lt;/li&gt;
&lt;li&gt;键盘按下/松开 指定键/组合键&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/">自动化</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Python/">Python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>summary of &lt;斯坦福高效睡眠法&gt;</title>
                <link>https://scottyeung.top/2019/summary-of-%E6%96%AF%E5%9D%A6%E7%A6%8F%E9%AB%98%E6%95%88%E7%9D%A1%E7%9C%A0%E6%B3%95/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/summary-of-%E6%96%AF%E5%9D%A6%E7%A6%8F%E9%AB%98%E6%95%88%E7%9D%A1%E7%9C%A0%E6%B3%95/</guid>
                <pubDate>Mon, 28 Oct 2019 12:06:02 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;睡眠的质比量重要&#34;&gt;睡眠的质比量重要&lt;/h2&gt;
&lt;h3 id=&#34;睡眠的长短&#34;&gt;睡眠的长短&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;睡眠的时间长短由基因决定，过长过短均不好&lt;/li&gt;
&lt;li&gt;睡眠时间过长也没什么用&lt;/li&gt;
&lt;li&gt;睡眠时间过短会导致睡眠债务，会引发
&lt;ul&gt;
&lt;li&gt;肥胖/糖尿病/高血压等等疾病&lt;/li&gt;
&lt;li&gt;突发出现瞬间睡眠：突然走神进入睡眠状态若干秒，非常危险&lt;/li&gt;
&lt;li&gt;影响寿命&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;睡眠债务可以通过延长睡眠时间偿还，在坚持一段时间进行延长睡眠（睡过量的时间）后，睡眠的时间会回归正常，但需要很长时间&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;睡眠的质量&#34;&gt;睡眠的质量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;睡眠分为REM与非REM阶段，后者为深层睡眠&lt;/li&gt;
&lt;li&gt;睡眠的质量取决于入睡后90分钟的非REM阶段&lt;/li&gt;
&lt;li&gt;better than nothing：马上行动改变&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;睡眠的重要性&#34;&gt;睡眠的重要性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;睡眠的作用
&lt;ol&gt;
&lt;li&gt;让大脑和身体休息&lt;/li&gt;
&lt;li&gt;整理记忆&lt;/li&gt;
&lt;li&gt;调节激素平衡&lt;/li&gt;
&lt;li&gt;提高免疫力&lt;/li&gt;
&lt;li&gt;排出大脑废弃物&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;睡眠质量的认知
&lt;ul&gt;
&lt;li&gt;失眠不只是睡的量的问题，更是质的问题&lt;/li&gt;
&lt;li&gt;睡眠障碍（呼吸暂停）——腹式呼吸帮助&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;睡眠法则&#34;&gt;睡眠法则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;困了就睡&lt;/li&gt;
&lt;li&gt;保证睡眠前90分钟的黄金时间
&lt;ul&gt;
&lt;li&gt;尽快入睡进入深层睡眠&lt;/li&gt;
&lt;li&gt;不被打扰&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;体温开关：降低体表温度，缩小体表与体内温差&lt;/li&gt;
&lt;li&gt;大脑开关：创造一个良好的睡眠环境，以营造一个睡眠的仪式感&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;高效睡眠法&#34;&gt;高效睡眠法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;体温开关：营造体温下降这一过程，帮助入睡，具体一般为睡前先提高温度，再自然下降
&lt;ul&gt;
&lt;li&gt;洗澡&lt;/li&gt;
&lt;li&gt;足浴&lt;/li&gt;
&lt;li&gt;调节室温&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;脑部开关：切换到要睡觉的状态，大脑放空
&lt;ul&gt;
&lt;li&gt;单调&lt;/li&gt;
&lt;li&gt;数羊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;睡眠禁区：平常睡觉时间前两小时不想睡觉
&lt;ul&gt;
&lt;li&gt;导致睡眠时间挪前难，一般只能一小时&lt;/li&gt;
&lt;li&gt;需要早起时也不要强行早睡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;清醒战略&#34;&gt;清醒战略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;清醒开关
&lt;ul&gt;
&lt;li&gt;光：光遏制褪黑素 清醒 太阳光&lt;/li&gt;
&lt;li&gt;体温：清醒时体温上升&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;具体战略
&lt;ul&gt;
&lt;li&gt;两个闹钟设在起床时间前后20-40分钟，避开在深度睡眠醒来&lt;/li&gt;
&lt;li&gt;远离睡眠诱惑因素&lt;/li&gt;
&lt;li&gt;光脚&lt;/li&gt;
&lt;li&gt;冷水洗手&lt;/li&gt;
&lt;li&gt;咀嚼&lt;/li&gt;
&lt;li&gt;咖啡因&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%81%A5%E5%BA%B7/">健康</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>如何克服过于在意别人想法的心理</title>
                <link>https://scottyeung.top/2019/%E5%A6%82%E4%BD%95%E5%85%8B%E6%9C%8D%E8%BF%87%E4%BA%8E%E5%9C%A8%E6%84%8F%E5%88%AB%E4%BA%BA%E6%83%B3%E6%B3%95%E7%9A%84%E5%BF%83%E7%90%86/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/%E5%A6%82%E4%BD%95%E5%85%8B%E6%9C%8D%E8%BF%87%E4%BA%8E%E5%9C%A8%E6%84%8F%E5%88%AB%E4%BA%BA%E6%83%B3%E6%B3%95%E7%9A%84%E5%BF%83%E7%90%86/</guid>
                <pubDate>Wed, 23 Oct 2019 09:24:35 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;这几天在分析自己做事情一直很怕被人看见的问题，得出的深层原因为自己很在意别人的想法。事实上，很在意别人想法和评价的这个现象，真的对我有着很多 negative 的影响，例如心里焦虑，对事情无信心等影响，遂将其当作近来需要克服的目标之一。在知乎看到一个很棒的相关回答，进行记录学习之。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;表现&#34;&gt;表现&lt;/h2&gt;
&lt;p&gt;过于在意他人看法的人，往往：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会以别人的评判标准来看待自己，试图以此满足他人期待&lt;/li&gt;
&lt;li&gt;别人的评价对自己情绪影响很大&lt;/li&gt;
&lt;li&gt;不知道也不会表达自己的需求&lt;/li&gt;
&lt;li&gt;一定程度的讨好别人的倾向&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;原因&#34;&gt;原因&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;害怕得罪别人
&lt;ul&gt;
&lt;li&gt;害怕起冲突&lt;/li&gt;
&lt;li&gt;害怕无法满足他人的期待&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自卑&lt;/li&gt;
&lt;li&gt;敏感。心理承受能力差&lt;/li&gt;
&lt;li&gt;将自己与他人对比&lt;/li&gt;
&lt;li&gt;不能接纳自我。我们应该拥有无条件自尊，有条件的自尊只是在用一个找到的标准安慰自己
&lt;ul&gt;
&lt;li&gt;依赖性自尊。依靠别人的评判标准&lt;/li&gt;
&lt;li&gt;独立性自尊。按照自己的标准要求&lt;/li&gt;
&lt;li&gt;无条件自尊。无条件完全接纳和尊重自己&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;试图成为别人&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解决&#34;&gt;解决&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;别人没那么在乎你。
过于在意别人的想法本质上是自己将别人的想法看得太重要，把别人想法的后果看得太重要。因此，我们需要意识到，并没有多少人再关注你，对你有什么看法。不妨换位思考，看看你对他人是否有想法，有想法又能维持多久，他人对你的这个想法又有什么影响。他人的想法是没有任何实质性的影响，即使有，也是因为自己在意而产生影响。所以，我们需要&lt;strong&gt;不在意他人的看法&lt;/strong&gt;，而一个重要的前提是：能够客观地分析自己的行为，有自己正确的看法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;明确自己才是最重要的。
活着本身是为了自己，如果不能够为了自己而活，那么你的一生相当于白过。所以，为了自己而活，我们完全有权利自私，完全可以把自己放在首位。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将自己的需求放在第一位，不必为了成全别人委屈自己。
接上上一条，因为自己是最重要的，顺带自己的需求也是最重要的。很多时候我们会因为外在的很多因素而受到制约，默默忍受。例如有些时候尽管很生气，也不敢表达出来，害怕伤害到别人，伤害到两者之间的关系，只能自己生闷气。但这种制约你行为的枷锁其实是无理的，别人不遵守你遵守，只能是自己吃亏。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要害怕得罪别人。
不要总是充当老好人的角色，一直和和气气顺从别人，害怕得罪别人。要懂得接受这个事实，不会刻意去得罪别人，但也不怕得罪别人，即使无意得罪了别人，也不会担惊受怕，是我错，便承担，无错则置之不理，甚至反抗。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;放弃成为更好的人这种幻想。
我们不必被世俗的要求所约束，好的，坏的都不是重要的，最重要的是，你想要的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;整个社会，整个人类世界都在推崇和鼓励你要去努力，要变得更好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是你开始对自己不满意，你开始讨厌自己，你开始强烈的不能接纳自己。 
于是你开始自我否定，开始去追逐社会规定的那些优秀的定义，开始试图去迎合别人的看法，你因此变得很焦虑，你被对自己的不满和自己驱使着不断地向前走，你以为只要达成那些目标你就能轻松了，你就到达终点了，你就圆满了。 
但是这一刻却始终不能到来，而你却一直被一种焦虑感控制和驱使着，这样你变得越来越着急，你觉得必须尽快到达那个终点，只有到达那个终点，只有变得更优秀了你才能不再这么焦虑，于是这种着急和焦虑会令你变得越来越浮躁，你会发现你离那些目标越来越远。 
而有那么一些人即便是侥幸到达了他所自以为的那个终点，但到达的那一刻他却发现自己好像并没有体会到想象中的那种喜悦和满足，他也并没有放轻松，焦虑与痛苦始终还是如影随形。而他这个时候所体会到的很可能只是一种无边的空虚。&lt;/p&gt;
&lt;h2 id=&#34;行动&#34;&gt;行动&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;记录他人的想法，并且采取相应的行动。
既然在意他人的想法，不妨记录下来，并且逆着他的想法来做，而不是停止做这些事。让自己意识到，他的想法不能改变你的行为。你不想做某件事的理由只有两个：不想做；完成不了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尝试与他人起冲突，并且坚持自己的决定，不被说服。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尝试表达自己的需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自己想要什么/想做什么&lt;/li&gt;
&lt;li&gt;自己的情感&lt;/li&gt;
&lt;li&gt;拒绝别人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%BF%83%E6%80%81/">心态</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>组会谈话启示录（一）</title>
                <link>https://scottyeung.top/2019/%E7%BB%84%E4%BC%9A%E8%B0%88%E8%AF%9D%E5%90%AF%E7%A4%BA%E5%BD%95%E4%B8%80/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/%E7%BB%84%E4%BC%9A%E8%B0%88%E8%AF%9D%E5%90%AF%E7%A4%BA%E5%BD%95%E4%B8%80/</guid>
                <pubDate>Wed, 16 Oct 2019 15:50:35 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;又是组会结束之后的轻松时刻，本次组会由于人数较少，所以谈话内容也比较有针对性，收获颇大，但又由于只是干听，担心会很快忘却，遂打算重新回忆，记录下来，想到啥就写啥，通过输出进行再学习，同时，相信也能给刚踏上科研路的各位带来一点受益。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;about-empirical-study&#34;&gt;About Empirical Study&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;所谓的 empirical study，其实就是对收集到的数据进行分析并 report，关键是提出 Research Question，类似于调查报告&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本流程为进行问题定义，范围局限，收集数据，分析数据，根据分析结果初步得出 RQ/规律/特征，根据 RQ 重新修改/优化数据收集方式，report 并回答 RQ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非常适合新手进行科研入门，可通过此熟悉科研的流程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;即使数据分析没有好的结果，如无规律/相关性，也可如实 report 成文&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;empirical study 虽然简单，但是很重要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;科研入门&lt;/li&gt;
&lt;li&gt;对 assumption 进行验证&lt;/li&gt;
&lt;li&gt;后续的 method/improvement 需基于此&lt;/li&gt;
&lt;li&gt;通过此进行数据收集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虽然重要，但不能止于此&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实质性的东西？（report 有什么用？&lt;/li&gt;
&lt;li&gt;套路类似/方法雷同，难度递减&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how to start？在确定一个方向之后，拿出一张纸，依次写下研究的对象，定义，范围，数据收集/分析的方法/数据集，&lt;strong&gt;RQ&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;about-research&#34;&gt;About Research&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;国外的 PhD 培养方案
&lt;ol&gt;
&lt;li&gt;刚开始写一篇长篇的 survey，借此了解当前该领域的研究背景/问题/方向&lt;/li&gt;
&lt;li&gt;进行 empirical study，收集数据，进行分析&lt;/li&gt;
&lt;li&gt;利用前面的积累（数据，知识），进行 creative 的工作，如 method/solution/improvement 的提出或修改&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;国内的现状则是大多数热衷于在 3 上面，一来就进行 method 上面的工作&lt;/li&gt;
&lt;li&gt;国内博士的毕业情况还是要较好的，一般都能毕业（当然这个完全取决于导师&lt;del&gt;是否恶心&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;最后还是想吹一波现在的导师，真的感觉有一个好导师真是太重要了！&lt;/p&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%A7%91%E7%A0%94/">科研</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/summary/">summary</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%BB%8F%E9%AA%8C/">经验</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Summary of Ultralearning</title>
                <link>https://scottyeung.top/2019/Summary-of-Ultralearning/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/Summary-of-Ultralearning/</guid>
                <pubDate>Tue, 15 Oct 2019 20:51:31 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;本文是来自我非常欣赏的博主Scott Young的新书《Ultralearning》的读后总结，本书主要介绍了ultralearning的相关概念及方法原则。&lt;/p&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;什么是ultraleaning？从单词上面来讲，就是ultra + learning，可以理解为超一般的学习。书中给出的定义为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;strategy&lt;/strong&gt; for acquiring skills and knowneledge that is both &lt;strong&gt;self-directed&lt;/strong&gt; and &lt;strong&gt;intense&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;strategy: 它是一种学习的策略（just a strategy而非必须&lt;/li&gt;
&lt;li&gt;self-directed：自我导向性（自我安排/计划&lt;/li&gt;
&lt;li&gt;intense：强度高的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总体来说，这个更像是一种学习方法观，天赋并非必须（当然有天赋必然会促使效果更好），每个人都能做到，并且通过此能够培养良好的学习方法/习惯/态度/观念&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;principle&#34;&gt;Principle&lt;/h2&gt;
&lt;p&gt;纵观博主所遇到的各个ultralearner，是什么使他们在学习上取得如此成功呢？作者通过众多例子归纳出了具有指导作用的9条Principle，这也是全书的精华所在，解释了ultralearning所关联的重要性因素。&lt;/p&gt;
&lt;h3 id=&#34;1-meta-learning&#34;&gt;1 meta-learning&lt;/h3&gt;
&lt;p&gt;从词根上来说，meta-可理解为元，meta-learning即元学习，类比于数据库中的mete-data，meta-data为描述数据的数据，meta-learning即为学习如何学习。此外，在书中的meta-learning还具有pre-learning的意思，即进行学习前进行的总体安排设计。&lt;/p&gt;
&lt;p&gt;具体内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何高效地进行学习：学习能力的培养
&lt;ul&gt;
&lt;li&gt;分析/搜索/计划&lt;/li&gt;
&lt;li&gt;这个是最为总体也是最重要的内容，通用于所有项目&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所学知识的结构：组成/关系/规律&lt;/li&gt;
&lt;li&gt;学习计划的设计/安排/执行&lt;/li&gt;
&lt;li&gt;过往学习经历吸取经验&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对具体的项目，meta-learning可以通过三个步骤开启&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;why？ 仔细考虑为什么要学习这些内容？可考虑所学的目标是否符合下列因素之一
&lt;ul&gt;
&lt;li&gt;利益/目标。所学的内容能给自身带来利益，如学习某技能能给自身带来提升机会/工资提升；或是能帮助自己达到某个目标，如通过考试/取得学位&lt;/li&gt;
&lt;li&gt;兴趣爱好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;what？ 学习内容如何选择
&lt;ul&gt;
&lt;li&gt;benchmarking。选择一个相近的基准作为自己的基准内容。如想进行CS相关的学习，可以找某些大学的CS学位的培养方案，选择一样的课程进行学习。这些内容可以来自网上/学校/专家/同辈&lt;/li&gt;
&lt;li&gt;emphasize。选择感兴趣/重要的部分进行强化，增加比重&lt;/li&gt;
&lt;li&gt;exclusive。相对不重要/不感兴趣的部分可以排除。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;how？ 进行学习计划的设计，主要考虑以下因素：
&lt;ul&gt;
&lt;li&gt;学习内容选择。这里的内容指的是学习资源&lt;/li&gt;
&lt;li&gt;目标。要学到一个什么程度&lt;/li&gt;
&lt;li&gt;时间安排。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-focus&#34;&gt;2 Focus&lt;/h3&gt;
&lt;p&gt;专注，作为一种非常高效的状态，无论是在学习还是工作中，都是一个非常有用的工具。本章节主要从三个方面来讲专注：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何进入专注的状态？我们需要避免拖延。拖延主要来自于对即将开始需要专注事情的困难或带来的不适的恐惧和厌恶。因此，我们可以通过从事情的easy-part入手，到进入状态后再逐渐切换到困难部分。另外，我们可用采用5分钟原则，根据5分钟原则，无论事情多么困难，在5分钟之内都不会感到想要放弃，在5分钟之后，在通过减轻程度/切换目标来减缓不适感。&lt;/li&gt;
&lt;li&gt;如何保持专注状态？
&lt;ul&gt;
&lt;li&gt;进入[flow状态](&lt;a href=&#34;https://en.wikipedia.org/wiki/Flow_(psychology)&#34;&gt;https://en.wikipedia.org/wiki/Flow_(psychology)&lt;/a&gt;（但不必强求&lt;/li&gt;
&lt;li&gt;避免干扰。
&lt;ul&gt;
&lt;li&gt;环境/任务/mind&lt;/li&gt;
&lt;li&gt;接受杂念，任其发展，观其起落&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;时间。长度足以进入状态，但不能过度致使疲劳而低效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何优化？保持正确/creative while stuck&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了把专注当作一个高效率的工具以外，我们也应当将其当作一种能力来锻炼。这种能力，最好是通过在日常的使用中进行锻炼，习惯专注，尽量专注。当无法专注时，不妨思考一下所处的状况；当无法进入专注时，可以尝试始于微处，从细微的地方入手开始。&lt;/p&gt;
&lt;h3 id=&#34;3-directness&#34;&gt;3 Directness&lt;/h3&gt;
&lt;p&gt;在定义中提到，ultralearning的其中一个特点，就是self-directed，所以很自然地，directness也是一个重要的指导原则。这个原则指导我们，学习需要有明确的导向性，学习的内容最好就是直接指向所需的目标。通俗来讲，就是learn-by-doing。若所学的是一门技能，那便直接上手尝试；若所学是一门用于交流的语言，则直接与他人交谈；而若目标是通过一门考试，则练习题/真题无疑是最好的工具。&lt;/p&gt;
&lt;p&gt;为什么需要直接练习呢？最主要的原因是知识的迁移问题。通常来讲，不同的学习内容具有不用的应用上下文场景，这导致了知识在使用的过程中难以迁移，同一个知识点，在一个场景可能适用，但换一个场景，可能就毫无用处了。这也可以说是知识的局限性。因此，我们最好就是在一开始就面向目标学习。&lt;/p&gt;
&lt;p&gt;这个指导原则说来简单，相信很多人都知道，并且觉得诧异：难道还会有人不是直接学习所需的目标内容吗？确实有。原因有二。一是间接学习大多更为简单，举个例子，像学习外语，本身的目的是为了和他人交流，那最直接的目标不应该是直接用外语和他人交流吗？但事实上，最多人选择的学习外语方法是背单词。原因无他，相比于用外语与他人交流所产生的不适感中，更多人愿意呆在背单词的舒适区中。二则是某些内容难以直接练习，或者找到练习的机会。如同外科医生对于手术的练习，他们基本都不能够通过实际的手术进行练习（这也是不被允许的），缺乏实际的练习机会，只能通过旁观和被指点的方式积累经验。&lt;/p&gt;
&lt;p&gt;面对以上情况，书中给出了几个方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于项目进行学习。拿程序员为例，以做一个程序项目为目标，学一部分，做一部分。&lt;/li&gt;
&lt;li&gt;构造沉浸式环境。语言学习/社区圈子交流&lt;/li&gt;
&lt;li&gt;模拟。&lt;/li&gt;
&lt;li&gt;overkill。到达极端/超出要求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4-drill&#34;&gt;4 Drill&lt;/h3&gt;
&lt;p&gt;钻研。该原则指导我们在学习时应该有所侧重，侧重在明显影响学习速率的地方，例如技能的瓶颈区，最重要的地方，最困难的地方。当克服了这些部分，总体能有很大的提升。这个也算是一个比较显而易见的原则，我们的认知能力往往有所局限，无法兼顾所有部分，因而需要有所侧重地学习。钻研步骤可分成两步：首先需要寻找值得钻研的部分，我们可以通过分解与实验的方法找出最为重要/最为影响速率的部分；接着就是设计钻研的方案，有以下5个方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;时间片段练习。当所学习的内容能够按照时间划分成一个个片段，如某些技能（篮球的上篮动作），划分后重点练习某些片段。&lt;/li&gt;
&lt;li&gt;认知资源偏重。如语言学习侧重在听说读写某一个方面。&lt;/li&gt;
&lt;li&gt;复制。当只想练习某内容的其中一部分而另外部分仍需要完成时，可以复制他人的其它部分，自己只亲自动手，完成钻研部分。&lt;/li&gt;
&lt;li&gt;放大镜。放大想重点钻研的部分的比重，增大投入的时间/精力。&lt;/li&gt;
&lt;li&gt;前置学习。钻研部分的前置部分也好好学习。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个原则也与上一个原则——Directness对应上了，对于学习内容选择，我们先采用Directness选择了内容的总体，再进行分解，选择Drill部分，进行钻研，最后再组合起来。&lt;/p&gt;
&lt;h3 id=&#34;5-retrieval&#34;&gt;5 Retrieval&lt;/h3&gt;
&lt;p&gt;对于复习来说，相对于被动的阅读进行复习，抛开书本进行主动的回忆效果要好上很多。通过主动的回忆，我们可以对自己进行知识的测试，并且加深对所学知识的记忆和印象。大概的解释有三个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;知识迁移。&lt;/li&gt;
&lt;li&gt;反馈。&lt;/li&gt;
&lt;li&gt;JOL(Judgement of Learning)。人们对自身学习情况难以正确地感知，判断自己学得怎么样了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至于如何练习这种主动的复习方法，书中给出以下途径：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记忆卡片。&lt;/li&gt;
&lt;li&gt;自由回忆。&lt;/li&gt;
&lt;li&gt;以提问形式。&lt;/li&gt;
&lt;li&gt;以挑战形式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，书本还给出了若干相关的实验数据，告知我们主动回忆效果的一些因素，分别是：开始时间，不需要准备好才开始，时间太晚，知识容易忘却，时间太短，不如被动方法；难度，越难的内容，效果比被动方法更好&lt;/p&gt;
&lt;h3 id=&#34;6-feedback&#34;&gt;6 Feedback&lt;/h3&gt;
&lt;p&gt;学习过程中，需要适当地接受反馈。尽管接收反馈有时会让人感到不安与恐惧，但好的反馈能够给我们提供许多信息，包括表现评价，问题所在，改进建议，这些信息能够帮助我们更好地改进下一步的学习计划。&lt;/p&gt;
&lt;p&gt;什么是好的反馈？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;能够提供有用的信息&lt;/li&gt;
&lt;li&gt;正确的信息&lt;/li&gt;
&lt;li&gt;能够被正确地接收，并能引起回应&lt;/li&gt;
&lt;li&gt;有促进作用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;反馈的种类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;结果型反馈。只提供一个整体的结果，如成绩/评分&lt;/li&gt;
&lt;li&gt;信息型反馈。提供了问题的定位&lt;/li&gt;
&lt;li&gt;校正型反馈。提供了修改建议&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如何合理接收反馈/提高反馈的质量？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;忽略噪声&lt;/li&gt;
&lt;li&gt;使结果不可预测（可通过提高难度实现&lt;/li&gt;
&lt;li&gt;除了学习内容本身外，接受meta-learning的反馈（计划，日程安排，资源选择&lt;/li&gt;
&lt;li&gt;营造一个高强度或沉浸式的环境&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;7-retention&#34;&gt;7 Retention&lt;/h3&gt;
&lt;p&gt;记忆在学习中也是一个很重要的部分，知识概念需要记忆，技能步骤也需要记忆，然而保持长久良好的记忆不是一个容易的事，原因在于每个人都无法避免的因素——遗忘。&lt;/p&gt;
&lt;p&gt;遗忘主要有三个原因&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;时间侵蚀记忆。时间越久，记忆越难以保存&lt;/li&gt;
&lt;li&gt;记忆间干扰。新增记忆取代/冲突/混淆了旧记忆&lt;/li&gt;
&lt;li&gt;记忆不可访问。虽然内容还记得，但找不到触发记忆的路径/因素&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，针对遗忘的原因，可以通过一些技巧来减少遗忘&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;间距记忆。通过划分时间段和知识进行记忆，每次记忆部分，并时常进行重复。日常使用单词卡为一个典型的例子&lt;/li&gt;
&lt;li&gt;步骤记忆。相对于纸面上的知识，需要实际动手的技能更难以忘却&lt;/li&gt;
&lt;li&gt;over-learning。学多一点，学深一点&lt;/li&gt;
&lt;li&gt;记忆术。通过专门的记忆方法进行记忆，如关键词法，联想法。但具有一定局限性，如适用范围较窄，回忆较费力&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8-intuition&#34;&gt;8 Intuition&lt;/h3&gt;
&lt;p&gt;通过学习建立相关的直觉。所谓的直觉，可以理解为对于所遇到问题，能进行自动归纳分类，遇到新的问题时，能够自发地对问题进行分解/抓取核心/组合/联系，并且得出问题解决的范式。其中，对于概念，我们需要理解；对于问题，我们需要大量积累，并通过练习，总结，得出通用的解决模式。&lt;/p&gt;
&lt;p&gt;帮助建立学习中的直觉方法有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;增加难度。难度较大时更易于钻研。&lt;/li&gt;
&lt;li&gt;通过证明来理解概念。&lt;/li&gt;
&lt;li&gt;具体例子帮助理解与记忆。&lt;/li&gt;
&lt;li&gt;多提问。dump问题也不应该避开。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外，我们还可以通过费曼技巧，帮助我们更好地理解/掌握。费曼技巧的核心，在于迫使自己以解释/教授的方式，进行知识的加工输出，一方面可以帮助自己更好地学习，另一方面也可检测自身的学习情况。具体的步骤为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择一个概念/问题&lt;/li&gt;
&lt;li&gt;对于概念，尝试以通俗的语言像一个没有基础的人讲解，并能够使其明白&lt;/li&gt;
&lt;li&gt;对于问题，独立形成一个可行的解决方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;9-experimentation&#34;&gt;9 Experimentation&lt;/h3&gt;
&lt;p&gt;多做试验，ultralearning的过程是一个探索的过程，永远没有一个完全正确的方案，只有只为适合自己当前的方案，所以必须靠我们通过试验进行探索，验证哪个更好，更适合。具体试验的内容包括：资源，技巧，风格，已经水平层次。在学习的过程中，我们也需要一直保持着这种实验的心态，带着一种可成长的思维模式，而非一成不变的定式。&lt;/p&gt;
&lt;p&gt;以下为一些在试验上面有所帮助的技巧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copy and create。最开始可以照搬他人的学习方案，并且根据自身情况适度修改&lt;/li&gt;
&lt;li&gt;对比。不同方法/资源/条件/技巧的比较&lt;/li&gt;
&lt;li&gt;添加新约束&lt;/li&gt;
&lt;li&gt;混合&lt;/li&gt;
&lt;li&gt;极端&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-to-start-a-ultralearning-project&#34;&gt;How to Start a Ultralearning Project&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Research 搜集相关信息进行meta-learning
&lt;ul&gt;
&lt;li&gt;将要学的目标领域及其范围&lt;/li&gt;
&lt;li&gt;将要使用的资源&lt;/li&gt;
&lt;li&gt;他人成功学习的方法规范标准借鉴&lt;/li&gt;
&lt;li&gt;直接练习的活动&lt;/li&gt;
&lt;li&gt;备份的学习资源及钻研部分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计划时间 取决于自身时间安排/所学的预期程度/空闲时间等因素
&lt;ul&gt;
&lt;li&gt;计划投入多少时间&lt;/li&gt;
&lt;li&gt;计划投入什么时候的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;执行计划 在执行计划时时常用上述的指导原则向自己提问是否符合，并进行调整/优化&lt;/li&gt;
&lt;li&gt;检查结果 分析计划及其结果，吸取经验&lt;/li&gt;
&lt;li&gt;维持学习结果/进一步学习 为了不至于遗弃学习成果
&lt;ul&gt;
&lt;li&gt;定期复习&lt;/li&gt;
&lt;li&gt;重新学习&lt;/li&gt;
&lt;li&gt;进一步学习&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ultralearnner的培养&#34;&gt;ultralearnner的培养&lt;/h2&gt;
&lt;p&gt;本部分通过介绍波尔加三姐妹的例子来说明如何培养ultralearner。
因为暂时没有人要培养的缘故，所以没什么兴趣，遂只是简单地略读摘录了相关重点记录保存。&lt;/p&gt;
&lt;h3 id=&#34;raise&#34;&gt;Raise&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;早开始。越早开始越好，儿童时大脑功能更好更适宜学习。&lt;/li&gt;
&lt;li&gt;专注。可以有多种学习内容，但需有一个侧重点，并专注于侧重点。&lt;/li&gt;
&lt;li&gt;寓教于玩。将学习/练习转化成游戏，增添兴趣与持久性。&lt;/li&gt;
&lt;li&gt;正向强化。通过胜利、鼓励等方式给予正向强化。&lt;/li&gt;
&lt;li&gt;拒绝强迫。强迫学习无用，需要引导进行学习。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;suggestion&#34;&gt;Suggestion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Inspiring Goal&lt;/li&gt;
&lt;li&gt;Be Careful with competition&lt;/li&gt;
&lt;li&gt;Make Learning a Priority&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%AD%A6%E4%B9%A0/">学习</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>保研之路</title>
                <link>https://scottyeung.top/2019/%E4%BF%9D%E7%A0%94%E4%B9%8B%E8%B7%AF/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/%E4%BF%9D%E7%A0%94%E4%B9%8B%E8%B7%AF/</guid>
                <pubDate>Tue, 01 Oct 2019 16:38:20 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;在国庆前夕，保研的事情尘埃落定，最终被南大计科录取，将进入软件质量研究所，内心的失学焦虑才得以缓解大部分。在国家推免系统接受拟录取的时候，我与绝大多数保研党一样，内心异常兴奋，而到了第二天之后，这种兴奋已经变成了平静以及后续事情的焦虑。为了以后不至于忘却这一件重大的事，遂打算写下一篇流水账来回顾一下这段保研的历程，抒发一下相关的情感，另外也可作为后来人的一点经验和参考。大家可以当作故事来看看（主要是给自己看看），不想看的可以跳到最后看看经验。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;img src=&#34;https://scottyeung.top/posts/p1.JPG&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;开始阶段&#34;&gt;开始阶段&lt;/h2&gt;
&lt;p&gt;最初诞生保研的想法是在大二上学期，那个时候我的一个同高中的直系学长刚好要保研到中科院软件所，在和他交谈时，我第一次接触到了保研这个概念，在此之前，我一直都是抱着早点跑去实习搬砖赚钱的想法的。后来我看到了学院的推免名单和细则出来后，我看好像主要还是看 GPA，那些加分都比较无关紧要（在国软的细则里，一个奖项可能就加零点零零几或者零点几，还要在乘以一个百分之十，真的算是无关紧要）。结合我当时的绩点，以及刚进行的奖学金评比看到的成绩排名，觉得还是挺稳的，当时甚至还会时不时地幻想保研到哪个学校。不过还是没有下定很大的决心，内心还是想着就业的。&lt;/p&gt;
&lt;p&gt;在这种背景下，似乎保研也不需要付出额外的力气来准备，继续保持当时的状态，继续好好学习，保持绩点就行了，同时，根据细则的要求，只看必修课的绩点，我还可以集中精力在必修课，可以减少在一些选修课的投入精力和时间。&lt;/p&gt;
&lt;h2 id=&#34;突生变化&#34;&gt;突生变化&lt;/h2&gt;
&lt;p&gt;在大二下学期的时候，发生了一件挺突然的事情：我们学院（国际软件学院）和计算机学院合并了。在上学期的时候，部分老师就在有意无意的放出风声，但是就是没有人给出一个确定的说法，我们也只是当一个谣言对待，然后最后就真合并了，而且最后也没有给出一个官方的说法。每次提起这件事，我的内心其实都有点不爽，不过结合在计院待的这一年来说，计院的行政也就是这样，无从吐槽。&lt;/p&gt;
&lt;p&gt;合并之后对保研有什么影响呢？首先推免细则变了，可能会按照计院的来执行；其次推免的名额可能会有变化；最后，换了一批行政人员，很可能使材料和申请等相关事情变麻烦。当时我还挺天真的，心里想着改革不会也不应该影响到当前的学生。现在回看，当真是 naive，&lt;del&gt;学校改革哪管学生死活&lt;/del&gt;。抱着这种想法，我对保研的准备还是没什么变化，好好学习，好好准备必修课的考试，继续保持高绩点。&lt;/p&gt;
&lt;p&gt;同时，在这一年了为了锻炼代码能力，尝试加入实验室/找老师做项目，但因为自身原因或老师原因，两次都无疾而终，甚至让我对实验室留下了一种不好的印象，对实验室有所抗拒，这导致了我在暑期实训时没有找老师进实验室，而选择跟学校实训。回顾这几次过程，大致可得出几个教训：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;机会是需要靠自己主动争取的。上面提到的几次机会都是我偶然看到的消息才去找的，这导致了可选择的选项不多，并且 quit 了之后就无事可做。&lt;/li&gt;
&lt;li&gt;驱使你做选择的因素不应该是有无机会，更应该看机会是否适合，是否好。&lt;/li&gt;
&lt;li&gt;好老师 / 好实验室的影响很大，同理如果不好，影响也很大。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;关键阶段&#34;&gt;关键阶段&lt;/h2&gt;
&lt;p&gt;进入大三之后，距离保研的夏令营就只剩不到一年时间，上学期可谓是关键阶段。在上学期，我把能修的课都修满了，提前就修完了专选课和公选课（但到了下学期还是有点担心部分学分有问题而再修了额外的课）。那段时间可以说是最忙的时候了，几乎是满课，有时真的下午下课吃完饭后回到宿舍顶不住，需要先睡上一觉，晚上再去上课，哪怕只有二三十分钟。另外，为了丰富科研经历，我主动发了邮件给老师说要进实验室，那段经历也是挺可怕的，在此期间，我得了组会恐惧症，每次组会开始前我内心都很焦虑，一方面没做什么，而另一方面又要想怎么回复，导致每次组会结束后，我几乎都会去大吃大喝，缓解压力，最终也没有任何产出/收获。&lt;/p&gt;
&lt;p&gt;另外，15 级新的保研细则也出了，成绩计算还是只算必修课，但是变成了相对赋分，加分也是，且增加了很多的加分项（如班干部任职，CCF 认证等）。看到这个新的细则，内心有点慌，因为还没有任何加分，而在相对赋分的情况下，可以拉很多分（如绩点 3.6+ 凭借加分第一名， 3.5+ 第二名），但另一方面，保研名额似乎也变多了，最低裸绩点 3.4 都保上了。&lt;/p&gt;
&lt;p&gt;最终，在大三上学期，除了把课程几乎修完以外，几乎没有任何收获。绩点也因为 nc 的暑期实训拉低了 0.1，科研方面也没有任何产出，且没有后续了。&lt;/p&gt;
&lt;h2 id=&#34;最后冲刺&#34;&gt;最后冲刺&lt;/h2&gt;
&lt;p&gt;到了大三下，课程基本不多，一周其实就两三天课，可谓是全力备战保研的时候了。在这个学期我因为担忧没有保研加分拿不到推免资格（其实是多余的焦虑），所以选择刷点加分。我选择的是 CCF 和全国大学生英语竞赛。前者我第一次近乎裸考就拿了 270 分，而 300 分就可以有加分。后者则是获奖比例高达 80%。然而，前者出乎意料地翻车 (&lt;a href=&#34;http://scottyeung.top/2019/CCF-201903/&#34;&gt;CCF-201903&lt;/a&gt;)，后者则是在准备的时候就觉得自己已经没有希望了（虽然比例高，但基数小，参加的人都太厉害了），最终也没有拿到任何加分。&lt;/p&gt;
&lt;p&gt;除了准备加分，我还在准备专业课知识的复习。专业课知识大体分为两部分，一部分是比较硬的，看重能力的，如数学，算法，这些需要的时间比较长，不太能速成；另一部分则是偏概念，偏背诵的。这个学期开始，我就在学堂在线刷数据结构和线性代数，并在五月底前完成。进入五月，开始收集各个学校的夏令营消息并准备相应的材料。六月份确定参加的夏令营后则根据网上查询到的信息进行针对性的准备与学习，最终只参加了本校和南大计科的夏令营，北航和南大软院也进了，因为冲突而拒了，而七月中的时候收到了中科院软件所软件中心的面试通知，也因为南大计科已经过了而没去。本校夏令营没做什么准备就拿到了比较靠前的优秀营员名额，而南大夏令营相关情况 &lt;a href=&#34;http://scottyeung.top/2019/%E8%AE%B02019%E5%8D%97%E4%BA%AC%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E5%A4%8F%E4%BB%A4%E8%90%A5/&#34;&gt;可点此查看&lt;/a&gt;，开放日结束过几天就被老师告知考核通过，可录学硕。&lt;/p&gt;
&lt;h2 id=&#34;最终结果&#34;&gt;最终结果&lt;/h2&gt;
&lt;p&gt;开放日结束后，还需要回学校搬砖，做一个微信小程序，不知道什么时候能走。但因为手里已经拿到一个比较满意的 offer，内心也已经放轻松了，就没有做后续的准备，包括软件所的考核以及九推的准备。唯一有点烦的，就是这个实训不知道什么时候结束，组员都不想做，但是又还没出分，不敢造次，担心影响到 GPA。最终这个工作一直持续到开学，幸好给分还行。&lt;/p&gt;
&lt;p&gt;开学第一周周五就进行推免申请工作，最终没有任何加分，GPA 3.85+，排名 11，然后今年形势也非常有趣，科研加分最高也才 13 分，导致 3 分加分就大于 0.1 绩点，就等于当一年班干部就涨了 0.1 绩点，反正我也不准备九推，其实与我无关。我最终的综排 18，也算还行，然后今年的名额暴涨，最低好像裸绩点 3.4+ 也保上研了。所以前面的焦虑好像是多余的？&lt;/p&gt;
&lt;h2 id=&#34;经验教训&#34;&gt;经验教训&lt;/h2&gt;
&lt;p&gt;前面说了如此多无聊的流水账，下面就说一点有用的干货弥补一下吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成绩很重要。某个学长说过，成绩决定下限，从我本人的申请情况以及推免名额的获取情况来看，的确如此。部分学校筛人直接就根据排名筛掉，没有成绩直接就没有后续，除非你其它方面（科研/竞赛）特别强，我去体检的时候碰到一个弘毅班的老哥就说他一开始就因为排名被南大计科筛了。&lt;/li&gt;
&lt;li&gt;科研/竞赛要有但不用多。有奖项或论文产出固然是好，但没有也不要紧，因为有的只是少数人，但相关的经历还是需要有的，这在面试中可是一个回答利器，一方面可能面试官会直接发问，另一方面，也可以通过这些经历展示你的相关技能，研究能力和研究兴趣。这些经历可以通过进入实验室获得。&lt;/li&gt;
&lt;li&gt;尽早研究推免细则，寻找加分机会。很多的加分其实获得难度是很低的，如软考，CCF 或是当班干部，这些不仅难度不高，而且需要时间也不长，另外，参加竞赛或者大创，这就需要早一点准备了，但其实也不算难。像大创，找对老师指导就保底一个校级大创了。&lt;/li&gt;
&lt;li&gt;做好信息收集。信息收集非常重要，保研不同于高考，每个人考完根据分数排名投志愿就录取了。信息的收集影响到你学校院系的选择，考核内容的准备，实验室导师的选择。&lt;/li&gt;
&lt;li&gt;做好自身实力定位，不妄自菲薄。所谓的实力定位，主要是看自己的成绩，看自己在哪一档，然后根据此可以选择同档次学校或高一档的学校。要记住机会总是有可能有的，不妨海投试试。&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%BB%8F%E5%8E%86%E5%9B%9E%E9%A1%BE/">经历回顾</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>云计算与软件工程</title>
                <link>https://scottyeung.top/2019/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%B8%8E%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%B8%8E%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</guid>
                <pubDate>Thu, 08 Aug 2019 12:23:26 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;想找点云计算的网课来看看，无意中发现了这个不错的mooc：&lt;a href=&#34;http://www.xuetangx.com/courses/course-v1:BerkeleyX+CS169_1X+sp/about&#34;&gt;CS169.1X 云计算与软件工程&lt;/a&gt;。内容涵盖云计算概念，软件工程的相关理念，以及如何通过云计算满足软件工程的需求。遂打算深入学习一下，并做了如下笔记（持续更新）。&lt;/p&gt;
&lt;p&gt;如课程所讲，软件工程是一个需要终身学习的概念，这其实更应该是一个程序员的核心技能，但往往我们都对此忽视，往往注重于单一的技能的术，而忽视最根本的道，即使是软件工程专业课，也只是沦为简单的概念背诵。希望可以通过这个课程，这个笔记，时刻提醒自己勿忘核心。&lt;/p&gt;
&lt;h2 id=&#34;软件工程概论&#34;&gt;软件工程概论&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SaaS: 软件即服务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无需担心安装/环境配置&lt;/li&gt;
&lt;li&gt;无需担心数据丢失&lt;/li&gt;
&lt;li&gt;易于协作同样数据&lt;/li&gt;
&lt;li&gt;中心化数据&lt;/li&gt;
&lt;li&gt;统一硬件系统环境：兼容性&lt;/li&gt;
&lt;li&gt;易于更新：中心化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SOA：面向服务架构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统由能提供服务的独立模块组成，每个模块通过接口提供服务，模块间通过接口进行通信&lt;/li&gt;
&lt;li&gt;设计时最先设计接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SaaS‘s Demand On infrastructure&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Communication: 服务可交互&lt;/li&gt;
&lt;li&gt;Scalability：可扩展性（增加规模服务
&lt;ul&gt;
&lt;li&gt;集群&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dependability：可靠性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件质量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;遗留代码：遗留的功能可用的代码，质量差 不算失败&lt;/li&gt;
&lt;li&gt;质量标准：可用/易于开发调试修改&lt;/li&gt;
&lt;li&gt;测试
&lt;ul&gt;
&lt;li&gt;检验与确认：do the thing right and do the right thing&lt;/li&gt;
&lt;li&gt;黑盒测试与白盒测试&lt;/li&gt;
&lt;li&gt;单元/模块/集成/系统测试&lt;/li&gt;
&lt;li&gt;回归测试：测试修改部分&lt;/li&gt;
&lt;li&gt;测试覆盖率：覆盖率高不等于测试好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生产力因素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码简洁
&lt;ul&gt;
&lt;li&gt;代码简短易于阅读&lt;/li&gt;
&lt;li&gt;抽象等级高：高级语言&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码合成
&lt;ul&gt;
&lt;li&gt;code by example&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;复用
&lt;ul&gt;
&lt;li&gt;复用函数&lt;/li&gt;
&lt;li&gt;标准库&lt;/li&gt;
&lt;li&gt;对象/类&lt;/li&gt;
&lt;li&gt;设计模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自动化工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发过程&#34;&gt;开发过程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;plan-and-document&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;瀑布模型&lt;/li&gt;
&lt;li&gt;螺旋模型&lt;/li&gt;
&lt;li&gt;RUP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要强大的PM&lt;/li&gt;
&lt;li&gt;沟通成本&lt;/li&gt;
&lt;li&gt;文档驱动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;敏捷开发&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;四大宣言：个体协作/能用的软件/客户沟通/拥抱变化&lt;/li&gt;
&lt;li&gt;极端编程：如果某个事是好的，则做到极致/最大化&lt;/li&gt;
&lt;li&gt;测试驱动开发&lt;/li&gt;
&lt;li&gt;行为驱动设计&lt;/li&gt;
&lt;li&gt;Scrum开发
&lt;ul&gt;
&lt;li&gt;team size&lt;/li&gt;
&lt;li&gt;role：master PO&lt;/li&gt;
&lt;li&gt;3个问题&lt;/li&gt;
&lt;li&gt;解决冲突&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结对编程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;driver&lt;/li&gt;
&lt;li&gt;observer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ruby&#34;&gt;Ruby&lt;/h2&gt;
&lt;p&gt;课程的核心内容为利用Rails on Ruby搭建SaaS服务，所以Ruby也是一个重点。因为个人而言，编程语言最好的学习方法还是动手去做，因而就没有记录笔记了。下面为一些可能会用到的链接和个人的一些见解。&lt;/p&gt;
&lt;h3 id=&#34;语言特点&#34;&gt;语言特点&lt;/h3&gt;
&lt;p&gt;列举比较特别印象深刻的或者是其它没有的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;究极面向对象：一切变量皆对象，一切函数皆方法&lt;/li&gt;
&lt;li&gt;诗歌式编程：因为调用均方法=&amp;gt;可省略括号=&amp;gt;像语句一样&lt;/li&gt;
&lt;li&gt;字符串/正则良好支持&lt;/li&gt;
&lt;li&gt;元编程与反射：
&lt;ul&gt;
&lt;li&gt;元编程：编写代码的代码&lt;/li&gt;
&lt;li&gt;反射：运行时动态获取对象属性方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method_missing&lt;/code&gt;当方法在类中未定义时，进入该方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数式编程&lt;/li&gt;
&lt;li&gt;duck-typing:  能响应相同方法的被视作相同的类
&lt;ul&gt;
&lt;li&gt;Module：为实现特定方法的实例提供相应的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相关链接&#34;&gt;相关链接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.runoob.com/ruby/ruby-tutorial.html&#34;&gt;Ruby学习 菜鸟教程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;课程编程作业&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;&#34;&gt;环境配置（待填坑&lt;/a&gt; : 大坑！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官方建议使用云端cloud9框架的IDE服务已被收归AWS并且停止原服务，使用还得绑定信用卡&lt;/li&gt;
&lt;li&gt;本地自行搭建的cloud9服务也无法按照官方仓库wiki配置方法进行配置&lt;/li&gt;
&lt;li&gt;文档没有写清楚最重要的Ruby版本要求以及相关package的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yeung66/hw-ruby-intro&#34;&gt;hw-ruby-intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bdd和tdd&#34;&gt;BDD和TDD&lt;/h2&gt;
&lt;h3 id=&#34;bdd行为驱动设计&#34;&gt;BDD：行为驱动设计&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;User Story：
&lt;ul&gt;
&lt;li&gt;As role&lt;/li&gt;
&lt;li&gt;to do what&lt;/li&gt;
&lt;li&gt;So that achieve&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;评价准则：SMART
&lt;ul&gt;
&lt;li&gt;Specific &amp;amp; Measurable：场景具体且易于测量/评价&lt;/li&gt;
&lt;li&gt;Achievable：1轮迭代可实现&lt;/li&gt;
&lt;li&gt;Relevant：具有实现价值&lt;/li&gt;
&lt;li&gt;Timeboxed：具有时间界限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;流程：与用户交互生产user story card，并将其添加到待办项。根据优先级与难度选取用户故事进行实现&lt;/li&gt;
&lt;li&gt;任务点数评价用户故事的难度，通常投票决定&lt;/li&gt;
&lt;li&gt;使用Tracker可以追踪用户故事完成情况及开发速率&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tdd-测试驱动开发&#34;&gt;TDD： 测试驱动开发&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FIRST原则：针对单元测试
&lt;ul&gt;
&lt;li&gt;Fast&lt;/li&gt;
&lt;li&gt;Independent&lt;/li&gt;
&lt;li&gt;Repeatable&lt;/li&gt;
&lt;li&gt;Self-Checking&lt;/li&gt;
&lt;li&gt;Timely&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RSpec&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;saas应用结构&#34;&gt;SaaS应用结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C/S结构&lt;/li&gt;
&lt;li&gt;3层结构
&lt;ul&gt;
&lt;li&gt;Web Server&lt;/li&gt;
&lt;li&gt;App Server&lt;/li&gt;
&lt;li&gt;Database
&lt;ul&gt;
&lt;li&gt;ActiveRecord：model自己知道如何CRUD&lt;/li&gt;
&lt;li&gt;DataMapper：通过mapper进行对象与数据库记录的映射&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MVC
&lt;ul&gt;
&lt;li&gt;view： template view | transform view&lt;/li&gt;
&lt;li&gt;陷阱：fat controller/view&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RESTful&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rails&#34;&gt;Rails&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MVC
&lt;ul&gt;
&lt;li&gt;Model：ActionRecord&lt;/li&gt;
&lt;li&gt;Controller：通过router转发到控制器&lt;/li&gt;
&lt;li&gt;View：haml&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;约定优于配置：符合约定不需配置文件，仅在不符合约定时配置文件&lt;/li&gt;
&lt;li&gt;调试：RASP
&lt;ul&gt;
&lt;li&gt;print&lt;/li&gt;
&lt;li&gt;log&lt;/li&gt;
&lt;li&gt;interactive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;敏捷开发&#34;&gt;敏捷开发&lt;/h2&gt;
&lt;h3 id=&#34;质量度量&#34;&gt;质量度量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Code Smells&lt;/li&gt;
&lt;li&gt;SOFA原则
&lt;ul&gt;
&lt;li&gt;Short&lt;/li&gt;
&lt;li&gt;One：代码只做一件事&lt;/li&gt;
&lt;li&gt;Few Arguments&lt;/li&gt;
&lt;li&gt;Abstract：抽象在同一等级&lt;/li&gt;
&lt;li&gt;Reek工具可分析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ABC评分：变量，分支，条件数量
&lt;ul&gt;
&lt;li&gt;通过flog评分，超过20有问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过路径数量评分&lt;/li&gt;
&lt;/ul&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/">软件工程</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/">云计算</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>记2019南京大学计算机系开放日</title>
                <link>https://scottyeung.top/2019/%E8%AE%B02019%E5%8D%97%E4%BA%AC%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E5%A4%8F%E4%BB%A4%E8%90%A5/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/%E8%AE%B02019%E5%8D%97%E4%BA%AC%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E5%A4%8F%E4%BB%A4%E8%90%A5/</guid>
                <pubDate>Fri, 26 Jul 2019 10:45:34 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;因为没有找到曾经参加南大计算机系夏令营的学长学姐（好像也没有去找过），参加夏令营前的准备基本都是靠着网上搜到的各种资料，通过看他人的经历与记录，了解夏令营相关考核的内容和侧重点，从而作出针对性的准备。说实话，从前人的博客记录中，我感到获益良多，在参加夏令营时，就想着也要记录一下，留作后人参考，这也可算是一种传承吧。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;前期准备&#34;&gt;前期准备&lt;/h2&gt;
&lt;p&gt;因为早早抱着保研的想法，在学期中段就有这复习专业课的计划了，大致复习了如下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据结构（非常重要&lt;/li&gt;
&lt;li&gt;离散数学&lt;/li&gt;
&lt;li&gt;线性代数&lt;/li&gt;
&lt;li&gt;概率论&lt;/li&gt;
&lt;li&gt;操作系统&lt;/li&gt;
&lt;li&gt;计组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于南大计算机系夏令营的准备，其实开始得比较晚，因为之前海投了挺多夏令营，而计算机系的开放日时间刚好夹在一堆夏令营之间，时间相冲，一开始是抱着放弃南大计算机系的夏令营的想法，然而其它夏令营要么没进，要么出得很晚，最终还是选择了南大计科。&lt;/p&gt;
&lt;p&gt;南大的准备主要还是准备算法方面的机试，在六月份的时候把刘汝佳的&lt;a href=&#34;https://book.douban.com/subject/25902102/&#34;&gt;紫书&lt;/a&gt;过了一遍，并且在voj上把部分的题刷了一下（时间太短刷的其实不多），题单可以&lt;a href=&#34;https://vjudge.net/article/45&#34;&gt;看此&lt;/a&gt;。另外，在看完书后，每天都上voj找一两道题练练手感，主要是 dp 和 dfs 的题。根据往年的题目来看，题目难度大概在 LeetCode 中等，当然也有直接 POJ 的原题，如果时间充足找个题单把 POJ 刷刷还是不错的。&lt;/p&gt;
&lt;p&gt;面试的准备，则是参营前几天随便准备了自我介绍，项目经历，兴趣爱好等面试常问话题，当时时间紧，其实都还没准备完，还想着机试完后再准备。&lt;/p&gt;
&lt;h2 id=&#34;流程&#34;&gt;流程&lt;/h2&gt;
&lt;p&gt;开放日活动共三天&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上午报到，下午机试&lt;/li&gt;
&lt;li&gt;面试。分成上下午两批，每批大概十个组，每组十多人&lt;/li&gt;
&lt;li&gt;介绍参观+与老师交流&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实就主要三个活动：机试，面试，找导师签字。&lt;/p&gt;
&lt;h3 id=&#34;机试&#34;&gt;机试&lt;/h3&gt;
&lt;p&gt;机试的形式是 OJ 形式，两个小时，三道题，三百分，每道题十个测试样例，每个十分。&lt;strong&gt;机试非常重要！&lt;/strong&gt; 这个在我从网上看到任何一个博客/经验帖里都这样说，甚至还有说面试只是走一个过场。&lt;del&gt;我联系的导师也是这样对我说的，面试给的分都差不多，而机试可能拉上百分。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;可选择语言为 C/C++ ， Java，提供的 ide 有 Visual Studio 和 Eclipse。&lt;/p&gt;
&lt;h4 id=&#34;第一道题&#34;&gt;第一道题&lt;/h4&gt;
&lt;p&gt;给一个不超过 m(m&amp;lt;=100) 位的整数，从中移除 k(k&amp;lt;=m) 位，使得剩下的整数最小。&lt;/p&gt;
&lt;p&gt;当时的思路是每次移除最大的数字，然后有 60 分，但这个在后来做完其它题目回来重新想的时候已经发现有问题了，如对于 &lt;code&gt;1032&lt;/code&gt;，去掉3 后显然没有去掉 1 小。当时考虑用dp重写，&lt;code&gt;dp(i,j)=min(10*dp(i-1,j)+num[i],dp(i-1,j-1))&lt;/code&gt;,但没时间调试了。&lt;/p&gt;
&lt;p&gt;现在搜索看到一个贪心的方法：每一步总是选择一个使剩下的数最小的数字删去，即按高位到低位的顺序搜索，若各位数字递增，则删除最后一个数字，否则删除第一个递减区间的首字符。具体链接为&lt;a href=&#34;https://blog.csdn.net/C20190413/article/details/77368590&#34;&gt;C++贪心算法之最小新整数&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;第二道题&#34;&gt;第二道题&lt;/h4&gt;
&lt;p&gt;B 个男孩，G 个女孩，要求所有男孩女孩排成一队，连续的男孩个数不可以超过 K 个，有多少种排队方式&lt;/p&gt;
&lt;p&gt;直接就 DFS 了，&lt;code&gt;dfs(b,g,k)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当&lt;code&gt;b==B&amp;amp;&amp;amp;g==G&lt;/code&gt;时，成功，计数&lt;/li&gt;
&lt;li&gt;当&lt;code&gt;b&amp;gt;B||g&amp;gt;G||k&amp;gt;K&lt;/code&gt;时，失败，返回&lt;/li&gt;
&lt;li&gt;否则两种递归
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dfs(b+1,g,k+1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dfs(b,g+1,0)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后超时，70 分。当时已经很满意了，直接跳过放弃优化。&lt;/p&gt;
&lt;h4 id=&#34;第三道题&#34;&gt;第三道题&lt;/h4&gt;
&lt;p&gt;给出一个二叉树的前序遍历序列和后序遍历序列，问可能的二叉树有多少种&lt;/p&gt;
&lt;p&gt;也是 dfs 解决 &lt;code&gt;dfs(preorder,postorder)&lt;/code&gt;，直接 AC 了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是叶子，返回 1&lt;/li&gt;
&lt;li&gt;找子树
&lt;ul&gt;
&lt;li&gt;如果有两个子树，则返回子树的 dfs 乘积&lt;/li&gt;
&lt;li&gt;如果只有一个子树，则返回 2* 子树的 dfs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面试&#34;&gt;面试&lt;/h3&gt;
&lt;p&gt;因为机试考得比较不错，加上前一晚准备时差不多是跟同房的同学吹了一晚水，面试准备得比较一般，晚上看了看英文 wiki 准备一下计算机学科相关话题，以及完善一下自我介绍与项目经历。&lt;/p&gt;
&lt;p&gt;面试当天，探听到每个人的面试的形式基本一样，基本是自我介绍+专业/算法/项目问题+性格测试，而内容与难度则根据不同的组别可以有很大的差别，但感觉总体面试都不会为难学生，不会的问题老实说不会，也不会继续追问。本人的面试内容如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中文自我介绍，没说时间&lt;/li&gt;
&lt;li&gt;专业问题
&lt;ul&gt;
&lt;li&gt;数据挖掘是统计还是概率&lt;/li&gt;
&lt;li&gt;买桃问题：一个桃多少钱，三个桃核换一个桃，给定钱能有多少桃&lt;/li&gt;
&lt;li&gt;立方体不借助工具怎么倒出一半水&lt;/li&gt;
&lt;li&gt;最小生成树算法&lt;/li&gt;
&lt;li&gt;单链表怎样在常数空间复杂度查有没有环&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;项目相关
&lt;ul&gt;
&lt;li&gt;聚类算法的结果是什么（第一个问题就踩雷，然后就没有后续了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;英语提问
&lt;ul&gt;
&lt;li&gt;大学期间最感兴趣/擅长的课程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性格相关
&lt;ul&gt;
&lt;li&gt;喜欢跟什么样的人相处&lt;/li&gt;
&lt;li&gt;遇到不好相处的人怎么办&lt;/li&gt;
&lt;li&gt;遇到压力/挫折怎么办&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面试时间规定是在十分钟内，但是这个基本都是由面试的老师来控制，我面试的时候没吃午餐 + 等了太久 + 有点紧张，我觉得发挥得挺一般的，有些能答出来的题都没答出来（那个单链表的题我还在 LeetCode 刷过，也没答出来，勉强给了个线性空间复杂度的解法），实在可惜。不过好像从最后的结果来看好像影响也不大？&lt;/p&gt;
&lt;h3 id=&#34;导师&#34;&gt;导师&lt;/h3&gt;
&lt;p&gt;在挺早的时候，我院的一个老师帮忙宣传一个实验室时，我就发了简历给我联系的导师的实验室，然后在参加开放日之前几天，我又发了一封邮件联系，沟通得也不错。面试之后就找他聊一聊，顺带签字了。联系导师其实也不算难，我觉得不提前联系其实也是没什么问题，除去那些很热门的实验室和导师外，导师都还是很乐意为你签字。跟我一起去的同学，面试当天才联系导师签字，一气呵成。&lt;/p&gt;
&lt;h3 id=&#34;其它&#34;&gt;其它&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;住：本次学生的住宿分成两批，一个是就在计算机系楼旁的国际会议中心，另一个是步行三十分钟左右的中公汇悦酒店。两者规格差不多，远的就麻烦一点，有行李可以坐公车。&lt;/li&gt;
&lt;li&gt;食：看往年的帖子都说是发饭卡，还可以到超市买东西，而今年则只有指定饭堂的五张饭票，每张饭票当15元使用，只能单次使用，有点麻烦。&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%BB%8F%E5%8E%86%E5%9B%9E%E9%A1%BE/">经历回顾</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>枚举排列</title>
                <link>https://scottyeung.top/2019/%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%88%97/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%88%97/</guid>
                <pubDate>Wed, 03 Jul 2019 10:21:44 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;如何按字典序从小到大输出前 n 个数的所有排列？&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;递归调用&#34;&gt;递归调用&lt;/h2&gt;
&lt;p&gt;将数字分成两部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;已确定前缀序列&lt;/li&gt;
&lt;li&gt;待定元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每次移除一个待定元素添加到前缀序列末尾，进行下一次递归&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print_permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//递归边界
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//尝试在 A[cur] 中填各种整数 i
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//如果 i 已经在 A[0]~A[cur-1] 出现过，则不能再选
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;print_permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//递归调用
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;直接生成&#34;&gt;直接生成&lt;/h2&gt;
&lt;p&gt;该方法直接获取到排列序列&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将元素排序，记录初始序列。&lt;/li&gt;
&lt;li&gt;将当前首元素记录。&lt;/li&gt;
&lt;li&gt;每次将记录的元素右移 1 位（交换位置），生成一个排列&lt;/li&gt;
&lt;li&gt;直到元素移到最右边，回到步骤 2&lt;/li&gt;
&lt;li&gt;当出现了初始序列时，排列生成完毕&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体代码可以参照 std 标准库里面的方法&lt;code&gt;next_permutation&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;algorithm&amp;gt; //包含 next_permutation&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//排序，得到 p 的最小排列
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//输出排列 p
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next_permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//求下一个排列
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Cpp/">Cpp</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/">排列组合</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>并查集</title>
                <link>https://scottyeung.top/2019/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
                <pubDate>Wed, 19 Jun 2019 11:59:22 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;在计算机科学中，并查集是一种树型的数据结构，用于处理一些不交集（Disjoint Sets）的合并及查询问题。&lt;/p&gt;
&lt;p&gt;有一个联合-查找算法（union-find algorithm）定义了两个用于此数据结构的操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。&lt;/li&gt;
&lt;li&gt;Union：将两个子集合并成同一个集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;思路&#34;&gt;思路&lt;/h2&gt;
&lt;p&gt;开数组记录每个元素的从属情况，find操作返回元素从属情况，union操作修改其中一个元素的从属情况，将其合并&lt;/p&gt;
&lt;h2 id=&#34;代码&#34;&gt;代码&lt;/h2&gt;
&lt;h3 id=&#34;最简单模板&#34;&gt;最简单模板&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;union&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;最简单的情况下没有任何优化，易退化成链状查询，查询复杂度到达$O(n)$&lt;/p&gt;
&lt;h3 id=&#34;优化模板&#34;&gt;优化模板&lt;/h3&gt;
&lt;p&gt;添加路径压缩，减少查询时间&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//使用递归写find函数，同时有路径压缩
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;///循环方法查找前导点
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;///路径压缩,修改历经的前导点
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;///记录x的前导结点
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;///将i的前导结点设置为r的根节点.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Union&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;///x的根节点为a
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;///y的根节点为b
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;///如果a,b不是相同的根节点，则说明ab不是连通的
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;///将a,b连接，将a的前导点设置为b
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;实例&#34;&gt;实例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;图的连通性问题：将所有节点合并邻接节点，判断是否属于同一集合&lt;/li&gt;
&lt;li&gt;重复数据合并/关联
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/accounts-merge/submissions/&#34;&gt;Leetcode 721 Accounts Merge&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Cpp/">Cpp</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Windows 快捷键</title>
                <link>https://scottyeung.top/2019/Windows-%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/Windows-%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
                <pubDate>Thu, 13 Jun 2019 20:07:11 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;无意中在油管看到的快捷键集锦视频，有些还是挺有用的，遂记录之。&lt;/p&gt;
&lt;p&gt;原视频&lt;a href=&#34;https://www.youtube.com/watch?v=VeAK7Bv4F1o&#34;&gt;可点此&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;ul&gt;
&lt;li&gt;打开新的虚拟桌面 &lt;code&gt;Win + Ctrl+ d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;虚拟桌面切换 &lt;code&gt;Win + Ctrl + 方向键左/右&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最小化所有应用并返回桌面 &lt;code&gt;Win + M&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;临时切回桌面 &lt;code&gt;Win + ,&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最大化/最小化当前程序&lt;code&gt;Win + 方向键上/下&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打开/收回任务栏中程序 &lt;code&gt;Win + 数字键&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当前程序快速分屏 &lt;code&gt;Win + 方向键&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看所有程序 &lt;code&gt;Win + Tab&lt;/code&gt; 或 &lt;code&gt;Win + Ctrl + Tab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;任务管理器 &lt;code&gt;Ctrl +Shift +Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开启新的文件管理器 &lt;code&gt;Win + e&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;截图
&lt;ul&gt;
&lt;li&gt;快速全屏截图（保存在用户的图片目录下） &lt;code&gt;Win + PrintScreent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自由截图（截图后可以编辑，默认是复制到剪切板中） &lt;code&gt;Win + Shfit + s&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;打开侧边栏 &lt;code&gt;Win + a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打开设置 &lt;code&gt;Win + i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;快速锁电脑 &lt;code&gt;Win + l&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;双屏切换 &lt;code&gt;Win + Shift + 方向键左/右&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Windows/">Windows</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>如何减少焦虑</title>
                <link>https://scottyeung.top/2019/%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91%E7%84%A6%E8%99%91/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91%E7%84%A6%E8%99%91/</guid>
                <pubDate>Fri, 07 Jun 2019 17:20:09 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;在最近的公众号推送中看到的一篇Scott H. Young的关于减少焦虑的博文推送，感觉方法还不错，刚好这段时间常常因为保研的事情而感到焦虑，遂打算写一篇文章学习一下其中的方法。不过微信推送当中的中文翻译实在有一点让人摸不着头脑，遂上官网找了&lt;a href=&#34;https://www.scotthyoung.com/blog/2019/05/14/worry-less/&#34;&gt;原文&lt;/a&gt;重新阅读并进行记录。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;每个人都会产生焦虑，如担心犯错，担心收到批评，担心事业失败，担心社交出现问题，可以说焦虑的类型有很多。大多数的时间中，焦虑只是存在于脑海中，可以被人为地忽视掉而不受其影响，但当焦虑程度过深之后，它便可能跳出你的脑海，影响到你的实际行动。所以，我们必需采取方法来减少焦虑。&lt;/p&gt;
&lt;h2 id=&#34;减轻焦虑&#34;&gt;减轻焦虑&lt;/h2&gt;
&lt;p&gt;焦虑的消除并不复杂，但是却是一个顽固的问题，我们可能需要一遍又一遍的解决同样的问题，但是焦虑的问题很少会完全消失。&lt;/p&gt;
&lt;h3 id=&#34;旁观者心态&#34;&gt;旁观者心态&lt;/h3&gt;
&lt;p&gt;对于我们脑海中的思想，我们通常会认为它就是我们自身的一部分，思想的出现，是我们创造的原因，并且思想也是我们可以控制的东西。但是，按照这种理论的话，当我们无法摆脱焦虑的时候，我们就很容易对自身的能力产生怀疑，感到焦虑，毕竟担心焦虑的出现和控制也是一种焦虑。&lt;/p&gt;
&lt;p&gt;所以，我们可以以一种旁观者的心态来对待这些思想，任其发生，只将其当作一种感官体验，虽然思想是来自你的脑海内部，但也可将其当成来自外部世界感受到的感觉一样，通过这种旁观者的角度，便不会轻易纠结于想要控制焦虑这种想法，使得焦虑加深，相反，对其抱着一种漠视的旁观者心态，逐渐可对其置之不理，减轻其影响。&lt;/p&gt;
&lt;p&gt;如何练习这种旁观者心态呢？冥想是一个很好的手段。冥想本身也是一种观察自身思想的过程。同时，这种心态也可以联系到佛学中的无我思想，本质可以归结为，对于过往经历过的每件事，回顾并能承认自己无法控制。（个人对于佛学基本没有了解，原文给出的&lt;a href=&#34;https://en.wikipedia.org/wiki/Anatta&#34;&gt;维基链接&lt;/a&gt;感兴趣可以了解一下）&lt;/p&gt;
&lt;h3 id=&#34;远离社交社交媒体&#34;&gt;远离社交/社交媒体&lt;/h3&gt;
&lt;p&gt;焦虑是可以传播的，只要有消息的传播，就可能导致焦虑的传播。本人觉得最为典型的例子是：考完试后，往往会有人聚在一起讨论试题与答案，然而大多数人对本次考试都有着自己的焦虑，例如某道题的做法或答案是否正确，他们或许企图通过对答案来获取他人的确认来消除焦虑，但实际上，往往无法如愿，焦虑却因此而传播：对方也会开始考虑这个问题自己的答案是否正确。&lt;/p&gt;
&lt;p&gt;有了社交媒体后，消息传播就变得更为便捷，可谓是无处不在了。刚考完的考试，课程群里马上就有考试题目或给分等相关的讨论，看到群里讨论的一系列问题，你的内心很自然地会产生对刚刚考试的联想，从而引起焦虑。&lt;/p&gt;
&lt;p&gt;所以，我们应该根据你的承受力，恢复力等相关状况，挑选你的合适的环境，远离那些会传播焦虑的环境。但非常可惜的是，虽然我们明知某些社交媒体环境会传播焦虑，但很多时候我们还是忍不住参与到其中。正如上面所说的课程群，虽然考前你就知道会有相应的讨论，考后你还是忍不住点进去。那怎么办呢？这就涉及到自制力的提高问题了。&lt;/p&gt;
&lt;h3 id=&#34;找到最为焦虑的问题并直面&#34;&gt;找到最为焦虑的问题并直面&lt;/h3&gt;
&lt;p&gt;焦虑分为两种，一种是单一的，可能是因为过往的某次事件而引发，如说了不当的话；另外一种是持续的问题，会反反复复的地出现，如对于事业，学习的焦虑。&lt;/p&gt;
&lt;p&gt;对于前者，随着时间的推移便会逐渐减轻，而后者的话，则必须直面问题，找到一个持久有效的解决方法，学习如何去面对该问题。&lt;/p&gt;
&lt;p&gt;原文这一点讲得较为笼统，而且我也觉得是一个知易行难的方法，便不继续展开。&lt;/p&gt;
&lt;h3 id=&#34;停止试图解决焦虑&#34;&gt;停止试图解决焦虑&lt;/h3&gt;
&lt;p&gt;当你感到焦虑时，你往往倾向于向他人寻求安慰，而他人面对你的焦虑情况时，往往也只能对你给予安慰。虽然这样短时间之内会让你感到更好，但从长远来看这会让事情变得更糟糕。使用安慰来回应焦虑的思维模式，实际上会通过负强化增强了这种焦虑的思维模式。&lt;/p&gt;
&lt;p&gt;在心理学的理论中，焦虑是一种动机，具有明确的目标，焦虑是为了识别出威胁并形成解决方案。当你因为某件事情感到焦虑时，若他人的安慰使你暂时变好了，当再出现类似问题时，你便倾向于再次陷入焦虑来解决问题。所以，越解决焦虑，越容易在未来其它事情上引发焦虑。&lt;/p&gt;
&lt;p&gt;此处给出了一个心理学家的建议：面对焦虑，抑制住解决问题的冲动，虽然这会使你焦虑更加严重，但因为没有形成解决方案，焦虑的思维模式被削弱了，当目标没有实现时，下次的回应便会减弱。&lt;/p&gt;
&lt;p&gt;这个方法对我而言是一个挺有创新性的方法，个人感觉不错，值得学习。光看标题，还以为是类似方法一那一种忽视焦虑的方法。但其实不是，这个方法是从行为模式的角度出发，通过行为模式的效果反馈抑制行为模式的出现。通俗点说，就是让自己意识到焦虑无用后便不会焦虑，但这也使我想到一个问题：焦虑是为了发现问题解决问题，削弱了这种行为模式后，对于问题的感官敏锐性会否也相应下降，如果这种敏锐性随之下降的话，虽说不焦虑了，但是对问题也已经没有感觉，发现不了问题。不过还是值得去尝试该方法的。&lt;/p&gt;
&lt;h3 id=&#34;分析可行性而非合理性&#34;&gt;分析可行性而非合理性&lt;/h3&gt;
&lt;p&gt;在陷入焦虑时，我们经常会通过试图将焦虑分类，找出合理的焦虑，忽视不合理的焦虑，从而减轻焦虑。但这事实上是不可行的，大多数的焦虑，都有其合理的基础，你的担心也不是一无是处，你会发现所有的焦虑似乎都是合理的，不可忽视。&lt;/p&gt;
&lt;p&gt;所有，与其纠结于焦虑的可行性，不如切实地分析焦虑的源头问题，判断问题是否可行。&lt;/p&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%84%A6%E8%99%91/">焦虑</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%BF%83%E6%80%81/">心态</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>C&#43;&#43; std::set</title>
                <link>https://scottyeung.top/2019/C-std-set/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/C-std-set/</guid>
                <pubDate>Tue, 21 May 2019 12:40:46 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;集合作为一个比较重要的数据结构，具有不含重复元素的性质，在许多算法中实现去重操作时，都需要用到集合这个数据结构。在近来使用c++刷题，用集合踩过较多的坑以后，决定写篇东西记录一下标准库中的集合。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;集合一般通过二分搜索树实现。集合内元素保持严格弱序性质&lt;/p&gt;
&lt;h2 id=&#34;性质&#34;&gt;性质&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Associative：元素不是靠决定位置访问的&lt;/li&gt;
&lt;li&gt;Ordered：容器内元素保持严格顺序&lt;/li&gt;
&lt;li&gt;Set：元素的值通过元素的键标识&lt;/li&gt;
&lt;li&gt;Unique keys：元素没有相同的键&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;初始化&#34;&gt;初始化&lt;/h2&gt;
&lt;p&gt;集合的初始化有两种形式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接给出模板类型初始化集合&lt;code&gt;set&amp;lt;template&amp;gt; s;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;给出模板类型以及比较对象
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Compare&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中Compare类为谓词类，需重载&lt;code&gt;()&lt;/code&gt;运算符，在其中判断元素顺序&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于基本类型而言，方法1足以解决一起，但是对于自定义结构体，则需进行额外的工作，以帮助集合组织元素以及判断元素是否相同。&lt;/p&gt;
&lt;h3 id=&#34;比较&#34;&gt;比较&lt;/h3&gt;
&lt;p&gt;额外的工作其实就是两个元素的比较，通过一下两种方式可以实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重载&lt;code&gt;&amp;lt;&lt;/code&gt;运算符&lt;/li&gt;
&lt;li&gt;谓词类重载&lt;code&gt;()&lt;/code&gt;运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;元素的比较需满足对于两个相等的元素a，b有&lt;code&gt;a&amp;lt;b&lt;/code&gt;和&lt;code&gt;b&amp;lt;a&lt;/code&gt;都不成立。以一个坐标点的结构体为例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;常用成员函数&#34;&gt;常用成员函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;insert(value)&lt;/code&gt;:插入元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find(value)&lt;/code&gt;：查找元素并返回迭代器,不存在时返回&lt;code&gt;set::end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;erase&lt;/code&gt;:取出迭代器位置元素/某值元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count&lt;/code&gt;：返回某元素的数量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;empty/size&lt;/code&gt;：判断元素数量是否为0/返回元素数量&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Cpp/">Cpp</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>判断二分图</title>
                <link>https://scottyeung.top/2019/%E5%88%A4%E6%96%AD%E4%BA%8C%E5%88%86%E5%9B%BE/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/%E5%88%A4%E6%96%AD%E4%BA%8C%E5%88%86%E5%9B%BE/</guid>
                <pubDate>Fri, 17 May 2019 10:40:52 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;problem&#34;&gt;Problem&lt;/h1&gt;
&lt;p&gt;给定一个无向图，判断这个图是否二分图。&lt;/p&gt;
&lt;p&gt;如果我们能将一个图的节点集合分割成两个独立的子集A和B，并使图中的每一条边的两个节点一个来自A集合，一个来自B集合，我们就将这个图称为二分图。&lt;/p&gt;
&lt;!-- more--&gt;
&lt;p&gt;graph将会以邻接表方式给出，&lt;code&gt;graph[i]&lt;/code&gt;表示图中与节点i相连的所有节点。每个节点都是一个在0到&lt;code&gt;graph.length-1&lt;/code&gt;之间的整数。这图中没有自环和平行边： &lt;code&gt;graph[i]&lt;/code&gt;中不存在i，并且&lt;code&gt;graph[i]&lt;/code&gt;中没有重复的值。&lt;/p&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;示例 1:
输入: [[1,3], [0,2], [1,3], [0,2]]
输出: true
解释: 
无向图如下:
0----1
|    |
|    |
3----2
我们可以将节点分成两组: {0, 2} 和 {1, 3}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;示例 2:
输入: [[1,2,3], [0,2], [0,1,3], [0,2]]
输出: false
解释: 
无向图如下:
0----1
| \  |
|  \ |
3----2
我们不能将节点分割成两个独立的子集。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;hints&#34;&gt;Hints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;graph 的长度范围为 [1, 100]。&lt;/li&gt;
&lt;li&gt;graph[i] 中的元素的范围为 [0, graph.length - 1]。&lt;/li&gt;
&lt;li&gt;graph[i] 不会包含 i 或者有重复的值。&lt;/li&gt;
&lt;li&gt;图是无向的: 如果j 在 graph[i]里边, 那么 i 也会在 graph[j]里边。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;solution&#34;&gt;Solution&lt;/h1&gt;
&lt;p&gt;问题核心为如何判断一个图为二分图，似乎是在离散数学里面学过相关知识，但已经早已忘却。与二分图相关的资料可看&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE&#34;&gt;维基百科&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我们可以通过二分图测试，在线性时间内判断一个图是否二分图。具体思路为：深度优先进行图遍历，在遍历的过程中对图进行二染色，即给相邻节点染上不同的颜色，当发现二染色时后有相邻节点颜色相同，即可判断不是二分图。&lt;/p&gt;
&lt;h2 id=&#34;详细步骤&#34;&gt;详细步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;初始化染色数组。染色数组包含三种状态：未染色（-1），0，1。&lt;/li&gt;
&lt;li&gt;每一个节点深度遍历。若该节点未染色则进行染色，递归地对相邻节点进行染色，当发现相邻节点染色与当前节点相同，返回&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;完整代码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Solution&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;// if(colors[i]==-1)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;adjs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;adjs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;adjs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;adjs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;adjs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;adjs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;    
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isBipartite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Cpp/">Cpp</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/LeetCode/">LeetCode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%9B%BE%E8%AE%BA/">图论</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>异常检测</title>
                <link>https://scottyeung.top/2019/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/</guid>
                <pubDate>Fri, 03 May 2019 13:30:38 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;一般的异常检测问题为：对于给定的一系列样本，给出一个新的测试样本，判断该测试样本是否属于这系列已知样本/该样本是否异常样本。&lt;/p&gt;
&lt;p&gt;例如：对于一批正常的引擎，监测带有一系列的数据（散热，震动强度），对于一个新的引擎，测得相关的数据，判断其是否异常引擎。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;方法&#34;&gt;方法&lt;/h2&gt;
&lt;p&gt;利用统计学知识，建立数据分布模型，并用已知样本进行参数估计。然后利用分布模型继续概率估计。一般选择使用高斯分布。&lt;/p&gt;
&lt;h3 id=&#34;高斯分布&#34;&gt;高斯分布&lt;/h3&gt;
&lt;p&gt;单元高斯分布&lt;/p&gt;
&lt;div&gt;
$$
p(x;\mu;\sigma)={1\over \sqrt{2\pi \sigma}}e^{(x-\mu)^2\over 2\sigma^2}
$$
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;$\mu$为平均值，影响分布的对称轴&lt;/li&gt;
&lt;li&gt;$\sigma^2$为方差，影响图形的胖瘦&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;参数估计&#34;&gt;参数估计&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;$\mu = {1\over m}\sum_{i=1}^mx^{(i)}$&lt;/li&gt;
&lt;li&gt;$\sigma^2= {1\over m}\sum_{i=1}^m(x^{(i)}-\mu)^2$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;算法&#34;&gt;算法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;对于给定的训练集，从中选择能够反映出是否异常的特征&lt;/li&gt;
&lt;li&gt;对于每一个特征，进行参数估计&lt;/li&gt;
&lt;li&gt;得出模型 
$$p(x)=\prod_{j=1}^n p(x_j;\mu_j;\sigma_j)=\prod_{j=1}^n{1\over \sqrt{2\pi \sigma_j}}e^{(x-\mu_j)^2\over 2\sigma_j^2}$$&lt;/li&gt;
&lt;li&gt;对于测试样本，如果 $p(x)&amp;lt;\varepsilon$,则为异常&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;选择特征&#34;&gt;选择特征&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;满足高斯分布，不满足的可以通过变形生成满足高斯分布的特征&lt;/li&gt;
&lt;li&gt;由异常样本出发找特征&lt;/li&gt;
&lt;li&gt;相关的特征可以构造新特征&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;评估&#34;&gt;评估&lt;/h2&gt;
&lt;p&gt;同一般的机器学习，我们将样本分成训练集、CV集、测试集，其中训练集不含异常样本。&lt;/p&gt;
&lt;h3 id=&#34;评估指标&#34;&gt;评估指标&lt;/h3&gt;
&lt;p&gt;因为样本为偏斜集（skewed class)，所以不能直接计算准确率，我们采用
$$F_1score={PR\over P+R}$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P:Precision 预测的准确率&lt;/li&gt;
&lt;li&gt;R:Recall 召回率=真阳性/实际阳性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对比&#34;&gt;对比&lt;/h2&gt;
&lt;p&gt;因为其在测试时使用了带 label 的数据，类似于监督学习。&lt;/p&gt;
&lt;h3 id=&#34;使用条件&#34;&gt;使用条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;异常检测：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异常样本数量很少，正常样本数量多&lt;/li&gt;
&lt;li&gt;异常的类型很多&lt;/li&gt;
&lt;li&gt;未来的异常类型不确定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;监督学习：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正常异常样本都很多&lt;/li&gt;
&lt;li&gt;异常样本数量足够多到能够了解异常样本是什么样的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;应用&#34;&gt;应用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;异常检测
&lt;ul&gt;
&lt;li&gt;欺诈检测&lt;/li&gt;
&lt;li&gt;制造业&lt;/li&gt;
&lt;li&gt;监控设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;监督学习
&lt;ul&gt;
&lt;li&gt;垃圾邮件过滤&lt;/li&gt;
&lt;li&gt;天气预测&lt;/li&gt;
&lt;li&gt;癌症分类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多元高斯分布&#34;&gt;多元高斯分布&lt;/h2&gt;
&lt;p&gt;$$p(x;\mu;\Sigma)={1\over {(2\pi)^{n\over2} |\Sigma|^{1\over 2}}}e^{(x-\mu)^T\Sigma^{-1} (x-\mu)}$$&lt;/p&gt;
&lt;p&gt;多元高斯分布可以直接得出特征之间的相关性&lt;/p&gt;
&lt;h3 id=&#34;对比-1&#34;&gt;对比&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多元高斯分布可以直接得出特征之间的相关性&lt;/li&gt;
&lt;li&gt;计算复杂&lt;/li&gt;
&lt;li&gt;必须满足 $m&amp;gt;n$,且 $\Sigma$ 可逆&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/notes/">notes</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>春秋古筮法</title>
                <link>https://scottyeung.top/2019/%E6%98%A5%E7%A7%8B%E5%8F%A4%E7%AD%AE%E6%B3%95/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/%E6%98%A5%E7%A7%8B%E5%8F%A4%E7%AD%AE%E6%B3%95/</guid>
                <pubDate>Sat, 20 Apr 2019 11:18:35 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;第一次接触春秋古筮法是在大二上名为中国术数文化的公选课上。当时因为需要按类别选课，不得不选择中国与全国类别的公选课，恰好一直以来都对玄学有着谜之兴趣，就选了这门公选课。当时十几周的课程，现在我的印象就剩下春秋古筮法了，最终也能叫有所收获？&lt;/p&gt;
&lt;p&gt;到了寒假，不知为什么又重新想到了春秋古筮法，然而大体以及忘记了，在重新复习了相关的方法后，为了不至于忘却，我萌生了开发一个春秋古筮法占卜的应用，然后在这个学期里大概花了两个星期的时间，上线了 WEB 版本，&lt;del&gt;&lt;a href=&#34;https://scottyeung.top/2019/%E6%98%A5%E7%A7%8B%E5%8F%A4%E7%AD%AE%E6%B3%95/#&#34;&gt;点此可体验&lt;/a&gt;（因为服务器没有备案，所以暂且不能直接上 80 端口）&lt;/del&gt;。在基本完成之后的现在，打算写点东西记录一下。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;在谈什么是古筮法之前，我们先来谈谈，一直说的占法是什么？&lt;/p&gt;
&lt;p&gt;所谓的“占”，指的是解读兆象吉凶，也就是我们现在说的铁口直断的断。&lt;/p&gt;
&lt;p&gt;据《周礼》记载，古代的占法主要有三项：占卜、占筮、占梦。占卜是通过灼烧龟壳得出兆象，占筮则是通过蓍草演算出卦象，占梦则是根据梦境来预测吉凶。然而其中的占卜和占梦的方法都已经失传，现在从周朝流传下来的占法就只有占筮，这就是流传下来的春秋古筮法。&lt;/p&gt;
&lt;h2 id=&#34;方法&#34;&gt;方法&lt;/h2&gt;
&lt;p&gt;传统的方法使用的是蓍草，在我们的实操中，使用纸牌也行（课堂上用的就是纸牌）&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;初始选择 49 张纸牌&lt;/li&gt;
&lt;li&gt;将其随意分成 2 堆&lt;/li&gt;
&lt;li&gt;随意从 1 堆中拿出 1 张单独放置&lt;/li&gt;
&lt;li&gt;两堆牌分别 4 张 4 张地数，记录余数，余数为 0 时记作 4&lt;/li&gt;
&lt;li&gt;将余数的牌取出来弃置&lt;/li&gt;
&lt;li&gt;将两堆牌合并后，回到步骤 1，合共重复 3 次&lt;/li&gt;
&lt;li&gt;三次变化之后，牌数除以四，就得出 9、8、7、6 中的一个，此为一卦六爻中的一爻，分别是变爻阳爻，阴爻，阳爻，变爻阴爻。其中阳爻为&lt;code&gt;-&lt;/code&gt;, 阴爻为&lt;code&gt;--&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上述步骤重复六次，分别得到六爻，此为卦象。卦象中爻的顺序自下到上&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每一爻需要 3 次变化，求出 6 爻共需要 18 次变化，此所谓“十有八变而成卦”。&lt;/p&gt;
&lt;h2 id=&#34;解读&#34;&gt;解读&lt;/h2&gt;
&lt;p&gt;当得出卦象后，我们可以根据《周易》来断卦。周易共分为 64 节，每一节对应一个卦象，小节中包含卦义卦辞，及各爻爻辞。周易的卦象爻辞解释网上随处可以找到，这里就不直接给出。&lt;/p&gt;
&lt;p&gt;根据卦象变卦数量情况，可分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无变爻：看卦辞卦义&lt;/li&gt;
&lt;li&gt;单变爻：看本卦变爻爻辞&lt;/li&gt;
&lt;li&gt;三变爻：本卦和变卦的卦辞卦义&lt;/li&gt;
&lt;li&gt;五变爻：变卦的卦辞卦义&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上的规则都是古书里的春秋筮例中归纳出来的，并没有什么确定性的表述或规则，所以如果你问为什么要这样看，或者为什么不那样看，我不能回答你，估计也没有人能回答你。&lt;/p&gt;
&lt;h2 id=&#34;程序实现&#34;&gt;程序实现&lt;/h2&gt;
&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;
&lt;p&gt;整个古筮法分为得出卦象，解卦两方面。
碍于变爻需要根据特定情况的分析，且找到的周易卦象解释了没有具体的爻辞解析，所以整个程序忽略的变爻，并直接使用卦象本身卦辞卦义作为解释。&lt;/p&gt;
&lt;h3 id=&#34;方法-1&#34;&gt;方法&lt;/h3&gt;
&lt;p&gt;卦象数据的来源为 &lt;a href=&#34;https://www.eee-learning.com/&#34;&gt;易学网&lt;/a&gt;，感觉是一个非常专业而全面的易经学习网站。我使用爬虫爬取了 64 卦的卦文，运程分析等相关资料。&lt;/p&gt;
&lt;p&gt;卦象的生成为六爻的随机生成组合。并根据相应的卦象返回相应的解读。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%8E%84%E5%AD%A6/">玄学</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>CCF 201903</title>
                <link>https://scottyeung.top/2019/CCF-201903/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/CCF-201903/</guid>
                <pubDate>Thu, 18 Apr 2019 11:34:47 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;最后一次的认证，事前准备了差不多一个月，都觉得没什么问题了，考的时候还做出了四道题，觉得三百分是稳的。然后一查成绩，居然比第一次基本没怎么准备还低（第一次 270），不甘心，又无奈。&lt;/p&gt;
&lt;p&gt;于是等到网上出了题后，把当时提交的题重新做一遍，提交一遍，重新看看问题在哪，写一写题解。也不是想要证明什么，只是觉得努力不应该被白费？
代码链接 &lt;a href=&#34;https://github.com/yeung66/codesAboutCCF/tree/master/201903&#34;&gt;点此&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;小中大&#34;&gt;小中大&lt;/h2&gt;
&lt;p&gt;题目为有序序列中找最大值，最小值和中位数，并按大到小的顺序输出。&lt;/p&gt;
&lt;p&gt;非常简单，最大最小值直接按索引取值即可，中位数则需要根据个数的奇偶性判断要不要取均值。&lt;/p&gt;
&lt;p&gt;然而，第一道题的输入样例就给错了，样例 2 的输入并不是有序的，这就引发了我一个非常关键的问题：最值怎么取？是根据他说的原本有序取两侧，还是取实际的最值？我当时想的是前者，这就又引发出了另一个问题，中位数可能比最大值大或者比最小值小，所以三者又做了额外的排序，耽误了一定的时间。&lt;/p&gt;
&lt;p&gt;最后直到我第二题都差不多做完，才通知说题目有误，改了样例。而我上面的代码一样符合它的思路，只是做多了额外功夫，测试了一下新样例就完事了。&lt;/p&gt;
&lt;p&gt;最后这题拿了 100 分&lt;/p&gt;
&lt;h2 id=&#34;二十四点&#34;&gt;二十四点&lt;/h2&gt;
&lt;p&gt;题目为根据输入表达式判断结果是否等于 24。&lt;/p&gt;
&lt;p&gt;对于有着 eval 的 Python 的选手来说，非常简单，处理一下输入调用&lt;code&gt;eval&lt;/code&gt;即可。考试时注意到除法为整除，而 Python3 已经将整除变为&lt;code&gt;//&lt;/code&gt;所以先用 replace 替换一下除号即可。&lt;/p&gt;
&lt;p&gt;然而这道题我拿了 40 分，考后提交发现运行错误。细看题，发现题目中给出的乘号居然是小写字母&lt;code&gt;x&lt;/code&gt;来表示。为什么会发现不了？当时因为第一题题目本身有问题，耽误了一点时间，所以做得比较快，而且最关键的是，**这一次全部题面都用了图片，包括输入样例！！！**我们只能一个个手敲输入样例，因为是手敲样例的缘故，自己就直接先入为主当成*号了，发现不了看错题的情况，血崩。&lt;/p&gt;
&lt;p&gt;发现问题后对乘法做一个处理，将 x 替换成*，问题解决，100 分。&lt;/p&gt;
&lt;h2 id=&#34;损坏的-raid5&#34;&gt;损坏的 RAID5&lt;/h2&gt;
&lt;p&gt;麻烦模拟题&lt;/p&gt;
&lt;p&gt;待续&lt;/p&gt;
&lt;h2 id=&#34;消息传递接口&#34;&gt;消息传递接口&lt;/h2&gt;
&lt;p&gt;一个比较典型的死锁问题，感觉可以用信号量去解决。&lt;/p&gt;
&lt;p&gt;当时跳了这道题没做，现在估计也不会去做。&lt;/p&gt;
&lt;h2 id=&#34;317-号子任务&#34;&gt;317 号子任务&lt;/h2&gt;
&lt;p&gt;多源点最短路径问题&lt;/p&gt;
&lt;p&gt;题目要求给出图中每一个点到 k 个特定类型的点的最短路径和。&lt;/p&gt;
&lt;p&gt;对于图论题我一直都是抱着能拿分就拿分的态度，超时的话一般都不考虑，于是直接采用最为暴力直接的方法——弗洛伊德算法，直接求出多源点最短路径，复杂度为$O(n^3)$，求出后直接找每个点到特定点的距离，排序后取前 k 个求和即可。&lt;/p&gt;
&lt;p&gt;考试时，这道题我得了 0 分，现在重新提交，显示运行超时。运行超时我并不感到意外，但是超时到连第一个样例都过不了？？？重新看数据规模，发现这里第一档的数据（30%的数据），点的规模就已经到了 500，重新翻了翻以往的图论题，别的单源最短路径或者最小生成树的问题第一档数据规模一般都是$10$, 今年因为放到了第五题，强行通过数据规模提高难度，也是醉了。但是即使如此，现在的模拟提交因为时间只有 1 秒超时，在考试的时候时间上限是 10s，10s 也不能跑完第一档的数据？很奇怪。&lt;/p&gt;
&lt;p&gt;换用了 C++重新写了一个 C++版本的弗洛伊德算法，还是超时 0 分。上网搜了一下，相关题解只有 &lt;a href=&#34;https://www.cnblogs.com/brainm/p/10548893.html&#34;&gt;一个&lt;/a&gt;，而且也是用弗洛伊德算法。将其直接复制提交，提示错误，这次不超时了，但是时间也接近界限了。一样的方法为什么它可以不超时？我一直贴近它的代码修改我的，可是我的代码还是一直超时，莫得办法。看它的代码，没有考虑重边和自环。修改后还是错误。暂时只能放弃。&lt;/p&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/CCF/">CCF</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Python/">Python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>循环体中局部变量的小坑</title>
                <link>https://scottyeung.top/2019/%E5%BE%AA%E7%8E%AF%E4%BD%93%E4%B8%AD%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%B0%8F%E5%9D%91/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/%E5%BE%AA%E7%8E%AF%E4%BD%93%E4%B8%AD%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%B0%8F%E5%9D%91/</guid>
                <pubDate>Fri, 12 Apr 2019 19:37:42 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;前几晚看《The Go Progromming Language》时，在&lt;a href=&#34;https://yar999.gitbooks.io/gopl-zh/content/ch5/ch5-06.html&#34;&gt;匿名函数&lt;/a&gt;的最后一小节中，发现了一个比较有趣的小坑。
大概的场景为：首先创建一些目录，然后对于每一个目录，分别声明一个匿名函数删除目录，样例代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rmdirs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tempDirs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;MkdirAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mo&#34;&gt;0755&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;rmdirs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rmdirs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;RemoveAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;大家可以先自行考虑一下，有没有什么问题，效果会是怎样&lt;/p&gt;
&lt;h2 id=&#34;警告捕获迭代变量&#34;&gt;警告：捕获迭代变量&lt;/h2&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;（颇为中二的标题名字是从书上搬过来的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的代码是有问题的，运行后&lt;code&gt;rmdirs&lt;/code&gt;中每一个函数的效果都是删除最后一个目录。&lt;/p&gt;
&lt;p&gt;为什么没有出现我们预期的效果呢？原因在于循环变量的作用域。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在上面的程序中，for循环语句引入了新的词法块，循环变量dir在这个词法块中被声明。在该循环中生成的所有函数值都共享相同的循环变量。需要注意，函数值中记录的是循环变量的内存地址，而不是循环变量某一时刻的值。以dir为例，后续的迭代会不断更新dir的值，当删除操作执行时，for循环已完成，dir中存储的值等于最后一次迭代的值。这意味着，每次对os.RemoveAll的调用删除的都是相同的目录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正确的代码应该如下修改，通过在块级中声明一个局部临时变量，将其代替循环变量放入匿名函数中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tempDirs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// declares inner dir, initialized to outer dir
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;为什么这个修改是可行的？原因很简单，我们在匿名函数内部使用的是一个局部的临时变量，因为是临时的，块级代码结束时，变量地址指向内容很可能要回收，所以不能存储地址，只能够存储变量的值。
那为什么前者的代码匿名函数值中记录的就是变量的内存地址？循环变量不也属于这个词法块吗？还真不太一样。循环变量虽说也是由循环词法块被声明，但是相对于词法块内的代码，它实质上是一个全局变量的地位，它对于代码块的每一次执行都是一样的地位，一样的地址,所以实际存储的是变量的地址。&lt;/p&gt;
&lt;h2 id=&#34;javascript中的循环变量&#34;&gt;JavaScript中的循环变量&lt;/h2&gt;
&lt;p&gt;当时看到书，我第一时间就想到了JavaScript中也有着同样的情况，我之前还遇到过类似的问题：给一系列的控件绑定事件触发函数，每个函数中根据循环变量设定条件，然后出现了相似的问题。当时采用的解决方法是提到了参数处理的，治标不治本。&lt;/p&gt;
&lt;p&gt;看到这里后，我马上就用JavaScript复现了这个问题&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()=&amp;gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)=&amp;gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;结果就如同预期一样，输出了5个4，没有达到预期。然后用跟在Go一样的思路，在循环体内部中使用一个临时局部变量代替，运行后出现预期效果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()=&amp;gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)=&amp;gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注意到这里用的是&lt;code&gt;let&lt;/code&gt;而不是&lt;code&gt;var&lt;/code&gt;。使用 let 语句声明一个变量，该变量的范围限于声明它的块中。&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Golang/">Golang</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/JavaScript/">JavaScript</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>图论常见题目及算法</title>
                <link>https://scottyeung.top/2019/%E5%9B%BE%E8%AE%BA%E5%B8%B8%E8%A7%81%E9%A2%98%E7%9B%AE%E5%8F%8A%E7%AE%97%E6%B3%95/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/%E5%9B%BE%E8%AE%BA%E5%B8%B8%E8%A7%81%E9%A2%98%E7%9B%AE%E5%8F%8A%E7%AE%97%E6%B3%95/</guid>
                <pubDate>Thu, 14 Mar 2019 21:00:07 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;近来都在刷 CCF 的题，准备认证考试。最近几天开始刷其中的第四题，一般而言，CCF 的第四题都是图论题。对于我这样之前没怎么刷题的人来说，图论题看上去就感觉很难，主要是感觉到很陌生，因为在实际的开发过程中比较少用到图这样的数据结构，都是线性的数据结构，连树都比较少用。&lt;/p&gt;
&lt;p&gt;但是在刷得比较多的图论题后，发现其实图论题好像也就那么回事，也不是说简单，主要感觉来来去去都是考那几个东西，如果是没有接触过或者不会做的话，可能有点难，但是只要接触过相似的，直接套板子修改就行了（当然也有可能是我还接触的不够多 XD），另外，就是感觉没有什么题是 DFS/BFS 不能破，只是会不会超时，能拿多少的分的问题（对于 CCF 认证只想拿 300 分而言，有几十分就够了），其实很多算法的核心也就是 DFS 与 BFS。&lt;/p&gt;
&lt;p&gt;所以在今晚刷完了 CCF 往年所有的第四题后，总结一下最近接触的图论问题及解法。&lt;/p&gt;
&lt;h2 id=&#34;数据结构&#34;&gt;数据结构&lt;/h2&gt;
&lt;p&gt;首先，在解决问题之前，我们要先做好图论输入的模拟，图可以分为有向无向，有无权值。一般是以邻接矩阵或者邻接表的形式表示。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邻接矩阵 :&lt;code&gt;graph = [[INF/False for _ in range(n+1)] for _ in range(n+1)] #带权值或无权图&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;邻接表：&lt;code&gt;graph = [{}/[] for _ in range(n+1)] # 带权值或无权图&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说，邻接矩阵表示比较简单，但是时间空间成本都比较高，选用邻接表比较好，不过在 CCF 的认证似乎差别不大（样例水&lt;/p&gt;
&lt;h2 id=&#34;问题及解法&#34;&gt;问题及解法&lt;/h2&gt;
&lt;h3 id=&#34;最小生成树&#34;&gt;最小生成树&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题：给一个无向带权图，选取其中一定数量的边生成一个包含所有点的树，且权值最小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prim 算法：优先队列 +BFS，每次弹出距生成树距离最小的未加入生成树的点&lt;/li&gt;
&lt;li&gt;Kruskal 算法：边排序 + 并查集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最优灌溉&lt;/li&gt;
&lt;li&gt;数据中心&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;最短路径&#34;&gt;最短路径&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于一个图，指定两点间的最短距离，或者是指定一点的最长路径长度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;迪杰斯特拉算法：优先队列 每次弹出到源点距离最小的点，并修改邻接的未确定点，记录确定情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spfa：队列 将源点入队列，每次弹出点后，修改邻接的点的距离，若修改且未入队则加入队列，记录入队列情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;floyd 算法：求多源最短路径问题&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;dis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变形：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最短路径中对特殊点有数量限制：spfa 中将数量记录放入队列 开二维 dp 数组&lt;/li&gt;
&lt;li&gt;大路小路问题（小路的权值为连续小路权值的平方）：floyd 算法生成新的小路边 开两个 dp 数组进行 spfa&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;强连通分量&#34;&gt;强连通分量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在有向图中，两个点互相可达称为强连通，任意两点均为强连通的子图称为强连通分量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tarjar 算法：记录节点访问时间及最短时间，深度遍历邻接点并入栈，更新最短时间。当出现访问时间等于最短时间时，栈顶到该节点构成一个强连通分量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tarjan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;global&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;DNF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LOW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;stack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;instack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;edges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;tarjan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;LOW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LOW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LOW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;LOW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LOW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LOW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DNF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LOW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;instack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变形：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果只是求强连通的点的对数，也可直接每一个点分别 BFS/DFS，确定单向可达性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;树的直径&#34;&gt;树的直径&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在树中，任意两个叶子节点的最长路径为树的直径&lt;/li&gt;
&lt;li&gt;方法：当成图两次 BFS，第一次任一点开始，第二次由第一次结果开始&lt;/li&gt;
&lt;li&gt;实例：
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scottyeung.top/2019/CCF201503-4-%E7%BD%91%E7%BB%9C%E5%BB%B6%E6%97%B6/&#34;&gt;网络延时&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;欧拉路径&#34;&gt;欧拉路径&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个图如果能从一个点出发，每条边都经过一次后回到起始点，则这个图为欧拉图，这个遍历的路径为欧拉路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查连通性：并查集 find union 检测是否每一个点都属于同一集合&lt;/li&gt;
&lt;li&gt;检查是否存在欧拉路径：每个点的度数均为偶数，或只有两个点度数为奇数且这两个点为起点终点&lt;/li&gt;
&lt;li&gt;确定存在欧拉路径后，直接 DFS 遍历，记录访问过的边&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/CCF/">CCF</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E5%9B%BE%E8%AE%BA/">图论</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Python/">Python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>CCF201503-4 网络延时</title>
                <link>https://scottyeung.top/2019/CCF201503-4-%E7%BD%91%E7%BB%9C%E5%BB%B6%E6%97%B6/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/CCF201503-4-%E7%BD%91%E7%BB%9C%E5%BB%B6%E6%97%B6/</guid>
                <pubDate>Thu, 14 Mar 2019 18:35:19 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;h3 id=&#34;问题描述&#34;&gt;问题描述&lt;/h3&gt;
&lt;p&gt;　　给定一个公司的网络，由 &lt;em&gt;n&lt;/em&gt; 台交换机和 &lt;em&gt;m&lt;/em&gt; 台终端电脑组成，交换机与交换机、交换机与电脑之间使用网络连接。交换机按层级设置，编号为 1 的交换机为根交换机，层级为 1。其他的交换机都连接到一台比自己上一层的交换机上，其层级为对应交换机的层级加 1。所有的终端电脑都直接连接到交换机上。&lt;br&gt;
　　当信息在电脑、交换机之间传递时，每一步只能通过自己传递到自己所连接的另一台电脑或交换机。请问，电脑与电脑之间传递消息、或者电脑与交换机之间传递消息、或者交换机与交换机之间传递消息最多需要多少步。&lt;/p&gt;
&lt;h3 id=&#34;样例&#34;&gt;样例&lt;/h3&gt;
&lt;h4 id=&#34;输入格式&#34;&gt;输入格式&lt;/h4&gt;
&lt;p&gt;　　输入的第一行包含两个整数 &lt;em&gt;n&lt;/em&gt;, &lt;em&gt;m&lt;/em&gt;，分别表示交换机的台数和终端电脑的台数。&lt;br&gt;
　　第二行包含 &lt;em&gt;n&lt;/em&gt; - 1 个整数，分别表示第2、3、……、 &lt;em&gt;n&lt;/em&gt; 台交换机所连接的比自己上一层的交换机的编号。第 &lt;em&gt;i&lt;/em&gt; 台交换机所连接的上一层的交换机编号一定比自己的编号小。&lt;br&gt;
　　第三行包含 &lt;em&gt;m&lt;/em&gt; 个整数，分别表示第 1、2、……、&lt;em&gt;m&lt;/em&gt; 台终端电脑所连接的交换机的编号。&lt;/p&gt;
&lt;h4 id=&#34;输出格式&#34;&gt;输出格式&lt;/h4&gt;
&lt;p&gt;输出一个整数，表示消息传递最多需要的步数。&lt;/p&gt;
&lt;h4 id=&#34;样例输入&#34;&gt;样例输入&lt;/h4&gt;
&lt;p&gt;4 2
1 1 3
2 1&lt;/p&gt;
&lt;h4 id=&#34;样例输出&#34;&gt;样例输出&lt;/h4&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;h4 id=&#34;样例说明&#34;&gt;样例说明&lt;/h4&gt;
&lt;p&gt;　　样例的网络连接模式如下，其中圆圈表示交换机，方框表示电脑：
&lt;img src=&#34;https://scottyeung.top/posts/network1.png&#34; alt=&#34;img&#34;&gt;
　　其中电脑1与交换机4之间的消息传递花费的时间最长，为4个单位时间。&lt;/p&gt;
&lt;h4 id=&#34;样例输入-1&#34;&gt;样例输入&lt;/h4&gt;
&lt;p&gt;4 4&lt;br&gt;
1 2 2&lt;br&gt;
3 4 4 4&lt;/p&gt;
&lt;h4 id=&#34;样例输出-1&#34;&gt;样例输出&lt;/h4&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;h4 id=&#34;样例说明-1&#34;&gt;样例说明&lt;/h4&gt;
&lt;p&gt;　　样例的网络连接模式如下：
&lt;img src=&#34;network2.png&#34; alt=&#34;img&#34;&gt;
　　其中电脑1与电脑4之间的消息传递花费的时间最长，为4个单位时间。&lt;/p&gt;
&lt;h3 id=&#34;评测用例规模与约定&#34;&gt;评测用例规模与约定&lt;/h3&gt;
&lt;p&gt;前30%的评测用例满足：&lt;em&gt;n&lt;/em&gt; ≤ 5, &lt;em&gt;m&lt;/em&gt; ≤ 5。&lt;br&gt;
前50%的评测用例满足：&lt;em&gt;n&lt;/em&gt; ≤ 20, &lt;em&gt;m&lt;/em&gt; ≤ 20。&lt;br&gt;
前70%的评测用例满足：&lt;em&gt;n&lt;/em&gt; ≤ 100, &lt;em&gt;m&lt;/em&gt; ≤ 100。&lt;br&gt;
所有评测用例都满足：1 ≤ &lt;em&gt;n&lt;/em&gt; ≤ 10000，1 ≤ &lt;em&gt;m&lt;/em&gt; ≤ 10000。&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;问题的本质比较简单，就是求树中任意两个叶子节点的最大路径。求单一个节点的最大路径，可以使用 DFS 或者 BFS 暴搜，于是马上想到了一个版本，对所有的叶子节点 DFS，分别求出其最大路径，然后取其中的最大值。&lt;/p&gt;
&lt;h3 id=&#34;version-1&#34;&gt;Version 1&lt;/h3&gt;
&lt;p&gt;明确了直接暴力 DFS 的方法后，接下来的任务就是读取数据创建数据结构。看到题面给出的图示，很明显可以看到这里描述的是一个树结构，然后想当然地就建立了树节点，构建树结构。读取数据，建立相应的树节点，并将其添加到相应的父节点下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;no&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#是计算机还是交换机&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;核心的 DFS 思路为对于当前节点，如果访问过直接退出，否则判断其是否叶子节点，是则结算路径长度，若大于最大路径，则更新。不是叶子节点，则往下递归搜索其子节点。搜完后再往上搜父节点。代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isLeaf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;接下来则主要根据读取的数据确定哪些是叶子节点，然后从叶子节点开始dfs即可，最终提交得分40分，显示运行错误。个人猜测可能是爆了递归空间（然而规模还在40个点内，存疑）。&lt;/p&gt;
&lt;h3 id=&#34;version-2&#34;&gt;Version 2&lt;/h3&gt;
&lt;p&gt;上网搜了一下这个题，发现了一个新的概念——树的直径。树的直径定义为树中两个叶子节点的最大距离，其实也就是我们题目中所求的东西。对于树的直径，可以有一个比较简单的方法计算：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从任意一个节点 s 开始，通过 DFS 或者 BFS 找出该节点的最长路径以及路径另一端的节点u&lt;/li&gt;
&lt;li&gt;从 1 求出的节点 u 开始 DFS 或者 BFS 找出最长路径 u-t，这个最长路径则为整个树中的任意两节点的最长路径&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/forever_dreams/article/details/81051578&#34;&gt;这方法很好证明&lt;/a&gt;，在第一步中，我们任意一个节点 s 开始的 DFS 找到的最长路径的另一端节点u必然是最长路径的一个端点，因为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若s在最长路径上，搜索结果必然是最长路径的端点&lt;/li&gt;
&lt;li&gt;若s不在最长路径上，使用反证法，可分为
&lt;ul&gt;
&lt;li&gt;最长路径与2结果有交点&lt;/li&gt;
&lt;li&gt;最长路径与2结果无交点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，根据上述的方法引入，直接可以修改版本1的代码，在dfs函数中，添加对最长路径端点的记录，即可将dfs的规模降低至只需两次dfs，再次提交，只有60分，也是显示运行错误，郁闷。&lt;/p&gt;
&lt;h3 id=&#34;version-3&#34;&gt;Version 3&lt;/h3&gt;
&lt;p&gt;因为此前提示的都是运行错误而不是超时，考虑可能是超出递归的空间限制，睡醒后决定重新写一个BFS的版本。在上午查阅别人代码时，发现大家都是直接用图来表示树结构，仔细想了一下，确实是可以的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，树就是一个无向图&lt;/li&gt;
&lt;li&gt;其次，在求最大路径长度时，其实是不需要考虑它判断它是否叶子节点，如果路径的端点不是叶子，则一定其子节点的路径长度一定比它大&lt;/li&gt;
&lt;li&gt;另外，题目给出的是交换机和计算机，看上去有区别，我在第一个版本也将其分开了，但是其实两个都还是一样的节点，并不需要区别&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后原理还是利用版本2中求两次最大长度的方法，不过这一次我选择使用BFS，用队列循环代替递归，防止运行错误。核心BFS代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bfs_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;dis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;重新提交后，获得100分，用时也比上面的短。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yeung66/codesAboutCCF/blob/master/201503/network.py&#34;&gt;详细代码点此&lt;/a&gt;&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/CCF/">CCF</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Python/">Python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>CCF201612-4 压缩编码</title>
                <link>https://scottyeung.top/2019/CCF201612-4-%E5%8E%8B%E7%BC%A9%E7%BC%96%E7%A0%81/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/CCF201612-4-%E5%8E%8B%E7%BC%A9%E7%BC%96%E7%A0%81/</guid>
                <pubDate>Tue, 12 Mar 2019 14:15:57 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;h3 id=&#34;问题描述&#34;&gt;问题描述&lt;/h3&gt;
&lt;p&gt;　　给定一段文字，已知单词&lt;em&gt;a&lt;/em&gt;1, &lt;em&gt;a&lt;/em&gt;2, …, &lt;em&gt;an&lt;/em&gt;出现的频率分别&lt;em&gt;t&lt;/em&gt;1, &lt;em&gt;t&lt;/em&gt;2, …, &lt;em&gt;tn&lt;/em&gt;。可以用01串给这些单词编码，即将每个单词与一个01串对应，使得任何一个单词的编码（对应的01串）不是另一个单词编码的前缀，这种编码称为前缀码。&lt;br&gt;
　　使用前缀码编码一段文字是指将这段文字中的每个单词依次对应到其编码。一段文字经过前缀编码后的长度为：&lt;br&gt;
　　&lt;em&gt;L&lt;/em&gt;=&lt;em&gt;a&lt;/em&gt;1 的编码长度 ×&lt;em&gt;t&lt;/em&gt;1+&lt;em&gt;a&lt;/em&gt;2 的编码长度 ×&lt;em&gt;t&lt;/em&gt;2+…+ &lt;em&gt;an&lt;/em&gt; 的编码长度×&lt;em&gt;tn&lt;/em&gt;。&lt;br&gt;
　　定义一个前缀编码为字典序编码，指对于1 ≤ &lt;em&gt;i&lt;/em&gt; &amp;lt; &lt;em&gt;n&lt;/em&gt;，&lt;em&gt;ai&lt;/em&gt;的编码（对应的01串）的字典序在&lt;em&gt;ai&lt;/em&gt;+1编码之前，即 &lt;em&gt;a&lt;/em&gt;1, &lt;em&gt;a&lt;/em&gt;2, …, &lt;em&gt;an&lt;/em&gt; 的编码是按字典序升序排列的。&lt;br&gt;
　　例如，文字E A E C D E B C C E C B D B E中， 5个单词A、B、C、D、E出现的频率分别为1, 3, 4, 2, 5，则一种可行的编码方案是A:000, B:001, C:01, D:10, E:11，对应的编码后的01串为1100011011011001010111010011000111，对应的长度 &lt;em&gt;L&lt;/em&gt; 为 3×1+3×3+2×4+2×2+2×5=34。&lt;br&gt;
　　在这个例子中，如果使用哈夫曼(Huffman)编码，对应的编码方案是A:000, B:01, C:10, D:001, E:11，虽然最终文字编码后的总长度只有33，但是这个编码不满足字典序编码的性质，比如C的编码的字典序不在D的编码之前。&lt;br&gt;
　　在这个例子中，有些人可能会想的另一个字典序编码是A:000, B:001, C:010, D:011, E:1，编码后的文字长度为35。&lt;br&gt;
　　请找出一个字典序编码，使得文字经过编码后的长度&lt;em&gt;L&lt;/em&gt;最小。在输出时，你只需要输出最小的长度&lt;em&gt;L&lt;/em&gt;，而不需要输出具体的方案。在上面的例子中，最小的长度&lt;em&gt;L&lt;/em&gt;为34。&lt;/p&gt;
&lt;h3 id=&#34;输入格式&#34;&gt;输入格式&lt;/h3&gt;
&lt;p&gt;　　输入的第一行包含一个整数&lt;em&gt;n&lt;/em&gt;，表示单词的数量。&lt;br&gt;
　　第二行包含&lt;em&gt;n&lt;/em&gt;个整数，用空格分隔，分别表示&lt;em&gt;a&lt;/em&gt;1, &lt;em&gt;a&lt;/em&gt;2, …, &lt;em&gt;an&lt;/em&gt;出现的频率，即&lt;em&gt;t&lt;/em&gt;1, &lt;em&gt;t&lt;/em&gt;2, …, &lt;em&gt;tn&lt;/em&gt;。请注意&lt;em&gt;a&lt;/em&gt;1, &lt;em&gt;a&lt;/em&gt;2, …, &lt;em&gt;an&lt;/em&gt;具体是什么单词并不影响本题的解，所以没有输入&lt;em&gt;a&lt;/em&gt;1, &lt;em&gt;a&lt;/em&gt;2, …, &lt;em&gt;an&lt;/em&gt;。&lt;/p&gt;
&lt;h3 id=&#34;输出格式&#34;&gt;输出格式&lt;/h3&gt;
&lt;p&gt;　　输出一个整数，表示文字经过编码后的长度&lt;em&gt;L&lt;/em&gt;的最小值。&lt;/p&gt;
&lt;h3 id=&#34;样例输入&#34;&gt;样例输入&lt;/h3&gt;
&lt;p&gt;5&lt;br&gt;
1 3 4 2 5&lt;/p&gt;
&lt;h3 id=&#34;样例输出&#34;&gt;样例输出&lt;/h3&gt;
&lt;p&gt;34&lt;/p&gt;
&lt;h3 id=&#34;样例说明&#34;&gt;样例说明&lt;/h3&gt;
&lt;p&gt;　　这个样例就是问题描述中的例子。如果你得到了35，说明你算得有问题，请自行检查自己的算法而不要怀疑是样例输出写错了。&lt;/p&gt;
&lt;h3 id=&#34;评测用例规模与约定&#34;&gt;评测用例规模与约定&lt;/h3&gt;
&lt;p&gt;　　对于30%的评测用例，1 ≤ &lt;em&gt;n&lt;/em&gt; ≤ 10，1 ≤ &lt;em&gt;ti&lt;/em&gt; ≤ 20；&lt;br&gt;
　　对于60%的评测用例，1 ≤ &lt;em&gt;n&lt;/em&gt; ≤ 100，1 ≤ &lt;em&gt;ti&lt;/em&gt; ≤ 100；&lt;br&gt;
　　对于100%的评测用例，1 ≤ &lt;em&gt;n&lt;/em&gt; ≤ 1000，1 ≤ &lt;em&gt;ti&lt;/em&gt; ≤ 10000。&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;乍一眼看上去似乎跟霍夫曼编码相关，虽然题目明确了霍夫曼编码结果不一定是满足字典序的，但估计解法应该是霍夫曼编码的变形。然而还是没什么头绪，上网一搜，发现这是一个经典的dp问题——&lt;a href=&#34;https://blog.csdn.net/acdreamers/article/details/18039073&#34;&gt;石子问题&lt;/a&gt;。石子问题描述为：有n堆石子，每次合并2堆，合并花费为两堆石子之和，求合成的最小花费。问题可分为三种类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每次任意合并两堆石子（则变成霍夫曼树构造&lt;/li&gt;
&lt;li&gt;每次合并相邻两堆石子（通过确保只合并相邻石子确保满足字典序&lt;/li&gt;
&lt;li&gt;每次合并相邻两堆石子，且石子环形排列（2的升级版&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里，我们只讨论第二种情况。状态转移方程如下，&lt;code&gt;dp[i][j]&lt;/code&gt;表示合并第i堆到第j堆石子的花费（编码第i个单词到第j个单词的长度花费），&lt;code&gt;sums[i]&lt;/code&gt;为前i堆石子（单词）的总花费。实际上是在区间i到j之间寻找一个最优的分界点，左右分别合并，再加上总体的花费。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#i==j&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#i!=j and i&amp;lt;=k&amp;lt;=j&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;容易分析，需要三层循环（i，j，k），时间复杂度为$O(n^3)$。提交后能有60分，显示运行超时，但这个是非Python的操作用时，估计实际考试也能过。针对这种情况，上面博文提到可以使用&lt;a href=&#34;https://baike.baidu.com/item/%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%B8%8D%E7%AD%89%E5%BC%8F?fr=aladdin&#34;&gt;平行四边形优化&lt;/a&gt;(百科里写得很烂)，对于像上面的状态转移方程，可设 &lt;code&gt;p[i][j]&lt;/code&gt;为区间i到j中最优的k值，则有 &lt;code&gt;p[i][j-1]&amp;lt;=p[i][j]&amp;lt;=p[i+1][j]&lt;/code&gt; 。因此，我们可以缩小k的遍历范围，可证其复杂度降低了一个数量级，为 $O(n^2)$，修改后提交能够获得100分。&lt;/p&gt;
&lt;p&gt;详细代码可&lt;a href=&#34;https://github.com/yeung66/codesAboutCCF/blob/master/201612/compresscode.py&#34;&gt;点此&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;运行结果&#34;&gt;运行结果&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://scottyeung.top/posts/%E6%8D%95%E8%8E%B7.JPG&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/CCF/">CCF</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Python/">Python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>CCF201412-3 集合竞价</title>
                <link>https://scottyeung.top/2019/CCF201412-3-%E9%9B%86%E5%90%88%E7%AB%9E%E4%BB%B7/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/CCF201412-3-%E9%9B%86%E5%90%88%E7%AB%9E%E4%BB%B7/</guid>
                <pubDate>Wed, 06 Mar 2019 10:13:48 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;h3 id=&#34;问题描述&#34;&gt;问题描述&lt;/h3&gt;
&lt;p&gt;某股票交易所请你编写一个程序，根据开盘前客户提交的订单来确定某特定股票的开盘价和开盘成交量。&lt;br&gt;
该程序的输入由很多行构成，每一行为一条记录，记录可能有以下几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;buy p s 表示一个购买股票的买单，每手出价为p，购买股数为s。&lt;/li&gt;
&lt;li&gt;sell p s 表示一个出售股票的卖单，每手出价为p，出售股数为s。&lt;/li&gt;
&lt;li&gt;cancel i表示撤销第i行的记录。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果开盘价为p0，则系统可以将所有出价至少为p0的买单和所有出价至多为p0的卖单进行匹配。因此，此时的开盘成交量为出价至少为p0的买单的总股数和所有出价至多为p0的卖单的总股数之间的较小值。
　　
你的程序需要确定一个开盘价，使得开盘成交量尽可能地大。如果有多个符合条件的开盘价，你的程序应当输出最高的那一个。&lt;/p&gt;
&lt;!-- more--&gt;
&lt;h3 id=&#34;输入格式&#34;&gt;输入格式&lt;/h3&gt;
&lt;p&gt;　　输入数据有任意多行，每一行是一条记录。保证输入合法。股数为不超过108的正整数，出价为精确到恰好小数点后两位的正实数，且不超过10000.00。&lt;/p&gt;
&lt;h3 id=&#34;输出格式&#34;&gt;输出格式&lt;/h3&gt;
&lt;p&gt;　　你需要输出一行，包含两个数，以一个空格分隔。第一个数是开盘价，第二个是此开盘价下的成交量。开盘价需要精确到小数点后恰好两位。&lt;/p&gt;
&lt;h3 id=&#34;样例输入&#34;&gt;样例输入&lt;/h3&gt;
&lt;p&gt;buy 9.25 100&lt;br&gt;
buy 8.88 175&lt;br&gt;
sell 9.00 1000&lt;br&gt;
buy 9.00 400&lt;br&gt;
sell 8.92 400&lt;br&gt;
cancel 1&lt;br&gt;
buy 100.00 50&lt;/p&gt;
&lt;h3 id=&#34;样例输出&#34;&gt;样例输出&lt;/h3&gt;
&lt;p&gt;9.00 450&lt;/p&gt;
&lt;h3 id=&#34;评测用例规模与约定&#34;&gt;评测用例规模与约定&lt;/h3&gt;
&lt;p&gt;　　对于100%的数据，输入的行数不超过5000。&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;h3 id=&#34;核心思路&#34;&gt;核心思路&lt;/h3&gt;
&lt;p&gt;分析问题，需要找出使成交量最大的开盘价，我们只需遍历所有的价格，找出其中成交量最大的即可。所有可能的价格集合，其实就是买卖记录中出现的价格，结合输入的行数不超过5000，规模不大，直接暴力算出就行，看上去很简单。然而，这道题却搞了我一个晚上，提交过程一波三折，分数从30到50，再到90，最后才AC。&lt;/p&gt;
&lt;h3 id=&#34;版本迭代&#34;&gt;版本迭代&lt;/h3&gt;
&lt;h4 id=&#34;30分版本&#34;&gt;30分版本&lt;/h4&gt;
&lt;p&gt;在有了上面算法的大体思路后，主要的实现其实就是读取输入，存取买卖记录，根据记录撤销记录。一开始，我使用的是两个数组来分别存储买卖交易记录，然后用一个whole的数组来记录第i条记录在哪里，当要撤销记录时，才whole数组找到记录实际位置并取消。&lt;/p&gt;
&lt;p&gt;提交后提示运行错误，30分&lt;/p&gt;
&lt;h4 id=&#34;50分版本&#34;&gt;50分版本&lt;/h4&gt;
&lt;p&gt;分析30分版本的代码，会出现运行错误，无非是撤销记录出了问题，修改测试用例，加入了多条撤销指令，运行结果异常，撤销了非指定的记录。仔细分析后，发现问题在于，我通过whole数组来存储要撤销的指令在哪个数组（买还是卖）以及其索引，但在撤销指令删除某一条记录后，记录在买卖数组中的索引**可能（当要撤销的记录前有已经被撤销的记录）**会发生变化，而这种索引的变化并没有更新到whole数组，所以会导致撤销了错误的记录，甚至导致索引越界的错误。&lt;/p&gt;
&lt;p&gt;于是，考虑直接重写这部分的代码，这次我放弃了此前的一次循环一步到位读取输入，直接变成了三步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取输出，添加到数组&lt;/li&gt;
&lt;li&gt;根据撤销指令撤销相关的指令：这里我是直接将要撤销的指令和撤销指令本身设为&lt;code&gt;None&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将指令去除&lt;code&gt;None&lt;/code&gt;后分开为&lt;code&gt;buy&lt;/code&gt;和&lt;code&gt;sell&lt;/code&gt;数组，存储买卖记录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但在实现撤销记录的过程中，又想到了另一个问题：如果我撤销的记录是一条撤销记录呢？纠结了一下好不好发生这种情况，回去细看问题描述，&lt;code&gt;cancel&lt;/code&gt;也是一种记录，而&lt;code&gt;cancel i&lt;/code&gt;的作用是撤销第i条记录。所以说，这种情况是有可能出现的。撤销了撤销记录的效果会怎样呢？按照字面意思来说，撤销第i行的记录，就应该是&lt;code&gt;cancel&lt;/code&gt;记录无效了，为此，想到了一个比较巧妙的实现方法，将上面的第二步改为倒序遍历记录，实现撤销记录。&lt;/p&gt;
&lt;p&gt;提交后错误，50分&lt;/p&gt;
&lt;h4 id=&#34;90分版本&#34;&gt;90分版本&lt;/h4&gt;
&lt;p&gt;上面只有50分，非常的奇怪，内心觉得应该是上面纠结的撤销撤销记录的问题。改了一下，待撤销的记录是撤销记录的话就不撤销了，重新提交后，90分，说明前面关于撤销 &lt;code&gt;cancel&lt;/code&gt; 记录的理解是错的。很是难受，难受不是因为说这一题错了，卡住了我，更关键的是，我这个理解是认真读题目描述，仔细分析字面意思，完完全全是根据题目得出来的理解，这也错了。上网搜了一圈，发现大多数人也是在吐槽这个设定。也算是一个自我安慰？&lt;/p&gt;
&lt;h4 id=&#34;100分版本&#34;&gt;100分版本&lt;/h4&gt;
&lt;p&gt;分析上面的代码，还有10分丢在了哪里？通常错一个用例来说，都是卡在了特殊用例上面，有什么特殊用例呢？会不会是没有成交量？但很快就否定了，如果成交量为0，那里价格就可以取到无限高了（因为多个价格取值成交量相同时，取最高价格）。翻了一下别人的代码，发现有人直接用了浮点数也过了，但是我考虑到精度的问题，选择的是将读取的浮点数乘以100再转成整数处理，最后输出再转回去。于是我修改了测试用例，加入了一条两位小数的记录，果然输出异常了，当我输入一条价格为10.12的记录时，浮点数读取是 10.12，乘以 100 后却变成了 1011.99999999 而不是设想的 1012.0，然后还是直接取整，出事了。改成直接浮点数后，AC了，将取整改成 &lt;code&gt;round&lt;/code&gt; 也能过。&lt;/p&gt;
&lt;h4 id=&#34;最终ac代码&#34;&gt;最终AC代码&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;buy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sell&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;records&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;inp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;records&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;EOFError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;records&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;records&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;startswith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;cancel&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;records&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;startswith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;cancel&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;records&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;records&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;records&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;records&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;records&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;buy&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;buy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sell&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;all_prices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;all_prices&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;all_prices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all_prices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ans_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans_count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all_prices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;buy_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sell_count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buy_count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sell_count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buy_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sell_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans_count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans_price&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%.2f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;提交结果如下图（中间的C++实现是测试网上其它人的代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://scottyeung.top/posts/1551842146877.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Python/">Python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/CCF/">CCF</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Wildcard Matching</title>
                <link>https://scottyeung.top/2019/Wildcard-Matching/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/Wildcard-Matching/</guid>
                <pubDate>Fri, 01 Mar 2019 10:46:12 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;source: &lt;a href=&#34;https://leetcode-cn.com/problems/wildcard-matching/&#34;&gt;Wildcard Matching&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;difficulty: hard&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given an input string (&lt;code&gt;s&lt;/code&gt;) and a pattern (&lt;code&gt;p&lt;/code&gt;), implement wildcard pattern matching with support for &lt;code&gt;&#39;?&#39;&lt;/code&gt;and &lt;code&gt;&#39;*&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#39;?&#39; Matches any single character.
&#39;*&#39; Matches any sequence of characters (including the empty sequence).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The matching should cover the &lt;strong&gt;entire&lt;/strong&gt; input string (not partial).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; could be empty and contains only lowercase letters &lt;code&gt;a-z&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; could be empty and contains only lowercase letters &lt;code&gt;a-z&lt;/code&gt;, and characters like &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
s = &amp;quot;aa&amp;quot;
p = &amp;quot;a&amp;quot;
Output: false
Explanation: &amp;quot;a&amp;quot; does not match the entire string &amp;quot;aa&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
s = &amp;quot;aa&amp;quot;
p = &amp;quot;*&amp;quot;
Output: true
Explanation: &#39;*&#39; matches any sequence.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
s = &amp;quot;cb&amp;quot;
p = &amp;quot;?a&amp;quot;
Output: false
Explanation: &#39;?&#39; matches &#39;c&#39;, but the second letter is &#39;a&#39;, which does not match &#39;b&#39;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 4:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
s = &amp;quot;adceb&amp;quot;
p = &amp;quot;*a*b&amp;quot;
Output: true
Explanation: The first &#39;*&#39; matches the empty sequence, while the second &#39;*&#39; matches the substring &amp;quot;dce&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 5:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
s = &amp;quot;acdcb&amp;quot;
p = &amp;quot;a*c?b&amp;quot;
Output: false
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;h3 id=&#34;函数递归调用&#34;&gt;函数递归调用&lt;/h3&gt;
&lt;p&gt;这道题好像在不知道哪里见过，第一反应就是可以递归解决。&lt;/p&gt;
&lt;p&gt;实际上，我们需要特别考虑的，就是这个&lt;code&gt;*&lt;/code&gt;的匹配情况，对于当前两个字符串，&lt;code&gt;*&lt;/code&gt;可以匹配空字符，也可以匹配一个字符，核心的递归式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;isMatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isMatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:])&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isMatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
				&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isMatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;方法简单可行，实际上是一个DFS，但是在leetcode上面会超时，用上一个cache缓存后勉强ac。虽然思路简单很容易想到，但递归次数太多，太慢，不是一个好方法。&lt;/p&gt;
&lt;h3 id=&#34;dp&#34;&gt;DP&lt;/h3&gt;
&lt;p&gt;根据子字符串与子pattern的匹配情况从前往后进行计算.&lt;/p&gt;
&lt;p&gt;设dp[i][j]表示前i个匹配pattern可否匹配前j个待匹配字符串&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#能否匹配空字符串取决于前面的pattern&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;比较标准的dp方法，运算时间比上面函数递归调用方法快了一半，但执行时间还是很久&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/LeetCode/">LeetCode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Python/">Python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>CCF201604-2 俄罗斯方块</title>
                <link>https://scottyeung.top/2019/CCF201604-2-%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/CCF201604-2-%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</guid>
                <pubDate>Mon, 25 Feb 2019 10:08:18 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;h3 id=&#34;问题描述&#34;&gt;问题描述&lt;/h3&gt;
&lt;p&gt;　　俄罗斯方块是俄罗斯人阿列克谢·帕基特诺夫发明的一款休闲游戏。&lt;br&gt;
　　游戏在一个15行10列的方格图上进行，方格图上的每一个格子可能已经放置了方块，或者没有放置方块。每一轮，都会有一个新的由4个小方块组成的板块从方格图的上方落下，玩家可以操作板块左右移动放到合适的位置，当板块中某一个方块的下边缘与方格图上的方块上边缘重合或者达到下边界时，板块不再移动，如果此时方格图的某一行全放满了方块，则该行被消除并得分。&lt;br&gt;
　　在这个问题中，你需要写一个程序来模拟板块下落，你不需要处理玩家的操作，也不需要处理消行和得分。&lt;br&gt;
　　具体的，给定一个初始的方格图，以及一个板块的形状和它下落的初始位置，你要给出最终的方格图。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;输入格式&#34;&gt;输入格式&lt;/h3&gt;
&lt;p&gt;　　输入的前15行包含初始的方格图，每行包含10个数字，相邻的数字用空格分隔。如果一个数字是0，表示对应的方格中没有方块，如果数字是1，则表示初始的时候有方块。输入保证前4行中的数字都是0。&lt;br&gt;
　　输入的第16至第19行包含新加入的板块的形状，每行包含4个数字，组成了板块图案，同样0表示没方块，1表示有方块。输入保证板块的图案中正好包含4个方块，且4个方块是连在一起的（准确的说，4个方块是四连通的，即给定的板块是俄罗斯方块的标准板块）。&lt;br&gt;
　　&lt;strong&gt;第20行包含一个1到7之间的整数，表示板块图案最左边开始的时候是在方格图的哪一列中&lt;/strong&gt;。注意，这里的板块图案指的是16至19行所输入的板块图案，如果板块图案的最左边一列全是0，则它的左边和实际所表示的板块的左边是不一致的（见样例）&lt;/p&gt;
&lt;h3 id=&#34;输出格式&#34;&gt;输出格式&lt;/h3&gt;
&lt;p&gt;　　输出15行，每行10个数字，相邻的数字之间用一个空格分隔，表示板块下落后的方格图。注意，你不需要处理最终的消行。&lt;/p&gt;
&lt;h3 id=&#34;样例输入&#34;&gt;样例输入&lt;/h3&gt;
&lt;p&gt;0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 1 0 0&lt;br&gt;
0 0 0 0 0 0 1 0 0 0&lt;br&gt;
0 0 0 0 0 0 1 0 0 0&lt;br&gt;
1 1 1 0 0 0 1 1 1 1&lt;br&gt;
0 0 0 0 1 0 0 0 0 0&lt;br&gt;
0 0 0 0&lt;br&gt;
0 1 1 1&lt;br&gt;
0 0 0 1&lt;br&gt;
0 0 0 0&lt;br&gt;
3&lt;/p&gt;
&lt;h3 id=&#34;样例输出&#34;&gt;样例输出&lt;/h3&gt;
&lt;p&gt;0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 0 0 0&lt;br&gt;
0 0 0 0 0 0 0 1 0 0&lt;br&gt;
0 0 0 0 0 0 1 0 0 0&lt;br&gt;
0 0 0 0 0 0 1 0 0 0&lt;br&gt;
1 1 1 1 1 1 1 1 1 1&lt;br&gt;
0 0 0 0 1 1 0 0 0 0&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;该问题是一题较为常见的模拟题，需要我们模拟方块的下落情况。就难度而言，并不困难，但相对于其为第二道题的顺序，则稍显得有些麻烦。&lt;/p&gt;
&lt;p&gt;具体思路为：读取输入构造方格图，找到下落方块的位置，逐行下降，直至其无法下降为止。思路其实很简单，其核心在于，如何判断方块是否能继续下降，实现了这判断方法，就比较简单了。在这里，我是通过检测下落方块与方块图对于区域是否有重合判断，我将方块图对应位置矩阵与下落方块图相加，若有一元素为2，则出现碰撞，无法下落而结束。具体代码如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#读取输入构建方格图&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;board&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#最方格图最下面加一行防止溢出&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;board&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#读取下落方块&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#为什么要减1？第pos行的实际下标为pos-1&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#删除下落方格中空行&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;    
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;del&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;new_m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;new_n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;board&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sumup&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;collsion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sumup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;collsion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;collsion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;collsion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;board&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;board&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该代码提交后正确，获得了100分。&lt;/p&gt;
&lt;h2 id=&#34;reflect&#34;&gt;Reflect&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;方法上：
&lt;ul&gt;
&lt;li&gt;在检测能否下落的方法上，其实没有必要从这个对应的矩阵上来判断，可以找出下落方块中为1的点，每次下落只检测这些点在方格图上对应坐标点是否为1。后者在开发效率，运行效率上都更佳。而矩阵相加的方法，直观上实现似乎也很简单，但事实上，原生python对于矩阵运算（即二维数组处理）并没有很好的支持，我一开始觉得实现简单大概是因为此前写了一点Octave，这个语言与python语法有点相近，且完美支持矩阵运算，被影响到了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解题过程上：这道题作为CCF认证的第二道题，按理来说，是水题，应该快速解决，而实际上，这道题也没有很难，没有涉及到复杂的算法，规模也不大，但是，我却用了一个多小时，而且还没AC，有点可笑，如果是真实的考试中，已经凉了。究其原因，主要有以下几点：
&lt;ol&gt;
&lt;li&gt;未考虑清楚就动手写代码。虽然一直对自己强调要想好再开始写代码，但实际上，当有时没什么头绪，或者想得不是太清楚的时候，就会着急写代码，美其名曰先把不需要想的写了，然后边写边想，加快解题速度，但这样却很容易影响思考，让人想不太清楚，并且会被已写的代码影响后续的思考。像这一道题，核心应该是下落过程中能否下落/有无碰撞，但我一开始还没想到方法时，先去实现了一些无关紧要的事，如下落方块中空行空列的删除，并且因为这些事卡住了一段时间，更为好笑的是空列删除还是不必要的。&lt;/li&gt;
&lt;li&gt;一条路上走到黑。在想到的方法实现/运行上出现问题时，我选择的是修复/调试实现代码，而从未去思考过是修改/更换方法，当然其实两种方法都没什么问题，但有时候，因为方法未思考清楚，或者实现起来难度或效果跟预想有偏差，继续在该方法待下去有点浪费时间，就像本题中的碰撞检测所采用的矩阵相加方法来判断，在python原生实现并没有想象中简便。&lt;/li&gt;
&lt;li&gt;读题/题意理解。最后之所以不能AC，即使在本机测试样例能够正确运行，提交后却只有十分，百思不得其解，翻了很多其他人的代码，才发现我对于题意的理解出了偏差。输入的下落位置，表示的应该是整个下落方块最左边（含空列）在第几列（从1开始），而我的理解是，实际方块（不含空列）下落位置在第几列（从0开始），感觉题干说得有点不太清楚，而且唯一的测试样例还有二义性，对于两种解释都符合。在发现了这一点之后再重新看题，似乎在输入上也有点提示，输入在1-7之间，如果是从0开始计数，岂不是无法移到最左面，当然这也是马后炮了，实在可惜。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Python/">Python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/CCF/">CCF</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Merge k Sorted Lists</title>
                <link>https://scottyeung.top/2019/Merge-k-Sorted-Lists/</link>
                <guid isPermaLink="true">https://scottyeung.top/2019/Merge-k-Sorted-Lists/</guid>
                <pubDate>Wed, 30 Jan 2019 10:30:23 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Source: &lt;a href=&#34;https://leetcode-cn.com/problems/merge-k-sorted-lists/&#34;&gt;Merge K Sorted Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;difficulty: hard&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Merge &lt;em&gt;k&lt;/em&gt; sorted linked lists and return it as one sorted list. Analyze and describe its complexity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
[
  1-&amp;gt;4-&amp;gt;5,
  1-&amp;gt;3-&amp;gt;4,
  2-&amp;gt;6
]
Output: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5-&amp;gt;6
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;h3 id=&#34;分析&#34;&gt;分析&lt;/h3&gt;
&lt;p&gt;问题是对于K个有序链表的排序与合并，所以第一时间就能想到归并排序。在归并排序中，我们可将两个有序数组通过常数时间的比较，线性时间一次遍历即可。此处为k个列表，则有k个数的比较，比较的复杂度就不为常数时间。由此马上想到了第一个暴力的方法。&lt;/p&gt;
&lt;h3 id=&#34;1-k个归并&#34;&gt;1. k个归并&lt;/h3&gt;
&lt;p&gt;思路与归并排序一致，只是将比较从两个数变为k个数，每一轮比较k个列表的第一个元素（最小值），找出最小值并更新该链表指针。因而单轮比较的复杂度变为与k相关的线性时间，设数字个数总和为n个（下同），则时间复杂度为$O(kn)$。代码如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Solution&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mergeKLists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        :type lists: List[ListNode]
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        :rtype: ListNode
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ListNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;lists&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#去除特例k=0&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mini&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mini&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mini&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ListNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mini&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;del&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该种方法简单直接粗暴，在leetcode上也能通过，但是执行用时很大，处在后9%的位置，不值得推荐&lt;/p&gt;
&lt;h3 id=&#34;2-用堆归并&#34;&gt;2. 用堆归并&lt;/h3&gt;
&lt;p&gt;在方法1中，每一轮寻找k个列表中的最小值均需要线性时间复杂度，且每一轮中除开最小值外，其余元素均会被重复访问，浪费了此前的遍历过程，于是我们可以引入最小堆，来存储每个链表中的最小值，每一轮弹出最小值后只需动态更新最小堆即可。初始建立最小堆的时间复杂度为$O(klog(k))$，每获取并添加一个最小的元素，并更新最小堆所需的时间复杂度为$O(log(k))$，所以总的时间复杂度为$O(nlog(k))$（因为n&amp;gt;k恒成立&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Solution&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;cmp_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__lt__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mergeKLists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        :type lists: List[ListNode]
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        :rtype: ListNode
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;list_heap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;list_heap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cmp_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list_heap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;

        &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;heapq&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;heapq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heapify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list_heap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;heapq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heappop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list_heap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_node&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;walk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;heapq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heappush&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list_heap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cmp_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;walk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list_heap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;walk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;heapq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heappop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list_heap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_node&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;walk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;walk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;heapq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heappush&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list_heap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cmp_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;walk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这里使用了python标准库中自带的堆库，其中可以对一个list建堆只要list中的元素可以比较（这通过建立新类型并实现&lt;code&gt;__lt__&lt;/code&gt;函数实现。&lt;/p&gt;
&lt;p&gt;该方法为方法1的优化版本，执行时间大幅减少，并且思路较为简单，因为python提供堆的标准库，实现也比较简单，在熟悉标准库的情况下，值得推荐。可是对我这种并不知道基本数据结构的标准库的人来说，要我手写一个堆很是麻烦，因此我也用不了&lt;/p&gt;
&lt;h3 id=&#34;3-两两归并&#34;&gt;3. 两两归并&lt;/h3&gt;
&lt;p&gt;思路跟归并排序一样，甚至相比与方法1，更加接近归并排序。这种方法使用递归的思路，每次将所有链表分成两部分，每一部分均调用原函数再次合并，然后将两部分的链表进行合并，当两部分的链表出现只有两个时，可直接套用归并排序中的合并。所以该方法的时间复杂度为$O(nlog(k))$，其中log(k)为递归调用次数。&lt;/p&gt;
&lt;p&gt;将复杂度而言，该方法与方法2使用堆的方法复杂度相近，但该方法无须用到数据结构堆，使用了递归的思想，更容易实现。&lt;/p&gt;
&lt;h3 id=&#34;4-合并排序&#34;&gt;4. 合并排序&lt;/h3&gt;
&lt;p&gt;提交之后看别人执行用时少的方法，发现排在最前面的方法居然是一种很暴力的方法：遍历所有链表合成一个数组，然后进行排序，再重新生成一个链表。按照时间复杂度来分析，遍历所有元素生成数组需要时间n，排序需要nlogn，总共需要$O(nlogn)$时间复杂度，按理来说，这个时间复杂度是要比上面的方法二方法三都要慢的，但实际上，这反而是最快的，看了一下讨论区，说的是python中排序算法的实现底层使用了c语言来实现的，所以用时比实际的其它python操作要快得多。但感觉这个方法还是不太好，因为这种方法还完全忽略了题目中链表这一性质（虽然也没怎么用到）&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/LeetCode/">LeetCode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Python/">Python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Mysql忘了root密码怎么办</title>
                <link>https://scottyeung.top/2018/Mysql%E5%BF%98%E4%BA%86root%E5%AF%86%E7%A0%81%E6%80%8E%E4%B9%88%E5%8A%9E/</link>
                <guid isPermaLink="true">https://scottyeung.top/2018/Mysql%E5%BF%98%E4%BA%86root%E5%AF%86%E7%A0%81%E6%80%8E%E4%B9%88%E5%8A%9E/</guid>
                <pubDate>Thu, 29 Nov 2018 20:03:35 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;在准备做Windows程序设计的大作业时，需要用到 Mysql。打开了 Mysql WorkBench 连接本地数据库时，提示要输入 root 密码，试了几个常用密码无果后，发现自己再次忘记了 Mysql 的 root 密码。但是没有关系，本人已经习惯忘记各种不太常用的账号密码了，驾轻就熟地打开百度搜索相关方法，却发现来来去去都是那同一个方法，而且还因为版本问题与实际情况有些差异，最终还是花费了不少的时间，有点难受，遂写一文记录一下。&lt;/p&gt;
&lt;h2 id=&#34;方法&#34;&gt;方法&lt;/h2&gt;
&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;
&lt;p&gt;纵观百度各种方法，思路均是大致一样：运用mysql的&lt;code&gt;-skip-grant-tables&lt;/code&gt;参数，可以使进入 mysql 时免去密码验证，进入 mysql 后修改&lt;code&gt;mysql.user&lt;/code&gt;用户表中 root 用户的密码，以达到解决忘记密码的问题。&lt;/p&gt;
&lt;h3 id=&#34;具体步骤&#34;&gt;具体步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;以管理员身份打开 cmd，关闭 mysql&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;net stop mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mysqld -nt -skip-grant-tables&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;回车后界面卡住&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以管理员身份打开另一个cmd，输入&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mysql -u root -p&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;回车后进入mysql&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来在mysql中修改root用户的密码，相应的用户信息也是按数据表的形式存储在 &lt;code&gt;mysql.user&lt;/code&gt; 中，我们就可以改数据库数据的方式来修改密码，但这里有一点问题，mysql 的几个版本的用户表的列名都不一样，需要区别对待&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;mysql 5.6&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;newpassword&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;flush&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;privileges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mysql 5.7：password列消失，取而代之的是authentication_string&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;authentication_string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;newpassword&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;flush&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;privileges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mysql 8：password函数被移除，需要改变方式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;k&#34;&gt;flush&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;privileges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;alter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;identified&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;newpassword&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该方法是同时适用与mysql5.7和8，可谓是一种更为优雅的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重新启动mysql，正常使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;net start mysql
mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;后续&#34;&gt;后续&lt;/h2&gt;
&lt;p&gt;修改root密码方法的教程网上有很多，但是我经过一通操作后，还是无法进入mysql。在进行上文的方法操作时，在通过 &lt;code&gt;-skip-grant-tables&lt;/code&gt; 时我便出现了错误，提示mysql根目录中data目录不存在，搜索网上的教程，建议是自己新建一个data文件夹，新建后便可正常免密码验证进入mysql。但按照后续的步骤操作后，还是无法正常修改root密码，进入 mysql。仔细思考，为什么我这里没有data目录，不仅如此，我这里还没有在众多教程中提到的my.ini配置文件，突然想起，自还原电脑后，我好像还没在本系统使用过mysql，我的mysql还没有初始化，其实并不算是忘记root密码的问题（可能是我太经常忘记了，已经习以为常）。但因为我强行新建了 data 目录，进入 mysql，已经打乱了项目的结构，无法还原。反正里面没什么数据，就打算干脆删了重新装一个 mysql。&lt;/p&gt;
&lt;h3 id=&#34;卸载&#34;&gt;卸载&lt;/h3&gt;
&lt;p&gt;mysql的卸载比较简单，当时我是用 Mysql Installer 安装的，直接进入 Mysql Installer 进行卸载即可。如果不是的话，就比较麻烦了，到控制面板把 Mysql Server 卸载了，再把 mysql 项目所在文件夹删除，然后再到注册表删除相关项，详情可参照&lt;a href=&#34;https://www.jb51.net/article/146050.htm&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;两种方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一是使用 &lt;a href=&#34;https://dev.mysql.com/downloads/windows/installer/&#34;&gt;Mysql Installer&lt;/a&gt;。使用该在线安装软件非常方便，还可选择安装配套的 mysql 相关软件，安装完后可直接进入傻瓜式配置，无需进行额外的配置，且后续的卸载也可以在这上面进行，个人比较推荐。但该软件只能运行在 Windows 上，且只能安装最新版本的 mysql8。尝试了一下，在初始化数据库时出现问题，而搜索该问题发现关于新版本 mysql 的相关信息非常少，遂放弃新版本，放弃该方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二是使用&lt;a href=&#34;https://dev.mysql.com/downloads/mysql/&#34;&gt;压缩包&lt;/a&gt;安装。选择相应的版本下载压缩包解压即可。这种方式则需要手动额外配置。主要步骤有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建配置文件 my.ini，下面的 basedir 和 datadir 替换为本机 mysql 目录，若有则不用创建&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;k&#34;&gt;[mysqld]&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;3306&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;basedir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;C:/software/mysql-5.7.21-winx64&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;datadir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;C:/software/mysql-5.7.21-winx64/data &lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;max_connections&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;200&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;character-set-server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;utf8&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;default-storage-engine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;INNODB&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;sql_mode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;[mysql]&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;default-character-set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;utf8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;增加环境变量。将&lt;code&gt;C:/software/mysql-5.7.21-winx64/bin&lt;/code&gt;添加到path中（注意换成本机mysql目录）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装mysql&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mysqld -install
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化MySQL&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mysqld --initialize-insecure --user&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动mysql&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;net mysql start
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置root密码，回车后会提示输入旧密码，直接回车即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mysqladmin -u root -p password 密码
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装完成&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Mysql/">Mysql</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Maximum Product of Word Lengths</title>
                <link>https://scottyeung.top/2018/Maximum-Product-of-Word-Lengths/</link>
                <guid isPermaLink="true">https://scottyeung.top/2018/Maximum-Product-of-Word-Lengths/</guid>
                <pubDate>Sun, 11 Nov 2018 20:26:29 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Given a string array &lt;code&gt;words&lt;/code&gt;, find the maximum value of &lt;code&gt;length(words[i]) * length(words[j])&lt;/code&gt; where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [&amp;quot;abcw&amp;quot;,&amp;quot;baz&amp;quot;,&amp;quot;foo&amp;quot;,&amp;quot;bar&amp;quot;,&amp;quot;xtfn&amp;quot;,&amp;quot;abcdef&amp;quot;]
Output: 16 
Explanation: The two words can be &amp;quot;abcw&amp;quot;, &amp;quot;xtfn&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [&amp;quot;a&amp;quot;,&amp;quot;ab&amp;quot;,&amp;quot;abc&amp;quot;,&amp;quot;d&amp;quot;,&amp;quot;cd&amp;quot;,&amp;quot;bcd&amp;quot;,&amp;quot;abcd&amp;quot;]
Output: 4 
Explanation: The two words can be &amp;quot;ab&amp;quot;, &amp;quot;cd&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [&amp;quot;a&amp;quot;,&amp;quot;aa&amp;quot;,&amp;quot;aaa&amp;quot;,&amp;quot;aaaa&amp;quot;]
Output: 0 
Explanation: No such pair of words.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;h3 id=&#34;集合暴力法&#34;&gt;集合暴力法&lt;/h3&gt;
&lt;h4 id=&#34;思路&#34;&gt;思路&lt;/h4&gt;
&lt;p&gt;看到这种需要需要判断有无相同元素的问题，第一时间就想到使用集合&lt;code&gt;set()&lt;/code&gt;及其相关运算。题中给出的是字符串，遂先将字符串转成字母集合，然后就两层循环，找出两两对应集合没有交集的字符串的长度乘积最大值。&lt;/p&gt;
&lt;h4 id=&#34;代码&#34;&gt;代码&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Solution&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;maxProduct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;words&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        :type words: List[str]
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        :rtype: int
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;set_words&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;words&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;word_1&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;words&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;word_2&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;words&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]:&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_words&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;set_words&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]):&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;word_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;word_2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;
                    
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;评价&#34;&gt;评价&lt;/h4&gt;
&lt;p&gt;速度太慢，用时1500ms，差不多处于后10%了，尽管在时间复杂度上已达到渐近的下限（似乎是 $O(n^2)$)，原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用集合虽然方便但集合运算耗时还是有的（对比与下面的位位运算&lt;/li&gt;
&lt;li&gt;在找最大值时没有好好利用Python自带的库函数和语法糖（自己写的就是比它慢！）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;mask位运算200ms&#34;&gt;Mask位运算(200+ms&lt;/h3&gt;
&lt;h4 id=&#34;思路-1&#34;&gt;思路&lt;/h4&gt;
&lt;p&gt;将字符串中26个字母分别对应到二进制中的每一位上，然后将其通过或运算生成 mask，每个 mask 代表字符串含有的字母，然后可以通过和运算两两 mask 判断其是否有重复字母。&lt;/p&gt;
&lt;h4 id=&#34;代码-1&#34;&gt;代码&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Solution&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;maxProduct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;words&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        :type words: List[str]
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        :rtype: int
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;masks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;words&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;masks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;masks&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;masks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;masks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;masks&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;masks&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;评价-1&#34;&gt;评价&lt;/h4&gt;
&lt;p&gt;速度大大提升，用时200ms，到别人的提交里翻了一下，前面的都是选择用这种位运算的方法。对比上面自己的使用集合的暴力方法，速度的提升主要便是位运算代替集合运算所节省的时间，尤其是判断两者是否有共同元素，使用&amp;amp;运算只需极短的常数时间（一条指令），而集合交集还要两者搜索，时间差距主要在此。另外，还有使用列表生成式的语法糖，也是非常能够精简代码结构（甚至执行时间？&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;该题是一道中等难度的判断重复公共元素的题目，不算难，值得学习的是其中用到的位运算。判断重复公共元素，第一时间想到的便是转成集合去解决，当然这个方法具有普适性，但当出现的元素为确定的有限元素（如字母，数码），便可以考虑选择使用位运算，这好像也是一种普遍的解决方法？我在下面的相关话题也看到了位运算的tag。&lt;/p&gt;
&lt;p&gt;顺便给出此前遇到的相关的使用位运算的一个题目:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/single-number/&#34;&gt;Single Number&lt;/a&gt;&lt;/p&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/LeetCode/">LeetCode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Python/">Python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Linux 文件系统中操作文件导致 NTFS 文件系统中文件丢失</title>
                <link>https://scottyeung.top/2018/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4NTFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%96%87%E4%BB%B6%E4%B8%A2%E5%A4%B1/</link>
                <guid isPermaLink="true">https://scottyeung.top/2018/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4NTFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%96%87%E4%BB%B6%E4%B8%A2%E5%A4%B1/</guid>
                <pubDate>Tue, 30 Oct 2018 19:07:39 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;在上周的时候，打算在 Ubuntu 下查看在 Windows 下 QQ 接受到的项目代码，然后顺便就整理了一下目录，新建了一个文件夹，将实验室相关的文件剪切复制到该文件夹。后切换回 Windows，发现文件夹没有建成功，而刚才剪切的文件不见了。&lt;/p&gt;
&lt;p&gt;无独有偶，本周一上课纪录模式识别笔记时，顺手归档了一下这门课文件夹下的作业，课件，笔记（在 Windows 下的 Ntfs 分区中），然后周二上课打开 Windows 系统后，发现文件丢失，新建的归档文件夹也不见了，然后昨天修改的 markdown 笔记也损坏无法打开。&lt;/p&gt;
&lt;h2 id=&#34;思考过程&#34;&gt;思考过程&lt;/h2&gt;
&lt;h3 id=&#34;测试&#34;&gt;测试&lt;/h3&gt;
&lt;p&gt;由于两次的文件丢失均在两系统中操作（剪切）文件时发生，遂打算在 Linux 系统中对 Windows 系统的文件进行不同操作，以观察有无发生文件丢失现象，找出触发原因，后续避免。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 NTFS 分区中创建文件，在另一系统中无丢失。&lt;/li&gt;
&lt;li&gt;修改 NTFS 分区中的文件内容，在另一系统中能正常显示&lt;/li&gt;
&lt;li&gt;复制 NTFS 分区中文件，文件正常&lt;/li&gt;
&lt;li&gt;剪切 NTFS 分区中文件，文件正常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也不知道幸运与否，测试了数次均没有出现文件丢失问题，无法找到直接的触发原因。&lt;/p&gt;
&lt;h3 id=&#34;解决&#34;&gt;解决&lt;/h3&gt;
&lt;p&gt;在第一次出现问题后，马上去百度查询剪切文件丢失，被告知是剪切过程极不稳定，容易发生错误导致文件丢失，但感到很不靠谱，剪切错误后应该会马上有告知信息，而我剪切后在已经能够在 Ubuntu 的文件系统中看到粘贴后结果。但心急于恢复文件，还是采用了所提供的一些方法，将其当作误删文件来恢复。&lt;/p&gt;
&lt;p&gt;第二次出现问题后，因为有第一次的经验，很熟练地就恢复文件了。结合上一次的经历来看，个人猜想应该是两个文件系统不一致所导致（然而上面的测试已经告诉我们是可以的）。到 Google 上搜了一下，相关的信息还是很少，然后换成用英语搜，终于见到几个出现相同的状况了（所以是中国人都没有遇到这个问题吗 2333 ）。然而也没有给出一个确定的解释，不过其中有一个解释感觉挺靠谱的（&lt;a href=&#34;https://askubuntu.com/questions/49000/files-disappear-on-ntfs-partition&#34;&gt;链接在此&lt;/a&gt;)，其解释是在使用 Linux 系统时，Windows 系统未完全关闭（处于睡眠状态），Linux 的文件系统修改文件后，Windows 系统启动后又再次修改该文件以修复，导致文件崩溃。然而，我的 Windows 似乎是关机的，甚至我还不知道怎么睡眠一个系统切换到另一系统，但说得很有道理，姑且先接受。&lt;/p&gt;
&lt;p&gt;所以，到最后也没有找到确定的原因导致文件的丢失，只能说在 Linux 下使用 ntfs 文件系统有可能会出错，换而言之，还是不知道怎么避免（除非不用）。但文件丢失后的解决方法还是有的，虽然不一定能全复原：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用文件恢复软件。将其当初误删文件处理，成功率还不错。本人使用的是 DiskGenius 专业版（非专业版限制恢复文件的大小，略坑），成功找回了两次丢失的文件，但该软件复原时需全盘扫描，速度较慢。&lt;/li&gt;
&lt;li&gt;在 Windows 系统中使用&lt;code&gt;chkdsk&lt;/code&gt;命令，进行文件系统的检查修复。该方法在 Google 过程中看到，多人推荐，感觉应该也可以。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;警示&#34;&gt;警示&lt;/h3&gt;
&lt;p&gt;虽然文件最后都找回来了，但文件丢失还是一件很恐怖的事，应该留点教训的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;备份。自己一直都没有备份的习惯，所有的重要的文件（如学习资源）等都只存在了电脑的硬盘上，万一出事，如电脑坏了，丢了，直接 GG。某些大作业或项目直接爆炸，就好像这学期的编译器。&lt;/li&gt;
&lt;li&gt;时常留意文件状况。好像这两次的文件丢失，幸好发现得早，能够及早恢复，如果再晚一点，对硬盘进行了新的写入，就难以恢复，甚至可能自己的忘了有什么文件，有没有丢失，需要恢复什么。&lt;/li&gt;
&lt;li&gt;少做跨文件系统的文件写入操作。虽然好像跟操作本身是没有关系，但很多事都是可以做，但没有必要。如剪切移动等，通过复制等较低风险进行代替，最好是以读为主。&lt;/li&gt;
&lt;li&gt;还有一个也是很有趣的，当遇到问题去搜索时，总是习惯先百度再 Google，都搜不到了，便听天由命。但这次，换了个语言，便发现未到尽头。感觉自己还是被语言束缚限制住了。&lt;/li&gt;
&lt;/ul&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E7%BB%8F%E5%8E%86%E5%9B%9E%E9%A1%BE/">经历回顾</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Ubuntu/">Ubuntu</category>
                                
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/Linux/">Linux</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>我为什么要开这个博客</title>
                <link>https://scottyeung.top/2018/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%80%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/</link>
                <guid isPermaLink="true">https://scottyeung.top/2018/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%80%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/</guid>
                <pubDate>Sun, 28 Oct 2018 18:33:21 &#43;0000</pubDate>
                
                    <author>yeungyeah@qq.com (YeungYeah)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;正文&#34;&gt;正文&lt;/h2&gt;
&lt;p&gt;心心念念很久的博客终于开通了，距离产生这个想法的大一下学期，已经过去一年半了。在这段时间当中虽然也有过不少的努力和尝试进行博客这个想法的实现，甚至还在大一下学期期末的时候还真的跟着某篇博客用Django倒腾出了一个算是能够用的博客，还部署到了服务器上，上了域名，然而最后死于没有文章产出，真的惭愧。&lt;/p&gt;
&lt;p&gt;为什么想着开一个博客呢？当时的想法是比较功利的。都说程序员需要有一点别人能够看得到的成果，什么Github上有一定数量Star的项目，博客上有较大的流量。然而这个想法非常幼稚，首先没有这个能力，又怎么能够出成果呢，所谓的成果，也只不过是在倒腾别人的东西，没什么价值。其次，在这么功利的目的驱动下，对内容的制作兴趣不大，写的东西简单，网上同质化太严重，写的东西太难，自己也很吃力，很费工夫。&lt;del&gt;当然最主要的死因还是自己太懒。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;到了这个学期（大三上）开始，无意中看了两个学长的博客，内容挺多，也挺不错，抛开技术性之类的因素先不说，但就学习路径的记录而言，效果很不错，感觉将是一个很不错的回忆资料。另外，个人的学习过程中，虽然感到输入很多（个人自吹），但还是剩不了多少。在暑假时过了一遍JS高级程设，看的时候很仔细，也有思考，然而单就这样看，偶尔敲敲样例代码，然后过了一个暑假开学后，就感觉已经忘了不少，效果嘛，可想而知。所以，我觉得要想更好的学习，在接受大量的输入的同时，应该还要有一定的输出，不谈输出的质量，有输出起码有点东西留下来。除了在技术的学习上，阅读也是，看的书也算挺多的，但收获了多少，我自己也不敢说，只能安慰自己是在非功利性地阅读。&lt;/p&gt;
&lt;p&gt;所以，这个博客来了。我也没有想着要能有多大的流量，就想着能够有点输出，留点记录，同时顺便锻炼一下自己输出的能力，这也是一个比较重要的能力，感觉也是我一直有所欠缺的。另外，我害怕被人评价，因而我甚至不敢留有对外的成品，害怕被评价，评价高了，我害怕对我的期望高了，评价低了，心里也不好受，所以一直没什么产出，甚至朋友圈都少发了，而博客，或许就是可以强迫自己克服恐惧去产出的地方，反正现在会也没有人看到，等到后面文章多了，你也不容易找到地方&lt;del&gt;吐槽&lt;/del&gt;评价，我也没那么担心了。&lt;/p&gt;
&lt;p&gt;尽管如此，这个博客开通速度还是比我想象中快了，我两周前打算开一个博客建了个项目，到今天就能上线，最主要的原因，还是换了个轮子。当时，想着对Python和Django的熟悉（也只有这个后端比较熟的），想的是直接找个前端的模板，后端Django+Mysql，虽然也不难，但在开发过程中，还是有很多繁琐的事，找个好看又符合风格的模板就不是一件简单的事，后续的前后端交接渲染，又是一堆麻烦事，例如页面模板清除默认样式，但使用markdown语法直接渲染的文章又依赖于默认的样式，这些琐碎事直接促使我放弃了这个项目，后转向Hexo，豁然开朗。原来还想通过这个博客项目，顺便练一下Django，结果花费了较多的精力和时间在开发本身，感觉有点本末倒置，要不是因为遇到了问题换了个方式，估计这第一篇博客还要晚一个多月，然后一个多月后开始考试，想法流产，GG。&lt;/p&gt;
&lt;p&gt;所以，开通了这个博客，还是很开心的，一方面，可以有一个地方迫使自己进行输出，从而提升自己，这对于现在很混的自己是一个很好契机（或许）；另一方面，可以有一个地方记录自己的经历，学习过程。希望自己能够坚持产出！&lt;/p&gt;
&lt;p&gt;最后，强推一波Hexo，可以考虑一下出一篇博客，记录一下如何瞬间完成博客的搭建部署，以惋惜一下那流产的Django项目&lt;/p&gt;
&lt;h2 id=&#34;flag&#34;&gt;Flag&lt;/h2&gt;
&lt;p&gt;第一篇文章，还是立点Flag比较好：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;坚持每周/两周产出一篇博客(已经快倒了)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;关于页面的书写&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;购买域名并绑定&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;博客的访问统计&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;博客的评论（但感觉好像没什么必要？ 但也已经实现了&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://scottyeung.top/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>
