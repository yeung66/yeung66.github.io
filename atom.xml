<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>YeungYeah 的乱写地</title><link>https://scottyeung.top/</link><description>YeungYeah 的乱写地中记录了作者的所思所想及所为。</description><generator>Hugo 0.83.1 https://gohugo.io/</generator><language>zh-CN</language><managingEditor>yeungyeah@qq.com (YeungYeah)</managingEditor><webMaster>yeungyeah@qq.com (YeungYeah)</webMaster><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><lastBuildDate>Wed, 28 Jul 2021 03:28:43 +0000</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://scottyeung.top/atom.xml"/><item><title>今日之大学</title><link>https://scottyeung.top/2021/current-college-life/</link><guid isPermaLink="true">https://scottyeung.top/2021/current-college-life/</guid><pubDate>Tue, 27 Jul 2021 16:48:49 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>今天在翻之前在看的一本书，名为《我的二本学生》，内容讲述了广东某二本学院老师对于其执教以来所接触到的学生的记录。虽然仅是类似于教学札记般的文字记述，但是胜在够于真实和细致，还是很能够让人了解到以前的大学生生活状态与今日之大学生的生活状态，及其两者的区别。&lt;/p>
&lt;p>今天在里面看到一个观点，讲到中国大学教育目标已经发生了明显的变化，以前的大学教育目标是为集体（社会和祖国）培养人才，而现在的教育目标，更多是在把学生培养成为了找到工作的就业主体，以温铁军老师的话来说，就是“把人变成资本化的一个要素”。作为一个计算机专业的学生来说，我对于这种转变的现象感到深以为然。&lt;/p>
&lt;blockquote>
&lt;p>我的大学时代，哪怕只是一个中专生、专科生，也被视为“天之骄子”，对农村的孩子而言，考上大学常常被视为“跳龙门”，并被国家从人事关系上认定为“干部”；而对 062111 班的学生而言，进入广东 F 学院这样的二本院校，并不能给他们带来太多精神上的荣耀感，从进入校门开始，还没来得及感受高中老师曾描绘的美妙大学时光，就被辅导员告知就业的压力。他们毕业时，更多人拿到的只是一份“劳务派遣”，可以说，刚刚卸下高考的重负，就绷上了找工作的弦，整个大学过程，不过教育产业化后被学校锻造为专业“流水线”上的一个规整产品，并被冠以“人力资源”的工具化表述。&lt;/p>
&lt;p>二十世纪九十年代初期的大学生，无论国家顶尖的北京大学，还是地方上的岳阳大学，在培养学生上，都首先立足将大学生还原到一个完整的人，注重学生的整体素养和长远发展，学生既不会被就业绑架，也不会盲目地受制于一些所谓的就业技能，而忽略掉更为重要的专业学习。在具体的教学计划和课程安排上，学生也会拥有充分的自主学习空间，不会延续高中时代的填鸭模式。&lt;/p>
&lt;/blockquote>
&lt;p>因为这种目标的改变，导致了进入大学校园的学生的行为与心态都发生了极大的改变，尤其是目标的明确化和具体化，使得上学时的行为路径也变得同一化与固定化。就我所在的计算机行业来看，现在的本科学生目标大概可以分成 3 类：继续升学读研读博；投身于互联网公司的相关工作；考取公务员编制或单位。每个目标都有着较为固定且“标准”的路径。如果选择出国或保研，那么就要好好应付课程来换取好的 GPA，及早地关注政策或者选校等信息，才可以能够有着好的学习选择。如果选择到互联网大厂成为一个搬砖码农，则需要尽早开始刷题，在正确的时间点上面刷够足够数量的算法题，背好面试题，并且在适合的时间参与暑期实习和秋招，才能找到一份好工作。如果是相当公务员或单位，则需要积极参加于各种党团活动，尽可能于各种组织中谋得个三两职位，获取任职经历，到了某个时间点之后，就可以关注各种信息，或是选调，或是省考国考，然后开始刷题准备。&lt;/p>
&lt;p>这些路径随着大家流传下来的经验逐渐固定并统一，形成了模板一样的行为模式，想做什么，就必须要按照路径一步步走，走错一步，或者是缺少一步，可能就没有理想的结果。然而问题却是，我们真的知道自己想要什么吗？或者说我们能够在入学早期的时候就能知道自己想要什么吗？好一点的可以做多手准备，企图往全面发展，但结果可能会是多面手但无一精，且耗费了许多精力。若只能准备单个方面，那这些缺失的准备又如何能够填补回来？就比如说有意通过选调进公务员系统的，一般都需要党员身份，好一点的部门岗位甚至需要有校级部门任职经历或者是校级的奖励，而这种事情是没有办法通过短时间突击换取而来的。这种路径的固定化，让我们在做选择的时候变得更加谨慎，也更加犹豫。&lt;/p>
&lt;p>另外这种路径固定化所带来的更重要的问题，是路径上面每个阶段节点都变得更加重要，每个阶段的结果都很重要，可能因为某一个结果不如预期，就宣判了这个路径和目标的失败。尤其是结合当下社会的普遍舆论，中国人的社会是不能容忍失败的，社会对于个人的失败要求是很苛刻的，一旦失败一次，机会就不会再有，对于某些人来说，可能就是人生受到了极大的打击。例如应届身份，可能因为刚毕业找到了一份不好的工作而丢失这个身份，就不得不去参加社招与有着几年经验的人竞争上岗，又或是就此失去大批单位或编制的报名资格，机会骤减。&lt;/p>
&lt;p>前两天在知乎看到一个&lt;a href="https://zhuanlan.zhihu.com/p/392899093?utm_source=wechat_session&amp;amp;utm_medium=social&amp;amp;utm_oi=71128873697280&amp;amp;utm_campaign=shareopn">回答&lt;/a>，里面提到今年开始规培变成了一年一考，且不设补考。有许多的名校医学博士规培了几年，就因为最终的规培考核某个科目挂了，就可能导致无法毕业没有学位证，错过已经考上的医院工作，执业医师证过期等种种后果（然而原帖的内容已经被删了，只能从评论中一窥究竟）。大多数人的路径就是这样一环扣一环，如果一环没有扣上，那可能整个链条都断掉。对于这些学生来说，没有学位证，入不了学，找不到工作，连转行的资格都没有。&lt;/p>
&lt;p>为什么需要对失败如此苛刻呢？个人感觉可能是因为我们环境中的人太多了，个人的失败对于集体而言实在是太过于无足轻重，你失败了，你掉下去，总会有其他人顶上来。失败的人要怎么办又会有谁来管，于是即可简单地将此归结于个人的主观原因上面，因为你失败了，所以你就没有机会，也不配有机会了。而你为什么会失败，也全都是你的个人原因，无论主观客观。&lt;/p>
&lt;p>回到我自己本身，其实对于所谓的职业路径选择，我也并不是十分确定，互联网公司还是单位编制，写代码的话是前端还是后台，都还不很明确。现在的我也只能够让自己在每一条路径上面都不出错不失败罢了吧。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category><category domain="https://scottyeung.top/tags/%E8%AF%BB%E4%B9%A6/">读书</category><category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category></item><item><title>软工科研随想</title><link>https://scottyeung.top/2021/%E8%BD%AF%E5%B7%A5%E7%A7%91%E7%A0%94%E9%9A%8F%E6%83%B3/</link><guid isPermaLink="true">https://scottyeung.top/2021/%E8%BD%AF%E5%B7%A5%E7%A7%91%E7%A0%94%E9%9A%8F%E6%83%B3/</guid><pubDate>Fri, 09 Jul 2021 11:18:39 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>感觉科研陷入了一种在纯空想的状态，明明软件工程是为了解决软件开发过程中的各种问题，但实际上大部分从事软工领域的科研人员并没有足够的开发相关经验，甚至缺乏相当的写代码的经历，这些人（包括我自己）是如何能够找到所谓的痛点，发现新的问题和场景呢？简单地通过到开源社区里面浏览开发人员的各种互动产生的各种 discussion 与 artifacts，再加以自己浅薄的了解与分析，我们就能够真正认识到在开发过程中尚存在什么需要解决的重要问题吗？&lt;/p>
&lt;p>为什么需要去寻找这些新的问题场景？从个人感受来说，发文章的工作无非是两种方向：&lt;/p>
&lt;ol>
&lt;li>寻找并定义新的问题场景。自己定义的新问题只要没有人做过，并且能够把这个问题的重要性讲好，基本上没什么问题。解决好了，是可以是开山之作，即使没能很好解决，也可以说是先把问题抛出了引发大家注意。&lt;/li>
&lt;li>对已有问题的更优新方法。通过对已经存在并有人研究过的方法进行继续研究，试图创造出性能更好，开销更小的方法。&lt;/li>
&lt;/ol>
&lt;p>通常来说，第二种方向往往需要有着更高的技术积累要求，因而可能更难，需要的时间周期也更长。所以像是硕士等短周期科研工作者（如我）往往会更倾向于第一种方向。于是乎最近在寻找新的工作方向的我就在一直想新的问题，不断地在重复以下流程&lt;/p>
&lt;ol>
&lt;li>在 GitHub 上面浏览一定数量 issues 并选择记录&lt;/li>
&lt;li>根据这些记录归纳总结可能可以做的问题&lt;/li>
&lt;li>把这些问题拿去讨论，然后逐个被告知已经有人做过或者很难做出来&lt;/li>
&lt;li>然后重新回到步骤 1&lt;/li>
&lt;/ol>
&lt;p>想起大四刚接触科研的时候就有过一个疑惑：&lt;/p>
&lt;blockquote>
&lt;p>好奇做 empirical study 的人是如何在没有某一个领域，某一个方面的专业知识，却能够对此做出深入而专业的分析。像 empirical study on bug，一般来说，做的人也并不是就研究这个方向的，就如 bugs in machine learning，研究人员也不是做 machine learning 的，但也还是能做出看上去还挺专业的分析，虽然涉及到的 machine Learning 的概念其实比较少。就像我现在做 llvm toolchain bug，我一没有接触过 llvm，工具链也不知道是啥，由我来做的分析真的可信/有价值吗？当前阅读 bug report 都有点吃力。
如何解决？想到两个点。一个是合作，每个人精通一方面的知识，通过合作获取意见，轮流充当 expert/data collecter/analyzer 的角色。另外一个是快速学习入门，但这个其实比较虚，不过其实做分析需要的水平其实也不是很高？&lt;/p>
&lt;/blockquote>
&lt;p>我们研究软件质量，会选择某些特定类型的软件来进行研究考察，但事实上我们并没有在这一类型或这一领域中有着深厚的专业知识，所以我们该如何对其做出深入而专业的分析，又或者说，为什么这类工作不交给领域相关的开发人员来负责其质量。也许是我们这也有着通用的，可以补上领域知识缺失的屠龙方法吧（当然可能合作更为关键）。&lt;/p>
&lt;p>&lt;del>所以到头来好像也没想出个什么结果，越想反而越加劝退自己了&lt;/del>&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E7%A7%91%E7%A0%94/">科研</category><category domain="https://scottyeung.top/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/">个人随笔</category><category domain="https://scottyeung.top/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/">软件工程</category></item><item><title>996 的二三事</title><link>https://scottyeung.top/2021/why-refuse-to-996/</link><guid isPermaLink="true">https://scottyeung.top/2021/why-refuse-to-996/</guid><pubDate>Fri, 25 Jun 2021 16:06:10 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>从五月中在 B 站上面刷到一些关于政经与哲学的视频之后又重新勾起了自己对于这方面知识内容的兴趣，陆续关注了一些 up 主进行了解~~，人也变得越来越左~~。其中有个比较喜欢的 up &lt;a href="https://space.bilibili.com/23191782">未明子&lt;/a> 谈了点关于 996 的话题，深以为然，觉得还是启发挺大的，于是写点东西把它记录下来。&lt;/p>
&lt;h2 id="什么是-996">什么是 996&lt;/h2>
&lt;p>现在总是在说 996，到底是什么是 996 呢？&lt;/p>
&lt;p>从字面上的意思来看，就是工作时间变成了早上 9 点上班，晚上 9 点下班，每周工作六天。与传统的 965 相比，每周的工作的时间多了 27 小时。以互联网行业来说，这些多出来的工作时间在大多数公司都可以被算作加班时间，可以获得额外的加班费以及相应的福利，因而会有人觉得加班很好，甚至主动加班，主动 996 来开卷。可能是因为太多这样的情况，导致高收入都逐渐与 996 划上等号了，如果想要收入高点，就必须要 996，如果要不加班，就要选择接受较低的收入。&lt;/p>
&lt;h2 id="996-的结果">996 的结果&lt;/h2>
&lt;p>所以说 996 就是通过付出更长的加班时间来换取更高的收入吗？或者说如果给多点钱是不是就可以接受 996 呢？想法很美好，但现实很残酷。&lt;/p>
&lt;p>个人消费的目的可以分成两大类型，一是用于再生产，二则是用于提高生产力的发展。后者很明显，就是可以提高自身生产力的投入，例如去学习知识，去练习技能，去维护人脉等。再生产则是指不断更新和重复的生产，个人理解则是为了让状态复原所需要的消费，包括：&lt;/p>
&lt;ul>
&lt;li>体力再生产：用于维持身体健康与体力恢复&lt;/li>
&lt;li>脑力再生产：娱乐提供情绪价值&lt;/li>
&lt;li>社会关系再生产：维护与他人的社会关系&lt;/li>
&lt;/ul>
&lt;p>社会关系再生产中有一种很重要的隐形支出，就是用于维护自己岗位，保护自己饭碗的再生产。这可以理解成需要付出一定的成本来保住工作的机会，换言之，工作的本质可以理解为个体户付出租金来换取工作的饭碗，这个付出的租金就是剩余价值。这个租金是隐形的，也是确实存在的。因为是隐形的，所以就需要与老板进行协商，但往往会被大家所忽略。&lt;/p>
&lt;p>996 的工作模式通过更多的工作时间提高了所创造的价值，但同时员工所需要付出的消费成本向随之增高，包括所付出的租金也相应按比例（甚至是更高的比例）提高了。更长时间的工作使得消费中各种再生产的成本大幅上涨：&lt;/p>
&lt;ul>
&lt;li>体力再生产：长时间工作容易使身体变差；缺乏时间去锻炼身体/保持健康&lt;/li>
&lt;li>脑力再生产：缺乏娱乐；缺乏脑力上的休息&lt;/li>
&lt;li>社会关系再生产：缺乏与他人交往的时间与机会&lt;/li>
&lt;/ul>
&lt;p>这些消费中的各项其实都可以通过时间来换取或者缓解成本，但是因为 996 的存在导致缺乏时间，使得各项的成本大幅上涨。而这些额外的消费成本其实是基本抵消甚至超过超时工作所获得的额外价值/收入，因而自己其实没什么收益，而公司与老板则通过躺收你多付出的租金，没有付出其余任何的代价，因而是净赚的。这也解释了为什么只要我们再努力一点，老板就能买大 house 了。&lt;/p>
&lt;h2 id="996-的本质">996 的本质&lt;/h2>
&lt;p>除了更长时间的工作以外，996 为什么还会使我们的消费成本大幅上涨呢？昨晚看完一个视频的讨论后，感觉很有启发。&lt;/p>
&lt;p>为什么 996 的工作时间是九点到九点呢？同样是干 12 个小时的工作模式，666 的效率不得要比 996 还要高吗？996 的工作模式当中，包含了中午饭以及晚饭，每顿饭一般都需要一个小时来解决，再加上吃饭前后工作的低效，其实就效率来讲，996 所带来的好处其实对于公司来说也不算多，尤其是许多人其实都会选择晚上吃完饭后回公司在办公时间摸鱼。如果说追求效率的话，大可以把工作时间提到 666，上下午各有两大段的工作时间，工作得更有效率，也更为纯粹。&lt;/p>
&lt;p>之所以是选择 99 这个工作时间区间，最大的主要原因还是想要包含了你的晚饭时间，进而控制你整个人。因为晚饭的时间被包含到了工作里面，所以就不能选择出去吃饭，就不能够与他人进行交际应酬，从而丧失了饭局时间，公关时间，商务时间。然而这些时间却往往是发展与交易诞生的地方，尤其是在中国式应酬的背景下，许多的生意都是在饭桌上面谈成。所以现在限制了这段时间，其实就是限制了个人发展机会，加大了自我发展的难度。同理，每周 6 天工作日也是如此，把你的休息日减少为一日，而你不得不把这一天的休息日完全拿来休息，而无法抽出时间与精力去参加应酬交际活动，也不会想把这天的休息时间拿去学习和自我提升。选择了 996，其实变相就等于放弃了这些机会，自绝了跳出去另寻机会的可能。&lt;/p>
&lt;p>所以说 996 的本质还不只是剥削，更多的是在 domination. 通过 996 的方式来控制来控制底下的员工，让其缺乏跳出被控制的能力。接受了 996 更像是接受了公司对自身的自我阉割，接受持续给老板打工的这个事实，甚至自觉加入到维护这份工作的任务中。&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1A84y1F7HE">【政治经济学】为什么再怎么省钱还是穷：花钱的本质，上班的本质，薪水的本质，996的本质，老板的本质&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1U5411T7tV">【社会观察】996的实质：不！是！剥！削！&lt;/a>&lt;/li>
&lt;/ol></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E5%93%B2%E5%AD%A6/">哲学</category><category domain="https://scottyeung.top/tags/%E8%AE%A8%E8%AE%BA/">讨论</category><category domain="https://scottyeung.top/tags/%E8%AE%B0%E5%BD%95/">记录</category></item><item><title>博客切换至 Hugo</title><link>https://scottyeung.top/2021/transform-to-hugo/</link><guid isPermaLink="true">https://scottyeung.top/2021/transform-to-hugo/</guid><pubDate>Thu, 03 Jun 2021 12:07:47 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>不到半年时间，又重新折腾过博客了。大概花了两天多的时间，把博客从原来的 Hexo + Stun 切换到 Hugo + MemE 上面。想要转换的原因有很多，例如&lt;/p>
&lt;ul>
&lt;li>使用 Hexo 生成页面的速度已经进入了有点慢的程度。我也不过 70 个页面，每次构建部署加上提交可能需要花上一两分钟，然后随着时间久了所写的内容越多，还会越来越久。&lt;/li>
&lt;li>原主题看着有点不太合适。现在的自己更加希望博客的风格往简洁靠近，让网站的聚焦点能回归到文字本身。这也促使自己这次在选主题的时候把文章主体不居中的都 ban 掉了。&lt;/li>
&lt;li>原博客感觉有着太多无用啰嗦的页面和功能，包括所谓的背景音乐播放。为了有着更好播放背景音乐体验，又不得不搞 PJAX。但实际上我自己点开背景音乐并播放的次数寥寥可数。&lt;/li>
&lt;/ul>
&lt;p>当然想要更换的最主要原因还是&lt;em>喜欢折腾&lt;/em>，这两天在折腾博客的时候，久违地感受到了那种心思全部集中在一个事情上面的状态。在迁移博客的时候，选主题，配环境，写迁移脚本，改写主题以获取想要的效果和功能，虽然也遇到一些坑，但还是能够拥有着持续的动力去继续和完善。看来自己是真的发自内心的喜欢折腾想折腾的东西。&lt;/p>
&lt;h2 id="迁移准备">迁移准备&lt;/h2>
&lt;p>因为 Hugo 和 Hexo 存在一些差异，同时我所选择的主题与原主题不一致，导致博客迁移到 Hugo 的时候需要做一些变更，才比较好实现无缝转换。 &lt;br>
主要需要考虑以下问题：&lt;/p>
&lt;ul>
&lt;li>路径组织差异&lt;/li>
&lt;li>分类标签差异&lt;/li>
&lt;li>评论功能实现&lt;/li>
&lt;/ul>
&lt;h3 id="路径">路径&lt;/h3>
&lt;p>在 Hexo 中文章的路径默认通过根目录配置文件的 permalink 来配置文章链接的构成，其可以使用常用的基础变量（年份，月份，标题），也可以使用在 front matter 中自行定义的变量。&lt;/p>
&lt;p>Hugo 则默认是根据在 content 目录下文件的组织情况来构建页面的链接的，也可以在配置文件下面通过配置 permalink 属性来实现，但可选择的变量比较少，通常为年月日标题与文件名，不支持使用自定义的 front matter 变量。&lt;/p>
&lt;p>我之前的博客链接使用的样式都是 &lt;code>/:year/:urlname&lt;/code>，通过在 front matter 中自定义文章的路径名。刚开始一直找不到 permalink 的正确配置方式，最终在文件的 front matter 中使用 url 属性来强行确定文章的链接。于是写了一个脚本，把所有 Markdown 文件当中的 urlname 属性改成 url，并在值前面加上年份，硬编码成 &lt;code>/:year/:urlname&lt;/code> 的形式。后来发现可以通过 slug 变量向 permalink 传递值，所以在配置中设置 &lt;code>posts = &amp;quot;/:year/:slug/&amp;quot;&lt;/code> 然后再写脚本把 url 属性转换为 slug 并去掉前面的年份编码。&lt;/p>
&lt;h3 id="分类标签">分类标签&lt;/h3>
&lt;p>刚复制几篇文章到 Hugo 时发现总是运行失败，提示 range cannot iterate 某个分类或标签，把它们删了就能够正确运行。后来发现是所使用的主题 MemE 总是预设这些属性是数组形式，因而如果分类或标签写成 &lt;code>tags: val&lt;/code> 的单行形式便会出错，需要写成多行形式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">tags&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="l">val&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为什么分类（category）明明只有一个，但需要使用数组呢？这里 Hugo 就与 Hexo 有点差异，Hugo 的分类其实与标签有点类似，Hugo 中更像 Hexo 的分类反而是 sections，这种是通过目录的文件结构来组织的。&lt;/p>
&lt;p>考虑到这个差异，我干脆把所有的分类都通过脚本一并删了。通过 tags 的方式来组织文章的分类。&lt;/p>
&lt;h3 id="评论功能实现">评论功能实现&lt;/h3>
&lt;p>之前使用的是 Waline 评论系统实现，选择的主题只提供 Valine 的设置，而且实现还是不完整，用不了的。于是我就仿照它的思路写了个 Waline 的实现，并且把未实现的部分实现了，并且补上了文章阅读量的显示。&lt;/p>
&lt;h2 id="博客到底需要什么">博客到底需要什么？&lt;/h2>
&lt;p>在博客迁移需要对博客的功能内容进行重新取舍时，不禁又在重新思考了一下这个问题：我在写一个博客的时候，到底需要些什么，需要向他人展示些什么？&lt;/p>
&lt;p>在最开始的时候，写博客不过就是在做技术类的笔记，大多时候都在摘抄与记录，少有自己的想法。而这种技术类的文章创作起来也不容易，就导致了更新也不频繁，内容不够充实。于是乎，就很容易花费心思到博客本身上面，而非文章内容本身，总是想着给博客加点什么功能，怎样让博客好看点，通过这样的方式来吸引人前来博客。于是越来越花哨，打开也越来越慢。这样的博客确实可能会给人打开时眼前一亮的感觉，但也仅会在第一次而已。&lt;/p>
&lt;p>在之前给女友写信寻找博客主题时，选择了一个很棒的极简主义风格主题。这个主题让我意识到，我应该要回归到博客的内容本身，让人们的视线重新聚焦到文字上面。所以这次挑选 Hugo 主题时就秉着这个条件，一是要简单，二是则以文字为主。当前这个主题感觉还是能够很好地符合我的要求。&lt;/p>
&lt;p>但写到这里就会觉得，其实在博客内容创造上面，我好像也陷入了一个瓶颈的位置。写技术类文章，简单的类文档形式的比较耗时且繁琐，不如去看官方文档；复杂点的技术性强点的文章，又会使阅读的门槛提高；记录自己爬坑经历与反思，但没有相似的具体场景的话有时也比较无味。写生活类文章，困于校园忙于学业的我似乎也找不到更多的时间去真正生活，即使遇到有意思的事情，首先会想到的也是记录在私密的周记记录当中。而关于练拳，养生，阅读等等各个方面的内容，感觉自己都有点半桶水的感觉。&lt;/p>
&lt;p>不过问题来了：文章写得不够好就不能写吗？显然不是的，越不够好就越要写，只有通过多写多练的方式才能促进水平提示，包括写作水平以及所写内容涉及到的领域水平。&lt;/p>
&lt;p>正如自己更新的个人介绍中写到&lt;/p>
&lt;blockquote>
&lt;p>🛠️ 什么都会点但又不够精通的杂才&lt;/p>
&lt;/blockquote>
&lt;p>希望自己早日能够从杂才成为通才吧！&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E5%8D%9A%E5%AE%A2/">博客</category><category domain="https://scottyeung.top/tags/Hugo/">Hugo</category><category domain="https://scottyeung.top/tags/%E7%BB%8F%E5%8E%86%E5%9B%9E%E9%A1%BE/">经历回顾</category></item><item><title>CSS 选择器</title><link>https://scottyeung.top/2021/css-selector/</link><guid isPermaLink="true">https://scottyeung.top/2021/css-selector/</guid><pubDate>Sat, 22 May 2021 18:39:56 +0000</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>翻 MDN 文档重新系统地学习下 CSS 选择器知识，记录下来当作笔记。&lt;/p>
&lt;p>所谓 CSS selector 用于在 HTML 文档中选取指定的元素节点，可用于 CSS 文件中设置 style 或者在某些库中选取元素节点（如爬虫）。&lt;/p>
&lt;h2 id="css-rules-中使用">CSS Rules 中使用&lt;/h2>
&lt;p>在 CSS 文件中 selector 通常为 Rules 的开头，每个 Rules 可以指定单个 selector 或者指定 selectors list，后者以逗号分割 (,)&lt;/p>
&lt;h2 id="css-选择器类型">CSS 选择器类型&lt;/h2>
&lt;ul>
&lt;li>Type selectors: 类型选择器，根据 &lt;code>tagname&lt;/code> 来选择对应的元素&lt;/li>
&lt;li>Universal selectors: 通用选择器，使用 &lt;code>*&lt;/code> 来匹配所有元素
&lt;ul>
&lt;li>可以增强伪类选择器的可读性： &lt;code>div *:first-child&lt;/code> instead of &lt;code>div :first-child&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Class selectors: 类选择器，使用 &lt;code>.classname&lt;/code> 来选择相应的元素
&lt;ul>
&lt;li>可以结合其它选择器如 &lt;code>span.highlight&lt;/code>&lt;/li>
&lt;li>可以同时选取包含多个 class 的元素 &lt;code>.class1.class2&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ID selectors: ID 选择器，使用 &lt;code>#id&lt;/code> 来选取相应元素&lt;/li>
&lt;li>Attribute selectors: 属性选择器，根据元素的属性来选择元素
&lt;ul>
&lt;li>&lt;code>[attr]&lt;/code>: 元素包括 attr 属性&lt;/li>
&lt;li>&lt;code>[attr='val']&lt;/code> : 元素的 attr 属性值为 val&lt;/li>
&lt;li>&lt;code>[attr~='val']&lt;/code> : 元素的 attr 属性为 val 或该属性的列表中包含 val（如 &lt;code>attr='val val1'&lt;/code>&lt;/li>
&lt;li>&lt;code>[attr|='val']&lt;/code> : 元素的 attr 属性为 val 或该属性以 val- 开头（如 &lt;code>attr='val-val1'&lt;/code>&lt;/li>
&lt;li>&lt;code>[attr^='val']&lt;/code> : 属性以 val 开头&lt;/li>
&lt;li>&lt;code>[attr$='val']&lt;/code> : 属性以 val 结尾&lt;/li>
&lt;li>&lt;code>[attr*='val']&lt;/code> : 属性包含 val&lt;/li>
&lt;li>取否定需要伪类选择器 &lt;code>:not([attr])&lt;/code>&lt;/li>
&lt;li>末尾添加 &lt;code>i&lt;/code> 可以是匹配大小写不敏感&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>pseudo-class: 伪类选择器，用 &lt;code>:pseudo-class-name&lt;/code> 可选择在特定状态的元素
&lt;ul>
&lt;li>选择指定顺序: &lt;code>first-child&lt;/code>, &lt;code>last-child&lt;/code>, &lt;code>first-of-type&lt;/code>, &lt;code>nth-child(n or an+b)&lt;/code>&lt;/li>
&lt;li>选择特定状态: &lt;code>checked&lt;/code>, &lt;code>disabled&lt;/code>, &lt;code>visited&lt;/code>&lt;/li>
&lt;li>for action: &lt;code>hover&lt;/code>, &lt;code>focus&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>pseudo-element: 伪元素选择器，使用 &lt;code>::pseudo-element&lt;/code> 选取
&lt;ul>
&lt;li>与伪类的区别伪元素会为选中的元素添加 HTML 片段，而伪类只会在原元素中修改&lt;/li>
&lt;li>选取特定位置: &lt;code>first-line&lt;/code>&lt;/li>
&lt;li>生成特定内容: &lt;code>before&lt;/code>, &lt;code>after&lt;/code> 然后通过 content 属性设置&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="css-combinators">CSS Combinators&lt;/h2>
&lt;ul>
&lt;li>Descendant: &lt;code> &lt;/code> 后者元素的某个祖先是前者元素&lt;/li>
&lt;li>Child: &lt;code>&amp;gt;&lt;/code> 后者是前者的直接子节点&lt;/li>
&lt;li>Adjacent sibling: &lt;code>+&lt;/code> 后者紧接着前者，且是同一个父元素节点&lt;/li>
&lt;li>General sibling: &lt;code>~&lt;/code> 后者出现在前者的后面，且是同一个父元素节点&lt;/li>
&lt;/ul>
&lt;h2 id="css-selector-的优先级">CSS Selector 的优先级&lt;/h2>
&lt;p>如果有多个 CSS Rule 同样选择到了某个元素节点且声明的 CSS 样式出现冲突时，会根据首先根据优先级进行处理，当优先级相同时，选择后声明的规则。&lt;/p>
&lt;p>优先级可以用一个四位数表示，每出现一个选择器在相应位上加一&lt;/p>
&lt;ol start="0">
&lt;li>inline style: 行内的 css style 的优先级时最高的，直接在千位加一&lt;/li>
&lt;li>百位: ID Selector&lt;/li>
&lt;li>十位: Class selector, attribute selector, preudo-class selector&lt;/li>
&lt;li>各位: type selector, preudo-element selector&lt;/li>
&lt;/ol></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/CSS/">CSS</category><category domain="https://scottyeung.top/tags/%E5%89%8D%E7%AB%AF/">前端</category><category domain="https://scottyeung.top/tags/%E7%AC%94%E8%AE%B0/">笔记</category><category domain="https://scottyeung.top/tags/Coding-%E5%AD%A6%E4%B9%A0/">Coding 学习</category></item><item><title>种树，直到把自己围住</title><link>https://scottyeung.top/2021/forest-for-what/</link><guid isPermaLink="true">https://scottyeung.top/2021/forest-for-what/</guid><pubDate>Tue, 18 May 2021 22:36:14 +0000</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;blockquote>
&lt;p>对于五月假期回来后状态的复盘，其实是写于 5.15 的周记记录&lt;/p>
&lt;/blockquote>
&lt;p>是否还应该要使用 &lt;a href="https://www.forestapp.cc/">Forest&lt;/a> 种树呢？在去年的四五月份的时候就曾经有过这样的&lt;a href="https://scottyeung.top/2020/%E7%AA%81%E7%84%B6%E4%B8%8D%E6%83%B3%E5%86%8D%E8%AE%B0%E5%BD%95%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%BF%E7%94%A8/">想法&lt;/a>，怀疑自己使用 Forest 等时间记录工具的意义在哪，甚至会觉得使用这些工具使自己对于时间的利用变得很焦虑，进而对自己的时间安排产生焦虑。&lt;/p>
&lt;p>说起来也比较讽刺，原意使用 Forest 是为了记录我日常使用时间的情况，但是演变到今天，已经变成了推动自己工作学习的工具，用来衡量自己有无努力学习，认真工作的工具。我对于 Forest 的使用心态，已经从以往看看今天学了多久时间，变成看看今天能不能学到 300 分钟。一般来说，这个任务是可以达到的，但如果有些特殊的情况，例如昨天提到的状态不好，不想干活，导致开始工作的时间晚了，我就会觉得今天的任务预期好像完成不了，就会觉得愧疚与焦虑。当出现这种心态之后，就会出现想要让自己的数据更加好看的想法，继而会出现一些不妥的功利的想法，例如将一些非工作的活动也计时，又或者是中途需要打断活动的时候还是继续计时，通过这样的方式来让种树的时间更多更好看。&lt;/p>
&lt;p>但这样的行为并没有意义，这样获取到的数据也没有意义，相反，还会给自己增添许多的压力。翻了翻以前的种树的记录，在 19 年刚刚开始使用的时候，那时使用 Forest 就真的纯粹就是记录自己的时间使用情况而已，以及让自己增添的一个开始工作的仪式感。那个时候的我虽然有时种树也能种比较多的时长（挺多 300-400+ 分钟），但是其中也不乏一些 200+ 分钟的日子夹杂在其中。状态的起伏，可利用时间的变化都是很常见的状况，尤其是在读书阶段还需要去上课，需要处理一些额外的状况，又或者是出去玩之类的活动，为什么需要强求自己每天都能够学习到某一个固定的时间呢？&lt;/p>
&lt;p>这种转变大概发生在保研之后的大四上学期，那个阶段的我一下子没有了比较紧迫且具体的任务推动，很多时候不想干活，也不知道要干些什么，干到什么程度。为此，我就想出了一个比较好能够推动自己的方法，既然没有具体的目标，不知道需要完成到什么程度，那我就按照学习时间来衡量，每天学多少时间来判断自己当天有无认真学习。想法是很好的，但这个标准任何制定，制定得是否灵活，就需要衡量太多东西了。&lt;/p>
&lt;p>这样的想法放到了如今重新回到学习生活的我来说，又显得不够灵活。一方面我被其制约，无法更加灵活而合理地利用时间，另一方面，我对于时间的利用也变得更为洁癖与讲究。具体表现为&lt;/p>
&lt;ul>
&lt;li>有些重要但是与学习不太相关的事情，我可能会因为其不能种树（计时）而将其优先级放得比较低，从而导致自己不会去做这些事情。例如运动，尤其是在学习途中的休息活动，因为这些活动不能很直观地将它们的好处与效果表现出来，不像学习能够通过种树显示出学习时间，知道自己今天努力了多久，做了多少。所以不愿意去，也不敢去做，担心占用我的时间。&lt;/li>
&lt;li>对于时间的利用不够灵活，仿佛洁癖一般，总是会抱着一种完美主义的效率至上心态。会认为与其在上课的半个小时里面低效的学，不如在这期间摸鱼休息，然后等到之后可以高效率学习。这样的心态会导致自己在某些时候心安理得地摸鱼不学习，把时间白白浪费掉。其次就是对于时间的要求越来越多，然后就开始成为拖延某些任务的借口。明明可以做半个小时，一个小时，但是觉得这么短的时间干不出什么结果就干脆放弃，不做，选择做一些短平快的事。&lt;/li>
&lt;/ul>
&lt;p>当然其实工具的本身还是其次，本质上还是自己的心态出现了问题，现在的自己不是很能够接纳没有学习的自己，不能接受好像一天都没怎么学习的自己。原本只是为了对于时间记录这个用于以后留念的数据，现在逐渐演变成证明自己有在努力的工具，很是不妥，而自己也仿佛被困在 Forest 这个工具当中。&lt;/p>
&lt;p>当然你要我一下子就完全不用，我也还是做不到，甚至在写这篇文章的时候，我也开着了 Forest 来计时。不过还是需要改变，正如昨天文章所写，改变只需要一点点的改进，就从看少点 Forest 的种树记录，看轻点里面的数字开始。或许首先可以做到的就是，减少学习时间吧 😆&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/">时间管理</category><category domain="https://scottyeung.top/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/">个人随笔</category></item><item><title>“什么都不做”</title><link>https://scottyeung.top/2021/do-nothing/</link><guid isPermaLink="true">https://scottyeung.top/2021/do-nothing/</guid><pubDate>Tue, 18 May 2021 21:21:49 +0000</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;blockquote>
&lt;p>对于五月假期回来后状态的复盘，其实是写于 5.14 的周记记录&lt;/p>
&lt;/blockquote>
&lt;p>经历了不太想工作的一周工作日，可能是还处在五一的假期后遗症当中，缺乏干活的动力，每天都不想起床，不想干活，但偏偏事情又感觉很多，因而会陷入一种焦虑当中，不想干，但又要干，让人很是闹心。因为不想干活导致了无意义的拖延行为，因为拖延导致不得不利用一些另外的时间来尽量补回被拖延的时间，因为额外的时间被占用了导致某些想做的事情难以完成甚至无法完成，因为做不了自己想做的事情觉得不甘心又导致因为不愿就这样结束自己的一天而自然地熬夜，因为睡得不够又导致了第二天很困起不来，更加缺乏做事的动力与决心。&lt;/p>
&lt;p>感觉像是陷入了一个无解的死循环中，但自己还在寄希望于只是今天先这样，明天就能好起来的幻想当中，还觉得自己只是陷入了一种每个人都会进入的，缺乏动力不想干活的状态。只要等它过去，只要等自己进入一种充满活力的状态，问题就能够自己消解。尽管如此，我也没有去尝试或寻找让自己进入充满精力的状态，只有空想，而没有实践。&lt;/p>
&lt;p>我能够做什么，或是需要做什么呢？应该要意识到，改变并不总是需要翻天覆地，彻彻底底的。我想要变得更具活力，更有动力，做不到也不需要今天还无心工作草草种树 200 分钟，明天就一下子能学到五六小时甚至更多。每天比昨天赖床时间短一点，起床时间早一点，开始学习的时间早一点，走神摸鱼的时间少一点，拖拉的时间短一点，学习的时间多一点，也是一种很棒的改进了。&lt;/p>
&lt;p>但为什么做不到呢？我觉得是现在的自己缺乏一种勇气，一种能够坦然接受现状并寻求应对解决方法的勇气。遇到问题，处于不满意的状态，不能够坦然地接受自己就处于这种状态，以及承受接下来可能出现的后果。出现这种情况，第一时间想到的是逃避，想着明天再来，全然不想处理当天比较糟糕的开局，哪怕只是稍微起晚了一点，哪怕只是上午的学习时间没了。内心居然隐隐会觉得，在状态不好时间不足的一天学习，还不如一天都不学，或者是干一些所谓轻松点的，与任务无关的事情。&lt;/p>
&lt;p>迎着糟糕的情况前进比放弃或拖延所需要承担的压力还要多，因而会使人退缩。所以现在的我会选择早上醒来晚后就多赖一会床，起床晚了后就干脆不去实验室学习，去不了实验室就干脆上午不学习，上午不学习就中午早点睡下午再努力。当事情的一点点发展得不如心意就干脆将后续的发展也跟着打乱，舍弃掉本可利用的时间资源，想的是从下个阶段再开始。但很现实的是，既然第一个阶段的开端会出现意外，那么之后的又如何担保其一定按照预期发展呢？&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/posts/2.png" alt="懂得都懂不懂都不懂的示意草图">&lt;/p>
&lt;p>勇气怎么培养，我自己也不知道。不过现在的我已经不是之前那个只会接受一切的我，我相信一切都能够改变，都可以尽力去做到。改变自身性格就是一个，哪怕可能只是一点点。当以后出现这种情况的时候，直面它，接受它，应对它，战胜它。希望以后出现今天状态不好不想学习的时候，我的想法不再是等到明天状态好点再开始，而是状态不好的话我应该做些什么，应该怎么做，能做多少算多少的心态。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/">时间管理</category><category domain="https://scottyeung.top/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/">个人随笔</category></item><item><title>dotnet 爬虫的神</title><link>https://scottyeung.top/2021/dotnet-god-of-web-crawler/</link><guid isPermaLink="true">https://scottyeung.top/2021/dotnet-god-of-web-crawler/</guid><pubDate>Wed, 07 Apr 2021 18:57:41 +0000</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>这一周干了两次需要批量下载图片或文件的自动化工作，连续两次使用都是 dotnet 来完成，着实不错，尤其是配合 c# 的 async/await 语法糖，异步下载性能确实够快。这两次的下载让我对于这种需要批量获取信息或者下载的任务解锁了新的姿势。&lt;/p>
&lt;p>首先需要明确一点，我们需要的只是爬虫的结果而已，只是为了能够自动化获取我们所需要的数据或资源，所以我们所做的事情，所写的代码即使稍微 dirty 点也无妨，只要能 work 就好。尤其是在工程中，过于追求所谓的 elegant 只会让自己痛苦不已，不过这些都是题外话了。&lt;/p>
&lt;p>So glad to make it dirty. 爬虫遇到例外情况时就做特殊判断，有异常就针对异常对个例单独处理，全自动化不行就手工做点操作加点信息。&lt;/p>
&lt;h2 id="html-parsing">html parsing&lt;/h2>
&lt;p>html 的解析库用的是 &lt;a href="https://html-agility-pack.net/">Html Agility Pack&lt;/a>，可以解析字符串，也可以直接发请求获取页面来解析。其使用 XPath 作为选择器，不支持 css 选择器，学过 XPath 的可以接受，而且 XPath 的表达性足够的强，足够使用。&lt;/p>
&lt;p>code sample 如下，能够根据 XPath 选出特定的节点，然后取出其中的属性和文本其实已经差不多了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-cs" data-lang="cs">&lt;span class="kt">var&lt;/span> &lt;span class="n">html&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HtmlWeb&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">LoadFromWebAsync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">html&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DocumentNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SelectSingleNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">xpath&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">text&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">InnerText&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">attr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAttributeValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;href&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">defaultValue&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="download">download&lt;/h2>
&lt;p>完全就是根据 dotnet 的 API 来操作的，重点推荐 System.Net.Webclient 的 DownloadFileTaskAsync 方法，直接根据 url 开启异步下载任务，开启下载任务后将所有的 tasks 一起等待运行结束即可。
这里有个需要注意的点是，API 内置的 WebClient 是不支持并行的,这意味着一个 Client 发请求后必须完成任务后才能用它进行下个任务，所以需要并行的时候建议多开几个 client。&lt;/p>
&lt;p>sample 如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-cs" data-lang="cs">&lt;span class="kt">var&lt;/span> &lt;span class="n">tasks&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Task&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">urls&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">tasks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">WebClient&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">DownloadFileTaskAsync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Uri&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">await&lt;/span> &lt;span class="n">tasks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WhenAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tasks&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="tricks">tricks&lt;/h2>
&lt;ul>
&lt;li>需要下载或者访问的 urls 有时并不需要通过代码中发请求获取页面解析这样的方式来获取，很多时候直接在开发者工具里面用 XPath 来取出相应的 urls 更加简单快捷
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">$x&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;//a[@id=&amp;#39;target node&amp;#39;]&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">=&amp;gt;&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">href&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>并不需要一次性就能把全部数据抓取下来，不妨合理分批分成多个任务来完成，这样 fail 一次也只需重新执行改部分，而不需要全部重来。&lt;/li>
&lt;/ul>
&lt;h2 id="performance">performance&lt;/h2>
&lt;p>性能只能说好得离谱，也可能是因为之前的 Python 爬虫给我留下太糟糕的印象作为 baseline 了。这主要得益于 dotnet 本就良好的性能，以及其支持得很好的异步编程设计，基本每个可能会阻塞的 API 都提供了 async 版本。&lt;/p>
&lt;ul>
&lt;li>下载了 90 posts，包括其中的文字和图片，每个 post 平均有两张图片，加起来用了一分钟左右。&lt;/li>
&lt;li>下载了差不多 60 个 pdf，用来不到 20s&lt;/li>
&lt;/ul></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/dotnet/">dotnet</category><category domain="https://scottyeung.top/tags/%E7%88%AC%E8%99%AB/">爬虫</category><category domain="https://scottyeung.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/">自动化</category><category domain="https://scottyeung.top/tags/%E7%94%9F%E4%BA%A7%E5%8A%9B/">生产力</category></item><item><title>如盲人走路</title><link>https://scottyeung.top/2021/like-blinds-walking/</link><guid isPermaLink="true">https://scottyeung.top/2021/like-blinds-walking/</guid><pubDate>Tue, 06 Apr 2021 22:35:25 +0000</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>对比上个学期，自感最近放了比较多的时间在练习太极拳上面，甚至还曾经自我打趣道，这个学期的工作生活重心就在练拳上面。确实是练得比较多，一方面是在杨协呆得久，需要我去带练功操，有时是必须要去，另一方面则是王真人这边也约得比较勤，一周两练，因为人少（就三个人），鸽都不好找理由鸽。当然这些都还只是外部因素，真的是不得不练，被逼着练吗？也不全见得是。&lt;/p>
&lt;p>之前曾经写过&lt;a href="https://scottyeung.top/2020/taichi-practice-reflections/">博客&lt;/a>说，感觉自己练拳一直得不到进展，似乎陷入瓶颈位置，导致练习得不太畅快，继而不太想练习。不过最近这种不得劲的感觉似乎逐渐在减退，仿佛找到一些东西，开始在真正地练拳。尽管还是在练习几乎一样的东西，练习的过程还是一如既往地觉得自己很菜，但确实能够发现处处都有不同的感觉。于是近来对于练拳都有着比较高的积极性，即使是自己一个闲在宿舍，或是走在路上，都会不由自主地走走站站，或是伸展肩膀手臂，颇有将太极与练拳融入到日常生活当中的感觉。&lt;/p>
&lt;p>现在的练习其实与之前差别也不是很大，功操，套路，推手，站桩，都还是这些东西。然后我自己的所谓功力，其实也没有提升多少，而且也还是能在练习中发现许多的问题，例如力量不足，例如不够放松而导致的肌肉紧张。为什么会觉得之前的不畅快感已经消失了？&lt;/p>
&lt;p>大概是我开始找到练拳中的所谓&lt;strong>感觉&lt;/strong>了。&lt;/p>
&lt;p>在之前的博客或者动态当中，其实自己之前一直都在吐槽，传统的内家拳过于看重这些玄之又玄的所谓感觉，通过文字口诀来描述，需要靠练习者自己去感悟，不免太难，太过于虚无缥缈。正因为此，所以之前开始练习功操时，可以很明显地让自己出现有被锻炼到的很累的感觉，会觉得很感人，并且会将这些所谓肌肉很累很酸的感觉当成是有练到的表现。&lt;/p>
&lt;p>练得很累很酸就是有练到练对了吗？我曾经问过杨协的人这个问题，然而很可惜的是，很多人都还确实只能通过这种方式来判断，有没有被练到。但事实上，练确实是有被练到，练的东西对不对就不好说，练死肌肉也可以练得很累。之前就试过一次练习步法发力推人，练完几天发现双臂酸软得抬不起，但其实只是全用了肌肉发力来推人，练到的并不是想要的东西。&lt;/p>
&lt;p>前两周王真人转了一篇&lt;a href="https://mp.weixin.qq.com/s/7RGAwdNH1TYASBSe4OI2sw">推送&lt;/a>，提到“练拳要学瞎子走路”，瞎子走路身子前后都提着小心，从头到脚都有反应，练拳不是练拳头，而是全身敏感。所以在练拳的时候，感觉是应该重于一切的，一方面感受自身身体的各处状态，另一方面则是接受外界的感受。当然这个说得也很是玄妙深奥，只能看看作为参考。&lt;/p>
&lt;p>上学期刚开始练拳的时候，王真人曾经跟我说过要练出掤劲，并且将其应用到身体的每一处。具体怎么练，靠站桩，练套路，和推手，来撑筋拔骨，锻炼自身。不过我上学期的我一直都感觉很迷，似乎一会出现了，一会儿又找不到了，在与其他人推手的时候，推着推着对方说有点感受到，但自己却觉得其实没有变化过。这个学期好像好了一点，似乎开始感到这种劲，体会到所说的把劲打匀到全身是种什么感觉。&lt;/p>
&lt;p>上周练拳的时候，王真人问我练拳之后有没有什么收获与变化。这个问题其实我自己在寒假的时候就思考过很多次，什么还写了不少文字从身体上和信赖来进行总结。好处与收获当然是有，更健康的身体，更积极的内心，虽然可能并不足以与外人称道，也可能不太明显，不过内心还是真切感受到自己是有不同的。&lt;/p>
&lt;p>想起在开始重拾练拳想法的原因，是因为想着锻炼身体，让自己变得健康。不过其实到自己真正开始练拳的时候，反而并没有了这个想法，甚至觉得其实练拳最多也不过是种锻炼方式，再怎么健康，也不过相当于多运动了。纯粹是觉得挺有意思（以及加入组织开始练习之后不好退出了。&lt;/p>
&lt;p>最后再分享在知乎看到的一个很棒的评论。有个人贴出了他在武当山上面练习传统武术的经历，然后评论区中就出现了很常见的杠精，张嘴就发出传武能不能打的怀疑，什么学得不值，是被骗了之类的评价。然后答主就很坦然地回复，对于他来说，武术只是一个个人的爱好而已，像有的人喜欢跳舞，有的人喜欢打球，一定需要能打，有用，才去做，才去学吗？显然不是。&lt;/p>
&lt;p>所以为什么练习太极拳，喜欢就够了。&lt;/p>
&lt;p>上面提到的推送中说到练拳需要如盲人走路，在练拳过程中要注重全身的感觉。对于整个练拳的历程来说，其实需要像盲人走路一样，专注于当下走的每步路，练的每次拳，也不太需要考虑前路怎样，可以练到什么程度，可以收获什么。反正练习下去，走下去，自然能够进入新的境界。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E5%A4%AA%E6%9E%81/">太极</category><category domain="https://scottyeung.top/tags/%E5%86%85%E5%AE%B6%E6%8B%B3/">内家拳</category><category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category></item><item><title>GraphQL 入门</title><link>https://scottyeung.top/2021/intro-to-GraphQL/</link><guid isPermaLink="true">https://scottyeung.top/2021/intro-to-GraphQL/</guid><pubDate>Wed, 17 Mar 2021 15:46:25 +0000</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;blockquote>
&lt;p>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。&lt;/p>
&lt;/blockquote>
&lt;h2 id="why-graphql">Why GraphQL&lt;/h2>
&lt;p>GraphQL 的出现主要是针对于传统的 REST API。传统的 REST API 使用资源实体的概念来划分各个数据实体，当我们需要请求数据的时候，我们往往需要发送多个请求来获取所需要的数据，一般来说，实体当中往往与其它不同类型的实体有着各样的关系。&lt;/p>
&lt;p>例如我们需要展示各个用户所编写的博客文章，这需要获取博客的数据以及用户的数据。如果我们通过 REST API 获取，我们首先需要通过 &lt;code>GET /api/posts&lt;/code> 获取所有的文章，返回的数据中就包含了文章的相关信息，如标题，内容，创建时间，以及作者的 id。根据获取的作者 id，我们需要根据每一个用户 id，发送请求 &lt;code>GET /api/users/:id&lt;/code> 获取每个作者的信息。所以这样单一个展示页面，我们就可能需要发送大量的请求来获取数据。如果这个情况发生在需要数据现场渲染页面的网站，就比较尴尬，尤其是当网络情况较差时。&lt;/p>
&lt;p>而使用 GraphQL 的话，只需要单个 Query 即可&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-GraphQL" data-lang="GraphQL">&lt;span class="kd">query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">posts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">title&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">content&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">tags&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">date&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">username&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">avatar&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">catchphrase&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">favorite_dog&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另外传统的 API 在前后端进行接口交互时，往往需要文档来进行沟通交流，通过文档上面的定义和描述，来告诉前端接口到底长什么样，可以获取怎样的数据，以及怎样获取数据。然而文档的质量参差不齐，什么经常存在信息缺失的情况，尤其是需要人工编写的接口描述~~（给你写个类型信息和返回信息都不愿意）~~。尽管有着 Swagger 这些接口文档自动生成的工具，但是还是需要后端开发者付出额外的精力来添加描述信息。而如果写 GraphQL 的话，写一个 Scheme 就可以把支持的类型及其属性都清楚地暴露出去，只要再完善一下其中的 Query 以及 Mutation 内容，即可以把 GraphQL 支持的查询和更改操作都清楚地暴露出来。这些内容都可以通过算是内置的辅助工具 &lt;a href="https://github.com/graphql/graphiql">GraphiQL&lt;/a>，进行文档的查询，以及实际的尝试。&lt;/p>
&lt;h2 id="how">How&lt;/h2>
&lt;h3 id="to-build">to build&lt;/h3>
&lt;p>如何编写一个 GrahpQL 服务呢？我们首先需要定义好它的 Schema，包括其定义的类型（Type），输入类型（Input）。在 GraphQL 里面，服务能够支持的查询和更改操作，也是类型，分别是 Query 和 Mutation。&lt;/p>
&lt;ul>
&lt;li>Type: 每个类型由多个属性组成，每个属性包含一个名字，以及该属性字段的类型，该类型可以为基本类型（Int, String, Boolean, Float, ID），数组，或者是自定义的对象类型&lt;/li>
&lt;li>Input: 输入类型也是一个 Type&lt;/li>
&lt;li>Query: 表示服务支持的查询内容，每个属性表示某个 query，其类型则为返回类型，可以接收参数&lt;/li>
&lt;li>Mutation: 表示服务支持的更改操作，每个属性表示操作名，需要接收输入类型的参数，其类型为返回类型&lt;/li>
&lt;/ul>
&lt;p>以下为一个关于 todo 的 GraphQL Schema&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-GraphQL" data-lang="GraphQL">&lt;span class="kd">type&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">TodoItem&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">Int&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">String&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">content&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">String&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">checked&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">Boolean&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">createdTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">String&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">type&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">Query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">todoItems&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nc">TodoItem&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">todoItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="py">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">Int&lt;/span>&lt;span class="p">!):&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">TodoItem&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">input&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">TodoItemInput&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">String&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">content&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">String&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">checked&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">Boolean&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">createdTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">String&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">type&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">Mutation&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">createTodoItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="py">todo&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">TodoItemInput&lt;/span>&lt;span class="p">!):&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">TodoItem&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">updateTodoItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="py">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">Int&lt;/span>&lt;span class="p">!,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">todo&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">TodoItemInput&lt;/span>&lt;span class="p">!):&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">TodoItem&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="to-use">to use&lt;/h3>
&lt;p>怎么使用 GraphQL 服务呢？&lt;/p>
&lt;h4 id="query">Query&lt;/h4>
&lt;p>需要查询数据时，我们只需要通过花括号把需要的类型和字段的列举出来即可。当需要传入变量，我们可以在 query 处进行定义，然后在变量处进行值传递。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-GraphQL" data-lang="GraphQL">&lt;span class="kd">query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">TodoItem&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">title&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">content&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># or&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">Int&lt;/span>&lt;span class="p">!)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">todoItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="py">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nv">$id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">id&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">title&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># variables&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="mutation">Mutation&lt;/h4>
&lt;p>进行数据更改时，也是类似，传入变量，调用相应的 mutation 方法即可，另外根据需要，我们还可以选择返回的属性。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-GraphQL" data-lang="GraphQL">&lt;span class="kd">mutation&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$todo&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nc">TodoItemInput&lt;/span>&lt;span class="p">!){&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">createTodoItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="py">todo&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">$todo&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">id&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">title&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">content&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># variables&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;todo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;title&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;asdafa&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;content&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;asdaf&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;createdTime&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;today&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;checked&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="to-implement">to implement&lt;/h3>
&lt;p>怎样快速搭一个 GraphQL 服务出来呢？当然是采用动态语言最快了，而其中，又自然是选择使用 GraphQL 最多的 JavaScript 语言实现起来最快。&lt;/p>
&lt;p>这里我们使用 express 来提高 http 服务，使用 express-graphql 来搭建 GraphQL 服务&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">npm install --save express express-graphql graphql
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后就是一把梭地实现，首先构建 GraphQL Schema，然后搭建 http 服务，构建并绑定一个 GraphQL handler，启动服务，完。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="kd">var&lt;/span> &lt;span class="nx">express&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;express&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">graphqlHTTP&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;express-graphql&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">buildSchema&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;graphql&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">schema&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">buildSchema&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">``&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 内容省略
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// 那个数组假装一下数据库
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">todoItemDb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="c1">// 这里用来存储各个 query 和 mutation 的响应函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">todoItems&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">todoItemDb&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">todoItem&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">({&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">todo&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">todoItemDb&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">todo&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">createTodoItem&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">({&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">todo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">todoItemDb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>
&lt;span class="nx">todoItemDb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">todo&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">updateTodoItem&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">({&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">todo&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">todoItemDb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todoItemDb&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">==&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">todo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">id&lt;/span>
&lt;span class="nx">todoItemDb&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">todo&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">todo&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">express&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/graphql&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">graphqlHTTP&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">schema&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">schema&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">rootValue&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">root&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">graphiql&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}));&lt;/span>
&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>实现就这么简单 2333&lt;/p>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>在写这篇博客的时候，其实写到后面有点点迷茫，所谓的 GraphQL 真的是这么好吗？如果真的这么好，为什么当前主流的前后端分离，后端接口的方式还是用传统方式的类 RESTful API 的方式来设计和实现呢？&lt;/p>
&lt;p>其实回过头看上面举出的例子，那些所谓的需要多次请求才获取到的数据，其实本质上也是因为后端考虑要获取多个数据，才将其整合在一起，作为一个新的独立的 endpoint 来暴露出来的。换句话，其实传统的 API 也可以做到，只需要再写一个 endpoint，专门为这个情况设置独立的 handler。&lt;/p>
&lt;p>不过这种专门设置一个新的 endpoint 也未免太过不够 elegant，而且 GraphQL 对我这种还没经历过实际项目的新手来说，最大的优点，还是其自带的 GraphiQL 吧，一个带 ui 的 playground 提供给使用者来了解 API 中支持的类型，查询和变更操作，并且可以随时进行尝试，实在吸引。&lt;/p>
&lt;p>所以以后如果需要到 GitHub 挖点数据的时候，不妨把请求方式从其传统的 REST API 上搬到 GraphQL 当中。这样就不需要再在命令行或者是 Postman 的方式来发请求尝试，直接在网页端界面解决。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/JavaScript/">JavaScript</category><category domain="https://scottyeung.top/tags/API/">API</category><category domain="https://scottyeung.top/tags/Coding-%E5%AD%A6%E4%B9%A0/">Coding 学习</category></item></channel></rss>