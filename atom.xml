<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>YeungYeah 的乱写地</title><link>https://scottyeung.top/</link><description>YeungYeah 的乱写地中记录了作者的所思所想及所为。</description><generator>Hugo 0.83.1 https://gohugo.io/</generator><language>zh-CN</language><managingEditor>yeungyeah@qq.com (YeungYeah)</managingEditor><webMaster>yeungyeah@qq.com (YeungYeah)</webMaster><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><lastBuildDate>Tue, 08 Feb 2022 03:30:02 +0000</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://scottyeung.top/atom.xml"/><item><title>广泛输出</title><link>https://scottyeung.top/2022/more-outputs/</link><guid isPermaLink="true">https://scottyeung.top/2022/more-outputs/</guid><pubDate>Tue, 08 Feb 2022 11:04:16 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>近来迷上了 newsletter，每周更新一批有价值的网页并辅以点评，推荐或总结，让人看一下就很有收获的感觉，虽然自知其实也不过是一种迷惑的感觉，看太多如果没有消化吸收，也不过是消遣罢了。当然自己看的时候其实没有抱有太多的功利性，图个信息输入时的新鲜与快感而已。&lt;/p>
&lt;p>不过这种模式还是很有意思的，写作者通过每周更新，倒逼自己阅读和消化互联网上面看到有价值的内容，通过再创造成为自己的内容，确实是一种很好的输出模式。&lt;/p>
&lt;p>一直以来都觉得输出是自己的薄弱项，并不是自己不会写，或者是不愿意写，而是会对自己产出的内容感到不自信，进而将其隐藏起来，仅供自娱自乐。因为不需要公开，OneNote 当中就写了不少文字用于记录想法和生活，因为没有压力，所以 Flomo 当中反而能够随手记下自己的想法或者看到有意思东西的摘抄。然而来到博客上面，这种压力反而成为更新频率的阻碍，事实上曾经多次都是有了想法，甚至都写下些许文字，然而又觉得好像也不过如此，然后默默删掉。这种心态甚至导致连朋友圈都不愿意多发，要发也必须仔细斟酌文案，想不到所谓的好文案或者有意思的文案就干脆发个图片或者表情完事。&lt;/p>
&lt;p>不过这种压力的来源，与其说是害怕写得不好，更不如说是害怕暴露真实的自己，害怕暴露自己的真实水平，展示出自己的真实想法，虽然也不知道为什么要去迎合他人，其实也不需要外部的批判，尤其是对于单纯的分享。不过就当下的网络环境而言，也很难被批判。&lt;/p>
&lt;p>因此对于今年的一个最大的目标，就是降低甚至消除自己对于输出分享的压力，让自己输出无压力，想到什么，就写什么，就发什么。只有降低了写作的压力，才会有更多的随手打开编辑器开始写作的机会，正如现在的我在工作途中突然打开了 VSCode 开始写起博客一样。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category></item><item><title>2021 年度记录</title><link>https://scottyeung.top/2022/record-of-2021/</link><guid isPermaLink="true">https://scottyeung.top/2022/record-of-2021/</guid><pubDate>Sun, 02 Jan 2022 22:57:18 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>一向没有进行年度总结或者记录的我，在今天看关注的私人博客中发现，大家都在进行自己的年度记录，或复盘生活，或记录影视阅读记录，难免让人心痒痒。虽说平时也偶有在 OneNote 或者 Flomo 当中记录下生活或者想法，但是这种以年度为单位的公开记录，还是第一次。（主要可能以前都是不公开，哪怕是在朋友圈或者空间哈哈哈哈）。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/posts/20220102-1.png" alt="">&lt;/p>
&lt;h2 id="一月">一月&lt;/h2>
&lt;ul>
&lt;li>在考分布式系统的早上收到的论文录用邮件，毕设的工作被会议 SANER (CCF-B) 录用，不过本科的导师一作，本人二作，当时也没有太多的喜悦，只是感慨终于被录用了（之前投过一次 ASE 被拒了）。&lt;/li>
&lt;li>放假回家后，首次独自开车与高中同学相约新银盏温泉。虽然说之前也有开过车，但都是在有父亲的陪同下，而且当时其实还是我放假后第一次摸车，实际上我自己都还是有点担心的 🤣&lt;/li>
&lt;/ul>
&lt;h2 id="二月">二月&lt;/h2>
&lt;ul>
&lt;li>和发展许久的小汤终于在一起了。官宣，约会，一起度过第一个情人节与元宵节。所有的事情似乎都是十分的顺利与自然，如同我们之间的关系一般让人舒服。即使过年期间无聊的探亲环节，都感觉变得不一般了，大概是因为开始有人可以随时分享与被分享了吧。&lt;/li>
&lt;/ul>
&lt;h2 id="三月">三月&lt;/h2>
&lt;ul>
&lt;li>在提交入党申请书半年后，终于通过班级投票的方式，确定我为入党积极分子&lt;/li>
&lt;/ul>
&lt;h2 id="四月">四月&lt;/h2>
&lt;ul>
&lt;li>月底的时候导师与武大的一个项目要结题了，于是拉大队差不多整个实验室的人都一起去了武汉开会（旅游）。虽然说出发的当天还是思政课的结课，而且和女友也约了五一去武汉玩，但还是选择了一起去，毕竟是导师的盛情要求（春游）。
&lt;ul>
&lt;li>&lt;img src="https://scottyeung.top/posts/20220102233114.jpg" alt="">&lt;/li>
&lt;li>通过这次的出差，成功见到了许久没见的 lyz, zjy and zkz. 和 lyz 与 zjy 重逛武大，再和 zkz 约了个饭，简单但还是充满意义和乐趣。&lt;/li>
&lt;li>意外从师兄处得知毕业要求论文不限排名，突然发现似乎已经达到了毕业要求，心态发生变化&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>尝试开刷 Leetcode，进行每日打卡，第一次拿到了月度打卡徽章&lt;/li>
&lt;/ul>
&lt;h2 id="五月">五月&lt;/h2>
&lt;ul>
&lt;li>第一次和女朋友去旅游，地点选在了才去过不久的武汉，(之所以选这里主要是因为好抢车票哈哈哈)。这次旅程主要由我这个在武汉读了四年书的人作为向导，虽说实际上我对于武汉也不够熟悉，但也算是交上了一份满意的答卷。这次行程也是非常开心，一起走了很多路，吃了很多东西，通过这次旅行我们的感情也升温了不少，具体内容可看女友出品的 &lt;a href="https://www.bilibili.com/video/BV1xv411p7cx">vlog&lt;/a>。顺便借这次旅游再一次和 lyz 和 zjy 约饭，还借住了 lyz 家两晚。情感上 lyz 家已经成为我在武汉的临时港湾了 🐶&lt;/li>
&lt;li>回来没两个星期，导师的项目要在武汉验收，于是我又被导师派出来和一个师兄一起去武汉协助项目验收。虽然其实到武汉的第二天就验收完了，但师兄想着来都来了，想要多呆两天，于是又有机会陪着师兄吃吃喝喝了，然后吃饭的钱都已经要抵上补助了。&lt;/li>
&lt;li>参加了软考，考了个软件设计师的中级职称，准备了不到一个月，凭着专业知识刷了点题就过了
&lt;ul>
&lt;li>&lt;img src="https://scottyeung.top/posts/0103.jpg" alt="">&lt;/li>
&lt;li>也因为这次软考重新发现了 Java 其实也不是那么的不堪&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="六月">六月&lt;/h2>
&lt;p>从六月开始，运气似乎开始下降&lt;/p>
&lt;ul>
&lt;li>脚踝莫名出现疼痛，不能运动了一段时间，甚至走路都有点艰难&lt;/li>
&lt;li>体重莫名出现止不住的下降，最低的时候甚至掉到了 70 kg，即使在那段时间吃多了东西&lt;/li>
&lt;li>迎接党成立 100 周年，参加了许多的庆祝活动，也是挺有意思的
&lt;ul>
&lt;li>第一次的参加合唱表演&lt;/li>
&lt;li>第一次的看乐团表演&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="七月">七月&lt;/h2>
&lt;ul>
&lt;li>刚好在暑假回家的那个星期遇上了南京禄口机场疫情，然后马上退了两天后的机票，打算走高铁从武汉中转回去，结果因为核酸结果迟迟不出，结果改了几次高铁票，推迟了几天再走，心态小崩。刚好那个时候还在赶知识工程课的大作业，心里又烦，但还不得不工作&lt;/li>
&lt;li>还好回家后社区也只是要求三天两验核酸，还是能够自由活动&lt;/li>
&lt;/ul>
&lt;h2 id="八月">八月&lt;/h2>
&lt;ul>
&lt;li>把握暑假在家的机会，与女友在清远吃吃喝喝，打卡了不少地点&lt;/li>
&lt;li>第一次做手工送给作为生日礼物送给女朋友，甚至把自己都感动了&lt;/li>
&lt;li>比较可惜的是因为疫情的问题，原本打算七夕去广州听音乐会也因为疫情而取消了&lt;/li>
&lt;/ul>
&lt;h2 id="九月">九月&lt;/h2>
&lt;ul>
&lt;li>因为南京疫情的原因，最终拖到了九月底才回学校（&lt;del>虽然其实暑假期间在家一样需要科研都没有放假过&lt;/del>&lt;/li>
&lt;/ul>
&lt;h2 id="十月">十月&lt;/h2>
&lt;ul>
&lt;li>中期答辩。凭借毕设中的论文拿到了一等奖&lt;/li>
&lt;li>答辩完第二周就去了欢乐谷&lt;/li>
&lt;li>堂哥婚礼，专门回家一周去参加，顺便兼任了结亲团的司机，化身打气球工具人&lt;/li>
&lt;/ul>
&lt;h2 id="十二月">十二月&lt;/h2>
&lt;ul>
&lt;li>看到年级群发的学位要求才发现，毕业成果的第一作者单位必须是南京大学，意味着现在还没有达到毕业要求了，又得为科研而奋斗（虽然此前其实一直都没有停过&lt;/li>
&lt;li>参加字节 Web infrastructure 的模拟笔试活动，拿了个第 8 名，还奖了个电脑包
&lt;ul>
&lt;li>然而用起来发现这个包的设计着实有点不友好（&lt;del>恐怕是不会再用&lt;/del>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>就这样过去了一年，回顾一下，其实也并没有太多的进展或成就，甚至在跨年的晚上还小小地 Emo 了一下，不过还好有人可以分享一下，抱团 Emo.&lt;/p>
&lt;p>新的一年，已经不想要立 Flag，近来的目标，希望自己能够更好地对抗多巴胺的影响吧。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E8%AE%B0%E5%BD%95/">记录</category><category domain="https://scottyeung.top/tags/summary/">summary</category><category domain="https://scottyeung.top/tags/%E7%BB%8F%E5%8E%86%E5%9B%9E%E9%A1%BE/">经历回顾</category><category domain="https://scottyeung.top/tags/%E7%94%9F%E6%B4%BB/">生活</category></item><item><title>当下手机云服务的一些槽点</title><link>https://scottyeung.top/2022/complaints-of-cloud-service/</link><guid isPermaLink="true">https://scottyeung.top/2022/complaints-of-cloud-service/</guid><pubDate>Sat, 01 Jan 2022 20:01:02 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>最近收了个 Pixel 3 XL 来玩，想着体验一下原生安卓的爽点以及谷歌家强大的计算摄影能力。原生的谷歌全家桶确实用得很爽，但是拍出来的照片如何完美地同步到另一个手机上面，确实是一大麻烦事。作为谷歌家的手机，自然第一时间想到使用其自带的谷歌相册进行照片同步，而且刚好 Pixel 还能继续嫖谷歌的无限相册空间，于是考虑要不把照片备份到谷歌相册上进行同步。&lt;/p>
&lt;p>于是需求就演变成：将我小米手机当中的所有照片传输到 Pixel 上面，然后在 Pixel 中上传照片进行备份，以后就使用谷歌相册作为两台手机主力的相册，照片就同步到谷歌上面。&lt;/p>
&lt;p>然而任务的第一步，将小米当中的数千张照片传输到 Pixel 上面，已经是一大难点。&lt;/p>
&lt;p>小米手机上的照片，其实我都存储到小米云服务上面，还开了个黄金会员，有接近 20 G 的数据。最理想的，当然是在 Pixel 上下一个小米云服务的 APP 进行照片下载，下完再用谷歌相册同步上去。然后我就发现，小米云服务，是内嵌于小米系统当中，并没有一个独立的移动端应用或者 PC 端应用，这也意味着在非小米手机上面或者在电脑端也只能通过网页进行访问。虽然网页端的小米云服务也可以进行照片下载，但问题是，居然没有全选，得一天一天地进行选中来下载。几年几千张照片，意味着需要点选中几百上千次，简直麻了，而且这个还是个 SAP，写爬虫也不好写。&lt;strong>所以问题来了？小米云服务的产品是没有考虑过用户需要把云上的数据全部下载下来的需求吗？&lt;del>（还是来了就别想跑了&lt;/del>&lt;/strong>&lt;/p>
&lt;p>于是只能从手机本地来下手，将小米手机里面的照片通过 USB 拉到电脑来中转，然后再通过 USB 拉到 Pixel 上面。然而在拉的过程中发现 Pixel 的传输时间居然需要十多个小时，（可能是因为手机传输接口是 USB 2.0？）。最终通过 Send Anywhere 应用，使用 Wifi 直连的方式进行相机拍的 2000+ 照片传输到了 Pixel 上面，开始同步。&lt;/p>
&lt;p>然后今天等到 Pixel 备份完照片后，把小米手机上的谷歌相册备份也打开了，然后发现，相同的已经在 Pixel 上传的照片，在小米上面又再同步了一次，这跟我看到的谷歌相册在备份前会先检查云端有否相同照片的说法不同。然后我在谷歌云端上看了一下这些相同的照片，发现一样的照片，一样的时间戳，一样的参数，但是大小却是不一样的，而且这些照片都只是几百 k 大小。然后打开小米的相册才发现，这些重复的照片在小米手机好像只是缩略图，原图还在云上面，需要点击下载才能下载下来。那我应该如何将云上的照片全部，不好意思，并没有找到这样的功能，你可以一键释放空间把本地照片全删了，但却不能一键把所有照片的原图全拉下，最终只能放弃使用使用谷歌相册作为主要的照片同步空间。&lt;/p>
&lt;p>吐槽了这么多小米云服务，可惜谷歌相册提供的云服务也有许多问题：需要特殊工具才能访问；不能选择关闭同步相机分组下的照片；打开了同步文件夹后，不能选择文件具体的同步顺序和批次，也不能暂停，想暂停就得把这个备份功能给关掉。这就导致明明我只是想把我新拍的两张照片同步到谷歌云上面，再同步到另一台手机上面，就必须要先把两台手机上全部照片备份好了才能达到目标（因为同步的顺序还是先同步最旧的）。&lt;/p>
&lt;p>不过这次的经历还是使我对这些云服务感到了一丝警觉，虽然我一直自诩是云计算与服务的拥护者，但如今这些云服务产品，只给人进，不给人出，不自由，难扩展，还封闭，逐渐迁移的沉没成本越来越高，被最终被喂屎的概率也只会越来越高。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category><category domain="https://scottyeung.top/tags/%E5%90%90%E6%A7%BD/">吐槽</category><category domain="https://scottyeung.top/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/">云服务</category></item><item><title>Kotlin Coroutines Notes (I)</title><link>https://scottyeung.top/2021/kotlin-coroutines-notes-1/</link><guid isPermaLink="true">https://scottyeung.top/2021/kotlin-coroutines-notes-1/</guid><pubDate>Wed, 15 Dec 2021 22:04:23 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;blockquote>
&lt;p>对于 &lt;a href="https://kotlinlang.org/docs/coroutines-basics.html">Kotlin 官方文档&lt;/a>当中 coroutines 部分的内容的学习 &lt;del>（翻译）&lt;/del>&lt;/p>
&lt;/blockquote>
&lt;p>在 Kotlin 当中，协程（coroutines）通过库 &lt;code>kotlinx.coroutines&lt;/code> 来提供，相较于其它语言的协程实现，Kotlin 选择的方式更为没有侵入性，其所使用的 &lt;code>async&lt;/code> 和 &lt;code>await&lt;/code> 等只是库提供的函数，而非语言自身的关键字，因而能够有着更好的兼容性。另外 Kotlin 当中提供的挂起函数 （suspending function）的概念，能为 Kotlin 当中 coroutines 提供比 Java 和 Javascript 当中的 future and promise 更加直观，安全，不易错的抽象&lt;/p>
&lt;h2 id="suspend-function">suspend function&lt;/h2>
&lt;p>A suspending function is simply a function that can be paused and resumed at a later time. They can execute a long running operation and wait for it to complete without blocking.&lt;/p>
&lt;p>所谓的挂起其实可以理解成这个函数将不会阻塞当前线程，调用一个函数后就丢到后面自己执行&lt;/p>
&lt;p>A suspend function can't be called everywhere. It should only be called from a coroutine or another suspend function&lt;/p>
&lt;h2 id="basic">Basic&lt;/h2>
&lt;p>Kotlin 当中 coroutine 的概念其实跟 Go 当中的比较类似，可以当作是一个轻量级的线程。不过 coroutine 并不绑定于某个具体的线程，其也可以在一个线程当中挂起，在另一个线程当中继续执行，所以可以理解为在基本线程上面的一层抽象的“轻量线程”。&lt;/p>
&lt;p>当然其实初期我们也不太需要理解其具体如何实现，先学会怎么用更实际&lt;/p>
&lt;h3 id="example">example&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">runBlocking&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// this: CoroutineScope
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">launch&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// launch a new coroutine and continue
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1000L&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// delay for 1 second (default time unit is ms)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;World!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// print after delay
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// main coroutine continues while a previous one is delayed
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>launch&lt;/code>: coroutine builder，用于开启一个新的协程（coroutine）来执行代码块，开启协程代码与其余代码同时独立地执行。&lt;/li>
&lt;li>&lt;code>delay&lt;/code>: 暂停协程一定时间后再恢复执行，这里的暂停并不会阻塞底层&lt;/li>
&lt;li>&lt;code>runBlocking&lt;/code>: 开启一个 coroutine scope, 并阻塞至其中所有协程执行完&lt;/li>
&lt;/ul>
&lt;p>只有在 coroutine scope 当中才能够通过 launch 开启新的协程，凭借此限制 Kotlin 可以实现结构化的并发（structured concurrency），保证了 CoroutineScope 必然会等待其中所有子协程完成才完成。&lt;/p>
&lt;h2 id="控制协程与结果获取">控制协程与结果获取&lt;/h2>
&lt;ul>
&lt;li>通过 &lt;code>launch&lt;/code> 开启一个新协程后同时会返回一个 Job 的对象，跟 C# 当中的 Task 比较类似，可以通过改对象来对协程任务进行控制（暂停或取消）&lt;/li>
&lt;li>通过 &lt;code>async&lt;/code> 可以获取一个 &lt;code>Deferred&lt;/code> 对象，类似于 &lt;code>Future&lt;/code> 和 &lt;code>Promise&lt;/code> 对象，存储了计算过程，但延迟了获取结果。it &lt;em>promises&lt;/em> the result sometime in the &lt;em>future&lt;/em>.&lt;/li>
&lt;/ul>
&lt;p>两者使用的区别主要是开启的协程是否有返回值。&lt;code>Deferred&lt;/code> 类型为继承 &lt;code>Job&lt;/code> 的泛型类型&lt;/p>
&lt;h3 id="结果获取">结果获取&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Deferred&lt;/code> 对象可以通过 await 方法阻塞等待结果返回&lt;/li>
&lt;li>对于多个 &lt;code>Deferred&lt;/code> 对象可以通过对其所在的 &lt;code>List&lt;/code> 当中调用 &lt;code>awaitAll&lt;/code> 阻塞等待所有任务完成返回&lt;/li>
&lt;/ul>
&lt;h2 id="channel">Channel&lt;/h2>
&lt;p>Kotlin 当中使用 Channel 来进行协程间的通信，就概念上来讲，其实跟 Go 当中的 channel 是一致的：不同 coroutines 通过往 channel 当中传输与接收数据，进行通信。不过 Kotlin 当中 Channel 为接口，使用的时候也是想普通的对象初始化与函数调用，通过 &lt;code>send&lt;/code> 和 &lt;code>receive&lt;/code> 方法进行数据传输，与 Go 当中使用 &lt;code>&amp;lt;-&lt;/code> 等作为语言特性的使用方式不同。&lt;/p>
&lt;p>Kotlin 当中的协程类型有 4 种&lt;/p>
&lt;ul>
&lt;li>无限制 channel：channel 当中存储数量无限制&lt;/li>
&lt;li>带缓冲 channel：限制 channel 当中可以存储的数量，当 &lt;code>send&lt;/code> 的时候 channel 当中元素数量超过缓冲数量限制则会阻塞&lt;/li>
&lt;li>Rendezvous channel：相当于缓冲数量为 0 的缓冲 channel，每次 &lt;code>send&lt;/code> 后都必须要等有人 &lt;code>receive&lt;/code> 才能停止阻塞&lt;/li>
&lt;li>Conflated channel：缓冲容量为 1，但每次 &lt;code>send&lt;/code> 并不会阻塞，而是会把里面有的元素给覆盖掉&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">rendezvousChannel&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Channel&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">bufferedChannel&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Channel&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">conflatedChannel&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Channel&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">CONFLATED&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">unlimitedChannel&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Channel&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">UNLIMITED&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/kotlin/">kotlin</category><category domain="https://scottyeung.top/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/">异步编程</category><category domain="https://scottyeung.top/tags/%E8%AE%B0%E5%BD%95/">记录</category><category domain="https://scottyeung.top/tags/notes/">notes</category><category domain="https://scottyeung.top/tags/Coding-%E5%AD%A6%E4%B9%A0/">Coding 学习</category><category domain="https://scottyeung.top/tags/coroutines/">coroutines</category></item><item><title>Java Functional Programming and Stream API (I)</title><link>https://scottyeung.top/2021/java-fp-stream-1/</link><guid isPermaLink="true">https://scottyeung.top/2021/java-fp-stream-1/</guid><pubDate>Thu, 11 Nov 2021 11:05:00 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>在使用学习了一段时间 JavaScript 之后，对那种在数据源后使用 lambda 函数进行链式的处理方式感到很爽，并带有点病态的沉迷感觉，啥事都想套个 map 或者 filter 来完成。在回到 Java 的学习后，发现自 Java 8 之后，其也开始提供 lambda 函数，并且提供了一些十分便利的 API，主要是 stream API，可以通过这些 API 对于 Collections 当中的数据进行比较 functional 的处理。&lt;/p>
&lt;h2 id="functional-interface">Functional Interface&lt;/h2>
&lt;p>Java 当中的 lambda 表示形式主要是通过函数接口的方式，所谓的函数接口为&lt;strong>只有一个方法的接口&lt;/strong>，例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@FunctinalInterface&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Predicate&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// or
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@FunctinalInterface&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Runnable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于参数为函数接口的方法，我们就可以使用 lambda 函数来代替实际实现接口的具体类或者匿名内部类。
例如在 Java 当中开启多线程，如果使用传统的传入匿名内部类的方法，可能会较为啰嗦，但如果使用 lambda 表达式，可以很好地简化代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// 匿名内部类
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Runnable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;run on a new thread!&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">})&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// lambda function
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;run on a new thread!&amp;#34;&lt;/span>&lt;span class="o">)).&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>lambda 函数的参数类型和返回类型，除了可以通过编译器隐式推导以外，还可以显式指定参数类型。&lt;/p>
&lt;h3 id="package-function">package function&lt;/h3>
&lt;p>在 Java 的 &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html">标准库 &lt;code>java.util.function&lt;/code>&lt;/a> 当中提供了许多的函数接口可供直接使用，例如&lt;/p>
&lt;ul>
&lt;li>&lt;code>Predicate&lt;/code>: 判定谓词函数 &lt;code>test&lt;/code>&lt;/li>
&lt;li>&lt;code>Consumer&lt;/code>: 接收输入参数，无返回值 &lt;code>accept&lt;/code>&lt;/li>
&lt;li>&lt;code>Function&lt;/code>: 接收参数，返回参数 &lt;code>apply&lt;/code>&lt;/li>
&lt;li>&lt;code>Operator&lt;/code>: 运算符 &lt;code>apply&lt;/code>&lt;/li>
&lt;li>&lt;code>Supplier&lt;/code>: 无输入生成返回 &lt;code>get&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>这些函数接口还分别提供了泛型版本，基本类型版本（IntFuction, BooleanSupplier），以及多元版本（BiFuction, UnaryOperator）&lt;/p>
&lt;h3 id="使用函数作为参数">使用函数作为参数&lt;/h3>
&lt;p>在官方库出了相关的函数接口 &lt;code>java.util.function&lt;/code> 之后，设计接收函数作为参数的函数就变得更为简单了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// 简单实现版的 filter
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">map&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Fuction&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">ans&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ans&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ans&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="must-immutable">must immutable&lt;/h3>
&lt;p>lambda 当中使用的外部变量必须为 final 或者是事实上是 final 的，否则会编译不过，例如下面的例子，需要一定的 workaround。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">getTotal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Date&lt;/span> &lt;span class="n">date1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Date&lt;/span> &lt;span class="n">date2&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">date2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">date2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">someOtherDate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// should use another variable to replace date2
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Date date2Final = date2;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">someList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">filter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">filter&lt;/span> &lt;span class="n">based&lt;/span> &lt;span class="n">on&lt;/span> &lt;span class="n">date1&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">date2&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">map&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Mapping&lt;/span> &lt;span class="n">Function&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">reduce&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Addition&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// return someList.stream().filter(filter based on date1 and date2Final).map(Mapping Function).reduce(Addition);
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="函数引用">函数引用&lt;/h3>
&lt;p>在某些时候，可以使用已有的方法传入到函数接口参数当中，例如&lt;/p>
&lt;ul>
&lt;li>&lt;code>obj::method&lt;/code>&lt;/li>
&lt;li>&lt;code>String::length&lt;/code>&lt;/li>
&lt;li>&lt;code>String[]::new&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>这样的设计大概是因为如果在 lambda 函数当中使用了外部 mutable 的变量，当这些变量被修改时可能会导致 lambda 函数实际执行时结果与预期不一致，例如可见 &lt;a href="https://scottyeung.top/2019/%E5%BE%AA%E7%8E%AF%E4%BD%93%E4%B8%AD%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%B0%8F%E5%9D%91/">循环体中局部变量的小坑&lt;/a>&lt;/p>
&lt;h2 id="stream-api">Stream API&lt;/h2>
&lt;p>stream API 主要用于对于 Collections 的数据进行操作，主要是通过链式的调用各种操作，最终获取想要的结果。其具有以下的特点：&lt;/p>
&lt;ul>
&lt;li>无存储。stream 是数据源的一个试图，并不会在中途产生一个保存数据源中数据的结构&lt;/li>
&lt;li>函数式编程。使用的方式非常函数式编程，大量使用函数接口传入函数，每个 API 也使用 Fluent API 的方式返回 stream 实现链式的调用&lt;/li>
&lt;li>惰式执行。stream 的操作并不会立即执行，只有等到用户真正需要结果的时候才会执行。&lt;/li>
&lt;li>可消费性。stream 只能被“消费”一次，一旦遍历过就会失效，就像容器的迭代器那样，想要再次遍历必须重新生成。&lt;/li>
&lt;/ul>
&lt;p>一个简单的例子：找出学生列表当中年龄大于 20 的学生，并获取他们的名字列表&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">nameList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Student&lt;/span>&lt;span class="o">&amp;gt;(...)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">filter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAge&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">20&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">map&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toList&lt;/span>&lt;span class="o">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果是写循环实现，可能就比较繁琐，需要初始化一个新的 List，遍历源数据当中的每个对象，判断年龄属性，如果满足则获取其名字属性并调用 &lt;code>List#add&lt;/code> 方法将其添加到 List 当中。&lt;/p>
&lt;h3 id="stream-方法">stream 方法&lt;/h3>
&lt;p>stream 的方法分为两大类：&lt;/p>
&lt;ul>
&lt;li>intermediate operation: 不会实际进行计算，会返回一个新的 stream
&lt;ul>
&lt;li>map: 对每个元素处理并返回新的元素&lt;/li>
&lt;li>reduce: 对元素逐个进行规约&lt;/li>
&lt;li>filter: 元素过滤&lt;/li>
&lt;li>distinct: 元素去重&lt;/li>
&lt;li>sorted: 元素进行排序&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>terminal operation: 马上进行计算获取 stream 的结果，调用后 stream 失效
&lt;ul>
&lt;li>count: 计数&lt;/li>
&lt;li>max/min: 获取最值&lt;/li>
&lt;li>forEach: for 循环的 fuctional 写法&lt;/li>
&lt;li>findFirst: 找第一个元素&lt;/li>
&lt;li>toArray: 转成数组&lt;/li>
&lt;li>collect: 把 stream 当中的元素收集到某个容器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="collect">collect&lt;/h3>
&lt;p>我们使用 stream 进行数据的处理，在大多数的时候还是想要从一个数据源当中获取到我们想要的数据，而这些想要获取的数据，除了是一些单个值的数据结果（如计数，最值），大多时候都需要以数据集的形式返回，这个时候就需要使用 collect 方法来对目标数据元素进行收集。&lt;/p>
&lt;p>Collect 的原理到底是什么呢？考虑一下将一个 Stream 转换成一个容器（或者 Map）需要做哪些工作？我们至少需要两样东西：&lt;/p>
&lt;ol>
&lt;li>提供容器的方法&lt;/li>
&lt;li>往容器添加元素的方法&lt;/li>
&lt;li>（如果是支持并行的话，还需要提供多个部分结果如何进行合并&lt;/li>
&lt;/ol>
&lt;p>所以 collect 的方法的其中一个定义如下，三个参数分别对应三个部分&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">R&lt;/span> &lt;span class="nf">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Supplier&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">supplier&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BiConsumer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">,?&lt;/span> &lt;span class="kd">super&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">accumulator&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BiConsumer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">combiner&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以下是将 stream 中元素收集到一个 ArrayList 的 collector 例子&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/posts/20211110-1.png" alt="">&lt;/p>
&lt;p>但是每次都传入三个函数接口参数着实比较麻烦，于是就设计出可以使用 Collector 对这三个参数进行一个封装，有以下的定义&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">R&lt;/span> &lt;span class="nf">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collector&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span> &lt;span class="kd">super&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">collector&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>官方的 &lt;code>Collectors&lt;/code> 工具类提供了静态方法生成各种常用的 Collector&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toList&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="c1">// 获取 List
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toSet&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="c1">// 获取 Set
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">keyGenerator&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ValueGenerator&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="c1">// 获取 Map
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toCollection&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Supplier&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">collectionFactory&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="c1">// 创建特定类型的 collection，因为前三者方式的 collector 都不能指定具体的接口实现类
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">joining&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;{&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;}&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>&lt;span class="c1">// &amp;#34;{I,love,you}&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="map-的生成">map 的生成&lt;/h3>
&lt;p>如何使用 stream 来生成 map？可以使用 collect 方法在特定的 collectors 当中&lt;/p>
&lt;ol>
&lt;li>使用 &lt;code>Collectors.toMap()&lt;/code> 方法。参数为 key 和 value 的生成函数&lt;/li>
&lt;li>使用 &lt;code>Collectors.partitioningBy()&lt;/code>。可以根据一个 predicate 函数将元素二分&lt;/li>
&lt;li>使用 &lt;code>Collectors.groupingBy()&lt;/code>。类似 sql 语句当中的 group by&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// 使用toMap()统计学生GPA
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Student&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Double&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">studentToGPA&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="n">students&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">identity&lt;/span>&lt;span class="o">(),&lt;/span>&lt;span class="c1">// 如何生成key, Function.identity 其实等于 x -&amp;gt; x
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">student&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">computeGPA&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="o">)));&lt;/span>&lt;span class="c1">// 如何生成value
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// Partition students into passing and failing
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Boolean&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Student&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">passingFailing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">students&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">partitioningBy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getGrade&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">PASS_THRESHOLD&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="c1">// Group employees by department
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Department&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">byDept&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">employees&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">groupingBy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getDepartment&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中 &lt;code>groupingBy&lt;/code> 方法还能像 sql 当中的 group by 一样进一步对于分组之后的元素进行处理。通过使用下游收集器，可以对于元素进行进一步的处理，例如分组之后对每组元素进行最值的查询或者计算平均值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// 使用下游收集器统计每个部门的人数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Department&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">totalByDept&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">employees&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">groupingBy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getDepartment&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">counting&lt;/span>&lt;span class="o">()));&lt;/span>&lt;span class="c1">// 下游收集器，分组后每组元素的 collection 如何进行收集
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// 按照部门对员工分布组，并只保留员工的名字
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Department&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">byDept&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">employees&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">groupingBy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getDepartment&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getName&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="c1">// 下游收集器，
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toList&lt;/span>&lt;span class="o">())));&lt;/span>&lt;span class="c1">// 更下游的收集器
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/Java/">Java</category><category domain="https://scottyeung.top/tags/Fuctional-Programming/">Fuctional Programming</category><category domain="https://scottyeung.top/tags/notes/">notes</category></item><item><title>学习模型的迁移</title><link>https://scottyeung.top/2021/learning-model/</link><guid isPermaLink="true">https://scottyeung.top/2021/learning-model/</guid><pubDate>Sun, 26 Sep 2021 17:10:46 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>今天早上在朋友圈看到有人转了一篇&lt;a href="https://zhuanlan.zhihu.com/p/414009313">推送&lt;/a>，借用机器学习当中的随机梯度下降中的一些经验，化用到人生的进程当中。初看起来挺有意思，这些所谓的道理，套在我们的生活当中确实是可行，例如&lt;/p>
&lt;ul>
&lt;li>要有目标。梯度下降需要一个目标来确定优化的方向，而在人们的生活当中，也确实是最好有个或长期或短期的目标来驱动自己行动&lt;/li>
&lt;li>坚持走，很远也能到达。随机梯度下降当中只要一直保持下降趋势总能到达一个最优解，即使并不是一个全局的最优解，也可以通过随机起点，重新再来。&lt;/li>
&lt;li>痛苦的卷。需要不断地踏出自己的舒适区，改变自己的参数继续前进&lt;/li>
&lt;li>可以躺平。但改变的过程中除了可以调大步长下降得更快以外，还能够调小步子让自己休息下&lt;/li>
&lt;/ul>
&lt;p>当然其实里面也有许多槽点，例如人生并不能像机器学习过程一般随意地重来，尤其是在当下这个对失败尤其不宽容的社会来说。不过对这篇文章的吐槽并不是博文的关键，这篇文章主要还是让我想起了以前看过一个关于学习方法的 up 主 &lt;a href="https://www.zhihu.com/people/YJango/posts">Yjango&lt;/a>，也是这般从机器学习当中套用概念，从而形成自己的一套学习方法。这个 up 主提出主要 idea 为：学习的过程其实是对已有材料的提炼吸收，从中寻找问题求解的规律和模式，而这恰好就是机器学习所擅长的（从数据当中获取知识），因而人可以像神经网络模型一般来学习，通过不停地接收输入，生成输出，并比对预期输出形成反馈，从而不断地对自身进行纠正与提升。&lt;/p>
&lt;p>这种大道至简的道理其实很简单，无非就是刻意练习的一种，通过不断寻求反馈来进行改进，但是借用了机器学习当中的概念后，摇身一变就变成了一套系统化的学习方法与模型。看起来就觉得很有道理，尤其是对于机器学习有相关知识的支持者更是觉得，万物均可 ML，把机器学习模式应用在日常生活当中未免太酷。&lt;/p>
&lt;p>但我们真的是缺这种大道吗？许多时候知道许多道理，但仍然过不好一生的关键原因还是在于：知与行未能合一。道理我都懂，只要那样做就好，但关键是那样到底是要怎么做，怎么开始第一步，这种术也是相当必要的。自己常常立 Flag 的时候总会立一个大大的目标，我要做到怎么样，但完全就没有细细考虑过怎样提供一个具体且即刻可行的计划和方案出来，例如说我想要每天练拳，单凭一腔热诚和自制力肯定无法坚持到每天完成，然后便会逐渐将其抛诸脑后，事后不免会只是以自己太懒了等主观借口作为理由，自我批评下便就此过去，将目标忘却。但如果能有个具体的理想方案，例如每天在什么时候练拳，如果有什么特殊情况没有时间，练拳计划调整到哪一个时间段，或者第二天怎么补上，或是怎样连同伙伴或者团体一起合练，这样的话起码不至于把想要的目标直接丢了。&lt;/p>
&lt;p>当然我大多数时候也还不过是个无法知行合一的空想理论家罢了😅除了需要知道一个在大体上起指导作用的道以外，还需要一个确实可行马上可用的术，但这种术怎么来，怎么指定具体可行的计划，怎么让自己马上投身到行动当中，又是一个值得思考的问题了。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E5%AD%A6%E4%B9%A0/">学习</category><category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category><category domain="https://scottyeung.top/tags/%E7%94%9F%E6%B4%BB/">生活</category></item><item><title>Spring GraphQL 使用记录</title><link>https://scottyeung.top/2021/guide-to-spring-graphql/</link><guid isPermaLink="true">https://scottyeung.top/2021/guide-to-spring-graphql/</guid><pubDate>Wed, 15 Sep 2021 16:26:42 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;a href="https://spring.io/projects/spring-graphql#overview">Spring GraphQL&lt;/a> 是今年 Spring 新发布的一个集成 Graphql 的 Spring Application，凭借着 Spiring boot 开箱即用的特性，能够非常快地构建出一个可用的 Graphql 服务。然而尽管可用，但其&lt;a href="https://docs.spring.io/spring-graphql/docs/1.0.0-SNAPSHOT/reference/html/">文档&lt;/a>实在是写得一言难尽，尤其是对于一些进一步的功能来说，需要靠自己看 API 文档来摸索。&lt;/p>
&lt;p>以下记录使用的相关情况&lt;/p>
&lt;h2 id="setup">Setup&lt;/h2>
&lt;p>可以通过构建 Spring boot 项目来进行初始化&lt;/p>
&lt;p>使用 Gradle&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-GROOVY" data-lang="GROOVY">&lt;span class="n">dependencies&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">implementation&lt;/span> &lt;span class="s1">&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span>
&lt;span class="c1">// Spring GraphQL Boot starter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">implementation&lt;/span> &lt;span class="s1">&amp;#39;org.springframework.experimental:graphql-spring-boot-starter:1.0.0-SNAPSHOT&amp;#39;&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="n">repositories&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">mavenCentral&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="n">maven&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="s1">&amp;#39;https://repo.spring.io/milestone&amp;#39;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="c1">// Spring milestones
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">maven&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="s1">&amp;#39;https://repo.spring.io/snapshot&amp;#39;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="c1">// Spring snapshots
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者使用 Maven&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-web&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
// Spring GraphQL Boot starter
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.experimental&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>graphql-spring-boot-starter&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.0.0-SNAPSHOT&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- ... --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- For Spring project milestones or snapshot releases --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;repositories&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;repository&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;id&amp;gt;&lt;/span>spring-milestones&lt;span class="nt">&amp;lt;/id&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>Spring Milestones&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;url&amp;gt;&lt;/span>https://repo.spring.io/milestone&lt;span class="nt">&amp;lt;/url&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/repository&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;repository&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;id&amp;gt;&lt;/span>spring-snapshots&lt;span class="nt">&amp;lt;/id&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>Spring Snapshots&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;url&amp;gt;&lt;/span>https://repo.spring.io/snapshot&lt;span class="nt">&amp;lt;/url&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;snapshots&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;enabled&amp;gt;&lt;/span>true&lt;span class="nt">&amp;lt;/enabled&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/snapshots&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/repository&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/repositories&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>导入依赖后，将 Graphql Schema 文件放到 &lt;code>resources/graphql&lt;/code> 目录下并进行相应的配置即可运行，运行后在设定的路径可以看到网页版的 playground&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">graphql&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">graphiql&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 提供辅助用的网页端 playground&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">enabled&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">schema&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 提供 schema&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">printer&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">enabled&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Graphql endpoint&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="query-and-mutation">Query and Mutation&lt;/h2>
&lt;p>Schema 中提供的 query 和 mutation 通过注解映射到 Controller 中方法进行处理，并返回相应的数据。此处默认使用的 convention 的方式，只要方法的名字及其参数的名字与 Schema 声明的一致则可自动映射，否则也可以通过注解的参数进行设置。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Controller&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TodoController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@QueryMapping&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TodoItem&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">todoItems&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">GraphQLContext&lt;/span> &lt;span class="n">cxt&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">u&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getUserInContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cxt&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">todoService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTodoItemsByUser&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@MutationMapping&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">TodoItem&lt;/span> &lt;span class="nf">createTodoItem&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@Argument&lt;/span> &lt;span class="n">TodoItemInput&lt;/span> &lt;span class="n">todo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">GraphQLContext&lt;/span> &lt;span class="n">cxt&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getUserInContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cxt&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">todoService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createTodoItem&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">todo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>方法的参数支持&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://javadoc.io/doc/com.graphql-java/graphql-java/latest/graphql/schema/DataFetchingEnvironment.html">DataFetchingEnvironment&lt;/a>: 包含本次查询当中丰富的相关信息，包括查询的变量，context等信息&lt;/li>
&lt;li>通过注解 &lt;code>@Argument&lt;/code> 可以为参数绑定传入的相应变量&lt;/li>
&lt;li>GraphQLContext: 用于存储访问上下文中相应数据内容&lt;/li>
&lt;/ul>
&lt;h2 id="authorization">Authorization&lt;/h2>
&lt;p>怎样进行权限认证，文档中只是简单地给了段文字介绍说可以用 Spring Security 来进行权限认证。然而我的需求也没有这么复杂，只需要简单地拦截请求，查看有无携带 token 访问，如果带 token 的访问则将其转换成相应的用户并给后续交给后续的 Controller 来进行处理。&lt;/p>
&lt;p>此处我使用的是 WebInterceptor 来进行请求的拦截处理，主要的思路为：&lt;/p>
&lt;ol>
&lt;li>拦截每个请求，尝试取请求中 header 中的 Authorization 字段&lt;/li>
&lt;li>如果没有这个字段，则跳过&lt;/li>
&lt;li>如果有这个字段，则尝试根据 token 取出相应的 User，如果找不到，则抛出无效 token 的错误&lt;/li>
&lt;li>找到后将该 User 对象加入到 graphQLContext 当中供 Controller 使用。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MyInterceptor&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">WebInterceptor&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">UserService&lt;/span> &lt;span class="n">userService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">MyInterceptor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">UserService&lt;/span> &lt;span class="n">userService&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">userService&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">userService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Mono&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">WebOutput&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">intercept&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">WebInput&lt;/span> &lt;span class="n">webInput&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">WebGraphQlHandler&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">authHeader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">webInput&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getHeaders&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Authorization&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">webInput&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toExecutionInput&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">authHeader&lt;/span>&lt;span class="o">)||&lt;/span>&lt;span class="n">authHeader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()==&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">handle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">webInput&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">userService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getUserByToken&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">authHeader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Mono&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">just&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">WebOutput&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">webInput&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">ExecutionResultImpl&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">GraphqlExceptionBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">genError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">GraphqlExceptionBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ErrorType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">INVALID_TOKEN&lt;/span>&lt;span class="o">))));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">webInput&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configureExecutionInput&lt;/span>&lt;span class="o">(((&lt;/span>&lt;span class="n">executionInput&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;()&lt;/span> &lt;span class="o">{{&lt;/span>
&lt;span class="n">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}};&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">graphQLContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}));&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">handle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">webInput&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在后续的 controller 方法当中，如果需要使用到用户信息或者需要用户权限，则直接从 graphQLContext 当中取出相应的对象，如果取不到则抛出相应的 error&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="n">User&lt;/span> &lt;span class="nf">getUserInContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">GraphQLContext&lt;/span> &lt;span class="n">cxt&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">cxt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getOrEmpty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">orElseThrow&lt;/span>&lt;span class="o">(()-&amp;gt;&lt;/span> &lt;span class="n">GraphqlExceptionBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">genError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">GraphqlExceptionBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ErrorType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">FORBIDDEN&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="error-handler">Error Handler&lt;/h2>
&lt;p>在应用运行过程所有抛出的异常最终都会以 GraphQL 的形式返回给客户端。一开始我还以为是会直接将抛出的 GraphQLError 直接返回给用户，所以直接在代码内部抛出错误，企图通过 Controller 最终返回给用户。不过发现这样做的话，我在 GraphlQLErrorException 当中设置的 extensions 总会没有效果，而是全被归类为 INTERNAL_ERROR。&lt;/p>
&lt;p>后来发现是所有的异常都会跑去一个 ErrorResolver 的东西处理，会重新把 Error 重新封装一次。所以我们必须自己写一个 ExceptionHandler 来将其覆盖&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DataFetcherExceptionHandler&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">DataFetcherExceptionResolverAdapter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">GraphQLError&lt;/span> &lt;span class="nf">resolveToSingleError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DataFetchingEnvironment&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">GraphQLError&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另外，GraphQLError 的生成我是通过自定义了一个 Builder 工具类来辅助生成，通过枚举类型来生成包含 message，error 的 Error&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">GraphqlExceptionBuilder&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">ErrorType&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">DUPLICATED_USER&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">NO_USER&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">WRONG_PASSWORD&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">INVALID_TOKEN&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">FORBIDDEN&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">NO_ITEM&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">updateErrorCode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ErrorType&lt;/span> &lt;span class="n">errorType&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;()&lt;/span> &lt;span class="o">{{&lt;/span>
&lt;span class="n">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">errorType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}};&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">GraphqlErrorException&lt;/span> &lt;span class="nf">genError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ErrorType&lt;/span> &lt;span class="n">errorType&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">err&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GraphqlErrorException&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newErrorException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">errorType&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">DUPLICATED_USER&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">message&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;existed username&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">NO_USER&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">message&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;not exist username&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">WRONG_PASSWORD&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">message&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;wrong password&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">INVALID_TOKEN&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">message&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;invalid token&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">FORBIDDEN&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">message&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;access forbidden&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">NO_ITEM&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">message&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;no such query items&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">extensions&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">updateErrorCode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">errorType&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/GraphQL/">GraphQL</category><category domain="https://scottyeung.top/tags/Java/">Java</category><category domain="https://scottyeung.top/tags/Spring/">Spring</category></item><item><title>数据定义的生活</title><link>https://scottyeung.top/2021/%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E7%9A%84%E7%94%9F%E6%B4%BB/</link><guid isPermaLink="true">https://scottyeung.top/2021/%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E7%9A%84%E7%94%9F%E6%B4%BB/</guid><pubDate>Fri, 27 Aug 2021 16:41:34 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>刚放假回家的那段时间，总是想着把现在在用的小米手环换成 Amazfit 的智能手表。不是因为现在的手环有什么问题，也不是因为看中的智能手表有着如何吸引人的功能，硬要说的话可能就是新的手表能够多测身体的一些参数，配套新的应用可能生成更好看的图表数据。然而这样就已经是我感到心痒痒了，直到现在都还没有完全打消购买的念头。&lt;/p>
&lt;p>不知道从什么时候起，我很喜欢使用数据来记录生活的一切：用手环来记录每天的睡眠和运动情况，用 Forest 来记录日常的学习时间，甚至写代码的情况最近也开始使用 WakaTime 来进行记录。记录多了，所产生的数据自然也多了，这些数据看起来通常是会觉得不错的，尤其是在过了一段时间后来回顾过去一段数据的数据记录，有时也会让人觉得，好像之前确实是有在做事情，而所做的事情确实是有那么点意义。&lt;/p>
&lt;p>可惜的是，这样的数据除了在日后回顾的时候给自己感慨以外，还能带来什么实际的用途呢？像是睡眠情况的监测，睡眠的长度和质量其实自己也能有所察觉，而软件给出的睡眠不足和深睡较短的结果，我也没有很好的解决方法，即使是知道自己睡得不够或睡得很晚，我又会去解决吗，又可以如何解决。还有手机自带的使用时间监测，不需要点开就知道自己花了大量的时间在手机上面，这些数据的出现除了让自己徒增愧疚以外，也带来不了很好的改正效果。&lt;/p>
&lt;p>数据自己用不上就算了，作为一个日后回忆的记录，其实也未尝不可，不过最近开始隐隐觉得，似乎有点找寻不到日常学习工作的意义，或者更进一步来说，如果进行学习或工作的时候没被记录下来，仿佛就是没有意义的无用功一样。好像在手机上面看了一会书，如果这个过程没有被微信读书记录上阅读时间，或者是摘抄几个片段和写几条记录，就好像没有看过书一样，即使是看了一下午，也感觉是什么都没做的一个下午。运动锻炼也是如此，对于不能使用手环记录的运动，意愿会大大下降。&lt;/p>
&lt;p>因此为了重新平日生活当中的意义，开始有意无意地减少一些时间的记录，例如 Forest 以及手环的使用，尽量减少对于数据给自己带来的反馈感，避免行为模式变成数据驱动的模式，让行为的出发点回归的意愿本身。不过这样的想法能够持续多久，自己也无法预计，而且真的可以做到找寻会行为的意义和自身的意义本身来进行行为的选择吗，其实也不太乐观。&lt;/p>
&lt;p>问题又回到了自己到底想要做什么上面。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E6%95%B0%E6%8D%AE/">数据</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category><category domain="https://scottyeung.top/tags/%E7%94%9F%E6%B4%BB/">生活</category></item><item><title>今日之大学</title><link>https://scottyeung.top/2021/current-college-life/</link><guid isPermaLink="true">https://scottyeung.top/2021/current-college-life/</guid><pubDate>Tue, 27 Jul 2021 16:48:49 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>今天在翻之前在看的一本书，名为《我的二本学生》，内容讲述了广东某二本学院老师对于其执教以来所接触到的学生的记录。虽然仅是类似于教学札记般的文字记述，但是胜在够于真实和细致，还是很能够让人了解到以前的大学生生活状态与今日之大学生的生活状态，及其两者的区别。&lt;/p>
&lt;p>今天在里面看到一个观点，讲到中国大学教育目标已经发生了明显的变化，以前的大学教育目标是为集体（社会和祖国）培养人才，而现在的教育目标，更多是在把学生培养成为了找到工作的就业主体，以温铁军老师的话来说，就是“把人变成资本化的一个要素”。作为一个计算机专业的学生来说，我对于这种转变的现象感到深以为然。&lt;/p>
&lt;blockquote>
&lt;p>我的大学时代，哪怕只是一个中专生、专科生，也被视为“天之骄子”，对农村的孩子而言，考上大学常常被视为“跳龙门”，并被国家从人事关系上认定为“干部”；而对 062111 班的学生而言，进入广东 F 学院这样的二本院校，并不能给他们带来太多精神上的荣耀感，从进入校门开始，还没来得及感受高中老师曾描绘的美妙大学时光，就被辅导员告知就业的压力。他们毕业时，更多人拿到的只是一份“劳务派遣”，可以说，刚刚卸下高考的重负，就绷上了找工作的弦，整个大学过程，不过教育产业化后被学校锻造为专业“流水线”上的一个规整产品，并被冠以“人力资源”的工具化表述。&lt;/p>
&lt;p>二十世纪九十年代初期的大学生，无论国家顶尖的北京大学，还是地方上的岳阳大学，在培养学生上，都首先立足将大学生还原到一个完整的人，注重学生的整体素养和长远发展，学生既不会被就业绑架，也不会盲目地受制于一些所谓的就业技能，而忽略掉更为重要的专业学习。在具体的教学计划和课程安排上，学生也会拥有充分的自主学习空间，不会延续高中时代的填鸭模式。&lt;/p>
&lt;/blockquote>
&lt;p>因为这种目标的改变，导致了进入大学校园的学生的行为与心态都发生了极大的改变，尤其是目标的明确化和具体化，使得上学时的行为路径也变得同一化与固定化。就我所在的计算机行业来看，现在的本科学生目标大概可以分成 3 类：继续升学读研读博；投身于互联网公司的相关工作；考取公务员编制或单位。每个目标都有着较为固定且“标准”的路径。如果选择出国或保研，那么就要好好应付课程来换取好的 GPA，及早地关注政策或者选校等信息，才可以能够有着好的学习选择。如果选择到互联网大厂成为一个搬砖码农，则需要尽早开始刷题，在正确的时间点上面刷够足够数量的算法题，背好面试题，并且在适合的时间参与暑期实习和秋招，才能找到一份好工作。如果是相当公务员或单位，则需要积极参加于各种党团活动，尽可能于各种组织中谋得个三两职位，获取任职经历，到了某个时间点之后，就可以关注各种信息，或是选调，或是省考国考，然后开始刷题准备。&lt;/p>
&lt;p>这些路径随着大家流传下来的经验逐渐固定并统一，形成了模板一样的行为模式，想做什么，就必须要按照路径一步步走，走错一步，或者是缺少一步，可能就没有理想的结果。然而问题却是，我们真的知道自己想要什么吗？或者说我们能够在入学早期的时候就能知道自己想要什么吗？好一点的可以做多手准备，企图往全面发展，但结果可能会是多面手但无一精，且耗费了许多精力。若只能准备单个方面，那这些缺失的准备又如何能够填补回来？就比如说有意通过选调进公务员系统的，一般都需要党员身份，好一点的部门岗位甚至需要有校级部门任职经历或者是校级的奖励，而这种事情是没有办法通过短时间突击换取而来的。这种路径的固定化，让我们在做选择的时候变得更加谨慎，也更加犹豫。&lt;/p>
&lt;p>另外这种路径固定化所带来的更重要的问题，是路径上面每个阶段节点都变得更加重要，每个阶段的结果都很重要，可能因为某一个结果不如预期，就宣判了这个路径和目标的失败。尤其是结合当下社会的普遍舆论，中国人的社会是不能容忍失败的，社会对于个人的失败要求是很苛刻的，一旦失败一次，机会就不会再有，对于某些人来说，可能就是人生受到了极大的打击。例如应届身份，可能因为刚毕业找到了一份不好的工作而丢失这个身份，就不得不去参加社招与有着几年经验的人竞争上岗，又或是就此失去大批单位或编制的报名资格，机会骤减。&lt;/p>
&lt;p>前两天在知乎看到一个&lt;a href="https://zhuanlan.zhihu.com/p/392899093?utm_source=wechat_session&amp;amp;utm_medium=social&amp;amp;utm_oi=71128873697280&amp;amp;utm_campaign=shareopn">回答&lt;/a>，里面提到今年开始规培变成了一年一考，且不设补考。有许多的名校医学博士规培了几年，就因为最终的规培考核某个科目挂了，就可能导致无法毕业没有学位证，错过已经考上的医院工作，执业医师证过期等种种后果（然而原帖的内容已经被删了，只能从评论中一窥究竟）。大多数人的路径就是这样一环扣一环，如果一环没有扣上，那可能整个链条都断掉。对于这些学生来说，没有学位证，入不了学，找不到工作，连转行的资格都没有。&lt;/p>
&lt;p>为什么需要对失败如此苛刻呢？个人感觉可能是因为我们环境中的人太多了，个人的失败对于集体而言实在是太过于无足轻重，你失败了，你掉下去，总会有其他人顶上来。失败的人要怎么办又会有谁来管，于是即可简单地将此归结于个人的主观原因上面，因为你失败了，所以你就没有机会，也不配有机会了。而你为什么会失败，也全都是你的个人原因，无论主观客观。&lt;/p>
&lt;p>回到我自己本身，其实对于所谓的职业路径选择，我也并不是十分确定，互联网公司还是单位编制，写代码的话是前端还是后台，都还不很明确。现在的我也只能够让自己在每一条路径上面都不出错不失败罢了吧。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category><category domain="https://scottyeung.top/tags/%E8%AF%BB%E4%B9%A6/">读书</category><category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category></item><item><title>软工科研随想</title><link>https://scottyeung.top/2021/%E8%BD%AF%E5%B7%A5%E7%A7%91%E7%A0%94%E9%9A%8F%E6%83%B3/</link><guid isPermaLink="true">https://scottyeung.top/2021/%E8%BD%AF%E5%B7%A5%E7%A7%91%E7%A0%94%E9%9A%8F%E6%83%B3/</guid><pubDate>Fri, 09 Jul 2021 11:18:39 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>感觉科研陷入了一种在纯空想的状态，明明软件工程是为了解决软件开发过程中的各种问题，但实际上大部分从事软工领域的科研人员并没有足够的开发相关经验，甚至缺乏相当的写代码的经历，这些人（包括我自己）是如何能够找到所谓的痛点，发现新的问题和场景呢？简单地通过到开源社区里面浏览开发人员的各种互动产生的各种 discussion 与 artifacts，再加以自己浅薄的了解与分析，我们就能够真正认识到在开发过程中尚存在什么需要解决的重要问题吗？&lt;/p>
&lt;p>为什么需要去寻找这些新的问题场景？从个人感受来说，发文章的工作无非是两种方向：&lt;/p>
&lt;ol>
&lt;li>寻找并定义新的问题场景。自己定义的新问题只要没有人做过，并且能够把这个问题的重要性讲好，基本上没什么问题。解决好了，是可以是开山之作，即使没能很好解决，也可以说是先把问题抛出了引发大家注意。&lt;/li>
&lt;li>对已有问题的更优新方法。通过对已经存在并有人研究过的方法进行继续研究，试图创造出性能更好，开销更小的方法。&lt;/li>
&lt;/ol>
&lt;p>通常来说，第二种方向往往需要有着更高的技术积累要求，因而可能更难，需要的时间周期也更长。所以像是硕士等短周期科研工作者（如我）往往会更倾向于第一种方向。于是乎最近在寻找新的工作方向的我就在一直想新的问题，不断地在重复以下流程&lt;/p>
&lt;ol>
&lt;li>在 GitHub 上面浏览一定数量 issues 并选择记录&lt;/li>
&lt;li>根据这些记录归纳总结可能可以做的问题&lt;/li>
&lt;li>把这些问题拿去讨论，然后逐个被告知已经有人做过或者很难做出来&lt;/li>
&lt;li>然后重新回到步骤 1&lt;/li>
&lt;/ol>
&lt;p>想起大四刚接触科研的时候就有过一个疑惑：&lt;/p>
&lt;blockquote>
&lt;p>好奇做 empirical study 的人是如何在没有某一个领域，某一个方面的专业知识，却能够对此做出深入而专业的分析。像 empirical study on bug，一般来说，做的人也并不是就研究这个方向的，就如 bugs in machine learning，研究人员也不是做 machine learning 的，但也还是能做出看上去还挺专业的分析，虽然涉及到的 machine Learning 的概念其实比较少。就像我现在做 llvm toolchain bug，我一没有接触过 llvm，工具链也不知道是啥，由我来做的分析真的可信/有价值吗？当前阅读 bug report 都有点吃力。
如何解决？想到两个点。一个是合作，每个人精通一方面的知识，通过合作获取意见，轮流充当 expert/data collecter/analyzer 的角色。另外一个是快速学习入门，但这个其实比较虚，不过其实做分析需要的水平其实也不是很高？&lt;/p>
&lt;/blockquote>
&lt;p>我们研究软件质量，会选择某些特定类型的软件来进行研究考察，但事实上我们并没有在这一类型或这一领域中有着深厚的专业知识，所以我们该如何对其做出深入而专业的分析，又或者说，为什么这类工作不交给领域相关的开发人员来负责其质量。也许是我们这也有着通用的，可以补上领域知识缺失的屠龙方法吧（当然可能合作更为关键）。&lt;/p>
&lt;p>&lt;del>所以到头来好像也没想出个什么结果，越想反而越加劝退自己了&lt;/del>&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E7%A7%91%E7%A0%94/">科研</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category><category domain="https://scottyeung.top/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/">软件工程</category></item></channel></rss>