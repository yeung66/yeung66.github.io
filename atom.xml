<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>YeungYeah 的乱写地</title><link>https://scottyeung.top/</link><description>YeungYeah 的乱写地中记录了作者的所思所想及所为。</description><generator>Hugo 0.83.1 https://gohugo.io/</generator><language>zh-CN</language><managingEditor>yeungyeah@qq.com (YeungYeah)</managingEditor><webMaster>yeungyeah@qq.com (YeungYeah)</webMaster><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><lastBuildDate>Tue, 02 Nov 2021 03:27:32 +0000</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://scottyeung.top/atom.xml"/><item><title>学习模型的迁移</title><link>https://scottyeung.top/2021/learning-model/</link><guid isPermaLink="true">https://scottyeung.top/2021/learning-model/</guid><pubDate>Sun, 26 Sep 2021 17:10:46 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>今天早上在朋友圈看到有人转了一篇&lt;a href="https://zhuanlan.zhihu.com/p/414009313">推送&lt;/a>，借用机器学习当中的随机梯度下降中的一些经验，化用到人生的进程当中。初看起来挺有意思，这些所谓的道理，套在我们的生活当中确实是可行，例如&lt;/p>
&lt;ul>
&lt;li>要有目标。梯度下降需要一个目标来确定优化的方向，而在人们的生活当中，也确实是最好有个或长期或短期的目标来驱动自己行动&lt;/li>
&lt;li>坚持走，很远也能到达。随机梯度下降当中只要一直保持下降趋势总能到达一个最优解，即使并不是一个全局的最优解，也可以通过随机起点，重新再来。&lt;/li>
&lt;li>痛苦的卷。需要不断地踏出自己的舒适区，改变自己的参数继续前进&lt;/li>
&lt;li>可以躺平。但改变的过程中除了可以调大步长下降得更快以外，还能够调小步子让自己休息下&lt;/li>
&lt;/ul>
&lt;p>当然其实里面也有许多槽点，例如人生并不能像机器学习过程一般随意地重来，尤其是在当下这个对失败尤其不宽容的社会来说。不过对这篇文章的吐槽并不是博文的关键，这篇文章主要还是让我想起了以前看过一个关于学习方法的 up 主 &lt;a href="https://www.zhihu.com/people/YJango/posts">Yjango&lt;/a>，也是这般从机器学习当中套用概念，从而形成自己的一套学习方法。这个 up 主提出主要 idea 为：学习的过程其实是对已有材料的提炼吸收，从中寻找问题求解的规律和模式，而这恰好就是机器学习所擅长的（从数据当中获取知识），因而人可以像神经网络模型一般来学习，通过不停地接收输入，生成输出，并比对预期输出形成反馈，从而不断地对自身进行纠正与提升。&lt;/p>
&lt;p>这种大道至简的道理其实很简单，无非就是刻意练习的一种，通过不断寻求反馈来进行改进，但是借用了机器学习当中的概念后，摇身一变就变成了一套系统化的学习方法与模型。看起来就觉得很有道理，尤其是对于机器学习有相关知识的支持者更是觉得，万物均可 ML，把机器学习模式应用在日常生活当中未免太酷。&lt;/p>
&lt;p>但我们真的是缺这种大道吗？许多时候知道许多道理，但仍然过不好一生的关键原因还是在于：知与行未能合一。道理我都懂，只要那样做就好，但关键是那样到底是要怎么做，怎么开始第一步，这种术也是相当必要的。自己常常立 Flag 的时候总会立一个大大的目标，我要做到怎么样，但完全就没有细细考虑过怎样提供一个具体且即刻可行的计划和方案出来，例如说我想要每天练拳，单凭一腔热诚和自制力肯定无法坚持到每天完成，然后便会逐渐将其抛诸脑后，事后不免会只是以自己太懒了等主观借口作为理由，自我批评下便就此过去，将目标忘却。但如果能有个具体的理想方案，例如每天在什么时候练拳，如果有什么特殊情况没有时间，练拳计划调整到哪一个时间段，或者第二天怎么补上，或是怎样连同伙伴或者团体一起合练，这样的话起码不至于把想要的目标直接丢了。&lt;/p>
&lt;p>当然我大多数时候也还不过是个无法知行合一的空想理论家罢了😅除了需要知道一个在大体上起指导作用的道以外，还需要一个确实可行马上可用的术，但这种术怎么来，怎么指定具体可行的计划，怎么让自己马上投身到行动当中，又是一个值得思考的问题了。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E5%AD%A6%E4%B9%A0/">学习</category><category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category><category domain="https://scottyeung.top/tags/%E7%94%9F%E6%B4%BB/">生活</category></item><item><title>Spring GraphQL 使用记录</title><link>https://scottyeung.top/2021/guide-to-spring-graphql/</link><guid isPermaLink="true">https://scottyeung.top/2021/guide-to-spring-graphql/</guid><pubDate>Wed, 15 Sep 2021 16:26:42 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>&lt;a href="https://spring.io/projects/spring-graphql#overview">Spring GraphQL&lt;/a> 是今年 Spring 新发布的一个集成 Graphql 的 Spring Application，凭借着 Spiring boot 开箱即用的特性，能够非常快地构建出一个可用的 Graphql 服务。然而尽管可用，但其&lt;a href="https://docs.spring.io/spring-graphql/docs/1.0.0-SNAPSHOT/reference/html/">文档&lt;/a>实在是写得一言难尽，尤其是对于一些进一步的功能来说，需要靠自己看 API 文档来摸索。&lt;/p>
&lt;p>以下记录使用的相关情况&lt;/p>
&lt;h2 id="setup">Setup&lt;/h2>
&lt;p>可以通过构建 Spring boot 项目来进行初始化&lt;/p>
&lt;p>使用 Gradle&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-GROOVY" data-lang="GROOVY">&lt;span class="n">dependencies&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">implementation&lt;/span> &lt;span class="s1">&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span>
&lt;span class="c1">// Spring GraphQL Boot starter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">implementation&lt;/span> &lt;span class="s1">&amp;#39;org.springframework.experimental:graphql-spring-boot-starter:1.0.0-SNAPSHOT&amp;#39;&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="n">repositories&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">mavenCentral&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="n">maven&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="s1">&amp;#39;https://repo.spring.io/milestone&amp;#39;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="c1">// Spring milestones
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">maven&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="s1">&amp;#39;https://repo.spring.io/snapshot&amp;#39;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="c1">// Spring snapshots
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者使用 Maven&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-web&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
// Spring GraphQL Boot starter
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.experimental&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>graphql-spring-boot-starter&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.0.0-SNAPSHOT&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- ... --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- For Spring project milestones or snapshot releases --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;repositories&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;repository&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;id&amp;gt;&lt;/span>spring-milestones&lt;span class="nt">&amp;lt;/id&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>Spring Milestones&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;url&amp;gt;&lt;/span>https://repo.spring.io/milestone&lt;span class="nt">&amp;lt;/url&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/repository&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;repository&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;id&amp;gt;&lt;/span>spring-snapshots&lt;span class="nt">&amp;lt;/id&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>Spring Snapshots&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;url&amp;gt;&lt;/span>https://repo.spring.io/snapshot&lt;span class="nt">&amp;lt;/url&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;snapshots&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;enabled&amp;gt;&lt;/span>true&lt;span class="nt">&amp;lt;/enabled&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/snapshots&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/repository&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/repositories&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>导入依赖后，将 Graphql Schema 文件放到 &lt;code>resources/graphql&lt;/code> 目录下并进行相应的配置即可运行，运行后在设定的路径可以看到网页版的 playground&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">graphql&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">graphiql&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 提供辅助用的网页端 playground&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">enabled&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">schema&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 提供 schema&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">printer&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">enabled&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Graphql endpoint&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="query-and-mutation">Query and Mutation&lt;/h2>
&lt;p>Schema 中提供的 query 和 mutation 通过注解映射到 Controller 中方法进行处理，并返回相应的数据。此处默认使用的 convention 的方式，只要方法的名字及其参数的名字与 Schema 声明的一致则可自动映射，否则也可以通过注解的参数进行设置。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Controller&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TodoController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@QueryMapping&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TodoItem&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">todoItems&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">GraphQLContext&lt;/span> &lt;span class="n">cxt&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">u&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getUserInContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cxt&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">todoService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTodoItemsByUser&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@MutationMapping&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">TodoItem&lt;/span> &lt;span class="nf">createTodoItem&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@Argument&lt;/span> &lt;span class="n">TodoItemInput&lt;/span> &lt;span class="n">todo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">GraphQLContext&lt;/span> &lt;span class="n">cxt&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getUserInContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cxt&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">todoService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createTodoItem&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">todo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>方法的参数支持&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://javadoc.io/doc/com.graphql-java/graphql-java/latest/graphql/schema/DataFetchingEnvironment.html">DataFetchingEnvironment&lt;/a>: 包含本次查询当中丰富的相关信息，包括查询的变量，context等信息&lt;/li>
&lt;li>通过注解 &lt;code>@Argument&lt;/code> 可以为参数绑定传入的相应变量&lt;/li>
&lt;li>GraphQLContext: 用于存储访问上下文中相应数据内容&lt;/li>
&lt;/ul>
&lt;h2 id="authorization">Authorization&lt;/h2>
&lt;p>怎样进行权限认证，文档中只是简单地给了段文字介绍说可以用 Spring Security 来进行权限认证。然而我的需求也没有这么复杂，只需要简单地拦截请求，查看有无携带 token 访问，如果带 token 的访问则将其转换成相应的用户并给后续交给后续的 Controller 来进行处理。&lt;/p>
&lt;p>此处我使用的是 WebInterceptor 来进行请求的拦截处理，主要的思路为：&lt;/p>
&lt;ol>
&lt;li>拦截每个请求，尝试取请求中 header 中的 Authorization 字段&lt;/li>
&lt;li>如果没有这个字段，则跳过&lt;/li>
&lt;li>如果有这个字段，则尝试根据 token 取出相应的 User，如果找不到，则抛出无效 token 的错误&lt;/li>
&lt;li>找到后将该 User 对象加入到 graphQLContext 当中供 Controller 使用。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MyInterceptor&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">WebInterceptor&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">UserService&lt;/span> &lt;span class="n">userService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">MyInterceptor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">UserService&lt;/span> &lt;span class="n">userService&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">userService&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">userService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Mono&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">WebOutput&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">intercept&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">WebInput&lt;/span> &lt;span class="n">webInput&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">WebGraphQlHandler&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">authHeader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">webInput&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getHeaders&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Authorization&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">webInput&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toExecutionInput&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">authHeader&lt;/span>&lt;span class="o">)||&lt;/span>&lt;span class="n">authHeader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()==&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">handle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">webInput&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">userService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getUserByToken&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">authHeader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Mono&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">just&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">WebOutput&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">webInput&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">ExecutionResultImpl&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">GraphqlExceptionBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">genError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">GraphqlExceptionBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ErrorType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">INVALID_TOKEN&lt;/span>&lt;span class="o">))));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">webInput&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configureExecutionInput&lt;/span>&lt;span class="o">(((&lt;/span>&lt;span class="n">executionInput&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;()&lt;/span> &lt;span class="o">{{&lt;/span>
&lt;span class="n">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}};&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">graphQLContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}));&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">handle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">webInput&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在后续的 controller 方法当中，如果需要使用到用户信息或者需要用户权限，则直接从 graphQLContext 当中取出相应的对象，如果取不到则抛出相应的 error&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="n">User&lt;/span> &lt;span class="nf">getUserInContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">GraphQLContext&lt;/span> &lt;span class="n">cxt&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">cxt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getOrEmpty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">orElseThrow&lt;/span>&lt;span class="o">(()-&amp;gt;&lt;/span> &lt;span class="n">GraphqlExceptionBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">genError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">GraphqlExceptionBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ErrorType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">FORBIDDEN&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="error-handler">Error Handler&lt;/h2>
&lt;p>在应用运行过程所有抛出的异常最终都会以 GraphQL 的形式返回给客户端。一开始我还以为是会直接将抛出的 GraphQLError 直接返回给用户，所以直接在代码内部抛出错误，企图通过 Controller 最终返回给用户。不过发现这样做的话，我在 GraphlQLErrorException 当中设置的 extensions 总会没有效果，而是全被归类为 INTERNAL_ERROR。&lt;/p>
&lt;p>后来发现是所有的异常都会跑去一个 ErrorResolver 的东西处理，会重新把 Error 重新封装一次。所以我们必须自己写一个 ExceptionHandler 来将其覆盖&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DataFetcherExceptionHandler&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">DataFetcherExceptionResolverAdapter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">GraphQLError&lt;/span> &lt;span class="nf">resolveToSingleError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Throwable&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DataFetchingEnvironment&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">GraphQLError&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另外，GraphQLError 的生成我是通过自定义了一个 Builder 工具类来辅助生成，通过枚举类型来生成包含 message，error 的 Error&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">GraphqlExceptionBuilder&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">ErrorType&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">DUPLICATED_USER&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">NO_USER&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">WRONG_PASSWORD&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">INVALID_TOKEN&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">FORBIDDEN&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">NO_ITEM&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">updateErrorCode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ErrorType&lt;/span> &lt;span class="n">errorType&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;()&lt;/span> &lt;span class="o">{{&lt;/span>
&lt;span class="n">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">errorType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}};&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">GraphqlErrorException&lt;/span> &lt;span class="nf">genError&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ErrorType&lt;/span> &lt;span class="n">errorType&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">err&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GraphqlErrorException&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newErrorException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">errorType&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">DUPLICATED_USER&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">message&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;existed username&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">NO_USER&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">message&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;not exist username&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">WRONG_PASSWORD&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">message&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;wrong password&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">INVALID_TOKEN&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">message&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;invalid token&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">FORBIDDEN&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">message&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;access forbidden&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">NO_ITEM&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">message&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;no such query items&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">extensions&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">updateErrorCode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">errorType&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/GraphQL/">GraphQL</category><category domain="https://scottyeung.top/tags/Java/">Java</category><category domain="https://scottyeung.top/tags/Spring/">Spring</category></item><item><title>数据定义的生活</title><link>https://scottyeung.top/2021/%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E7%9A%84%E7%94%9F%E6%B4%BB/</link><guid isPermaLink="true">https://scottyeung.top/2021/%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E7%9A%84%E7%94%9F%E6%B4%BB/</guid><pubDate>Fri, 27 Aug 2021 16:41:34 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>刚放假回家的那段时间，总是想着把现在在用的小米手环换成 Amazfit 的智能手表。不是因为现在的手环有什么问题，也不是因为看中的智能手表有着如何吸引人的功能，硬要说的话可能就是新的手表能够多测身体的一些参数，配套新的应用可能生成更好看的图表数据。然而这样就已经是我感到心痒痒了，直到现在都还没有完全打消购买的念头。&lt;/p>
&lt;p>不知道从什么时候起，我很喜欢使用数据来记录生活的一切：用手环来记录每天的睡眠和运动情况，用 Forest 来记录日常的学习时间，甚至写代码的情况最近也开始使用 WakaTime 来进行记录。记录多了，所产生的数据自然也多了，这些数据看起来通常是会觉得不错的，尤其是在过了一段时间后来回顾过去一段数据的数据记录，有时也会让人觉得，好像之前确实是有在做事情，而所做的事情确实是有那么点意义。&lt;/p>
&lt;p>可惜的是，这样的数据除了在日后回顾的时候给自己感慨以外，还能带来什么实际的用途呢？像是睡眠情况的监测，睡眠的长度和质量其实自己也能有所察觉，而软件给出的睡眠不足和深睡较短的结果，我也没有很好的解决方法，即使是知道自己睡得不够或睡得很晚，我又会去解决吗，又可以如何解决。还有手机自带的使用时间监测，不需要点开就知道自己花了大量的时间在手机上面，这些数据的出现除了让自己徒增愧疚以外，也带来不了很好的改正效果。&lt;/p>
&lt;p>数据自己用不上就算了，作为一个日后回忆的记录，其实也未尝不可，不过最近开始隐隐觉得，似乎有点找寻不到日常学习工作的意义，或者更进一步来说，如果进行学习或工作的时候没被记录下来，仿佛就是没有意义的无用功一样。好像在手机上面看了一会书，如果这个过程没有被微信读书记录上阅读时间，或者是摘抄几个片段和写几条记录，就好像没有看过书一样，即使是看了一下午，也感觉是什么都没做的一个下午。运动锻炼也是如此，对于不能使用手环记录的运动，意愿会大大下降。&lt;/p>
&lt;p>因此为了重新平日生活当中的意义，开始有意无意地减少一些时间的记录，例如 Forest 以及手环的使用，尽量减少对于数据给自己带来的反馈感，避免行为模式变成数据驱动的模式，让行为的出发点回归的意愿本身。不过这样的想法能够持续多久，自己也无法预计，而且真的可以做到找寻会行为的意义和自身的意义本身来进行行为的选择吗，其实也不太乐观。&lt;/p>
&lt;p>问题又回到了自己到底想要做什么上面。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E6%95%B0%E6%8D%AE/">数据</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category><category domain="https://scottyeung.top/tags/%E7%94%9F%E6%B4%BB/">生活</category></item><item><title>今日之大学</title><link>https://scottyeung.top/2021/current-college-life/</link><guid isPermaLink="true">https://scottyeung.top/2021/current-college-life/</guid><pubDate>Tue, 27 Jul 2021 16:48:49 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>今天在翻之前在看的一本书，名为《我的二本学生》，内容讲述了广东某二本学院老师对于其执教以来所接触到的学生的记录。虽然仅是类似于教学札记般的文字记述，但是胜在够于真实和细致，还是很能够让人了解到以前的大学生生活状态与今日之大学生的生活状态，及其两者的区别。&lt;/p>
&lt;p>今天在里面看到一个观点，讲到中国大学教育目标已经发生了明显的变化，以前的大学教育目标是为集体（社会和祖国）培养人才，而现在的教育目标，更多是在把学生培养成为了找到工作的就业主体，以温铁军老师的话来说，就是“把人变成资本化的一个要素”。作为一个计算机专业的学生来说，我对于这种转变的现象感到深以为然。&lt;/p>
&lt;blockquote>
&lt;p>我的大学时代，哪怕只是一个中专生、专科生，也被视为“天之骄子”，对农村的孩子而言，考上大学常常被视为“跳龙门”，并被国家从人事关系上认定为“干部”；而对 062111 班的学生而言，进入广东 F 学院这样的二本院校，并不能给他们带来太多精神上的荣耀感，从进入校门开始，还没来得及感受高中老师曾描绘的美妙大学时光，就被辅导员告知就业的压力。他们毕业时，更多人拿到的只是一份“劳务派遣”，可以说，刚刚卸下高考的重负，就绷上了找工作的弦，整个大学过程，不过教育产业化后被学校锻造为专业“流水线”上的一个规整产品，并被冠以“人力资源”的工具化表述。&lt;/p>
&lt;p>二十世纪九十年代初期的大学生，无论国家顶尖的北京大学，还是地方上的岳阳大学，在培养学生上，都首先立足将大学生还原到一个完整的人，注重学生的整体素养和长远发展，学生既不会被就业绑架，也不会盲目地受制于一些所谓的就业技能，而忽略掉更为重要的专业学习。在具体的教学计划和课程安排上，学生也会拥有充分的自主学习空间，不会延续高中时代的填鸭模式。&lt;/p>
&lt;/blockquote>
&lt;p>因为这种目标的改变，导致了进入大学校园的学生的行为与心态都发生了极大的改变，尤其是目标的明确化和具体化，使得上学时的行为路径也变得同一化与固定化。就我所在的计算机行业来看，现在的本科学生目标大概可以分成 3 类：继续升学读研读博；投身于互联网公司的相关工作；考取公务员编制或单位。每个目标都有着较为固定且“标准”的路径。如果选择出国或保研，那么就要好好应付课程来换取好的 GPA，及早地关注政策或者选校等信息，才可以能够有着好的学习选择。如果选择到互联网大厂成为一个搬砖码农，则需要尽早开始刷题，在正确的时间点上面刷够足够数量的算法题，背好面试题，并且在适合的时间参与暑期实习和秋招，才能找到一份好工作。如果是相当公务员或单位，则需要积极参加于各种党团活动，尽可能于各种组织中谋得个三两职位，获取任职经历，到了某个时间点之后，就可以关注各种信息，或是选调，或是省考国考，然后开始刷题准备。&lt;/p>
&lt;p>这些路径随着大家流传下来的经验逐渐固定并统一，形成了模板一样的行为模式，想做什么，就必须要按照路径一步步走，走错一步，或者是缺少一步，可能就没有理想的结果。然而问题却是，我们真的知道自己想要什么吗？或者说我们能够在入学早期的时候就能知道自己想要什么吗？好一点的可以做多手准备，企图往全面发展，但结果可能会是多面手但无一精，且耗费了许多精力。若只能准备单个方面，那这些缺失的准备又如何能够填补回来？就比如说有意通过选调进公务员系统的，一般都需要党员身份，好一点的部门岗位甚至需要有校级部门任职经历或者是校级的奖励，而这种事情是没有办法通过短时间突击换取而来的。这种路径的固定化，让我们在做选择的时候变得更加谨慎，也更加犹豫。&lt;/p>
&lt;p>另外这种路径固定化所带来的更重要的问题，是路径上面每个阶段节点都变得更加重要，每个阶段的结果都很重要，可能因为某一个结果不如预期，就宣判了这个路径和目标的失败。尤其是结合当下社会的普遍舆论，中国人的社会是不能容忍失败的，社会对于个人的失败要求是很苛刻的，一旦失败一次，机会就不会再有，对于某些人来说，可能就是人生受到了极大的打击。例如应届身份，可能因为刚毕业找到了一份不好的工作而丢失这个身份，就不得不去参加社招与有着几年经验的人竞争上岗，又或是就此失去大批单位或编制的报名资格，机会骤减。&lt;/p>
&lt;p>前两天在知乎看到一个&lt;a href="https://zhuanlan.zhihu.com/p/392899093?utm_source=wechat_session&amp;amp;utm_medium=social&amp;amp;utm_oi=71128873697280&amp;amp;utm_campaign=shareopn">回答&lt;/a>，里面提到今年开始规培变成了一年一考，且不设补考。有许多的名校医学博士规培了几年，就因为最终的规培考核某个科目挂了，就可能导致无法毕业没有学位证，错过已经考上的医院工作，执业医师证过期等种种后果（然而原帖的内容已经被删了，只能从评论中一窥究竟）。大多数人的路径就是这样一环扣一环，如果一环没有扣上，那可能整个链条都断掉。对于这些学生来说，没有学位证，入不了学，找不到工作，连转行的资格都没有。&lt;/p>
&lt;p>为什么需要对失败如此苛刻呢？个人感觉可能是因为我们环境中的人太多了，个人的失败对于集体而言实在是太过于无足轻重，你失败了，你掉下去，总会有其他人顶上来。失败的人要怎么办又会有谁来管，于是即可简单地将此归结于个人的主观原因上面，因为你失败了，所以你就没有机会，也不配有机会了。而你为什么会失败，也全都是你的个人原因，无论主观客观。&lt;/p>
&lt;p>回到我自己本身，其实对于所谓的职业路径选择，我也并不是十分确定，互联网公司还是单位编制，写代码的话是前端还是后台，都还不很明确。现在的我也只能够让自己在每一条路径上面都不出错不失败罢了吧。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category><category domain="https://scottyeung.top/tags/%E8%AF%BB%E4%B9%A6/">读书</category><category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category></item><item><title>软工科研随想</title><link>https://scottyeung.top/2021/%E8%BD%AF%E5%B7%A5%E7%A7%91%E7%A0%94%E9%9A%8F%E6%83%B3/</link><guid isPermaLink="true">https://scottyeung.top/2021/%E8%BD%AF%E5%B7%A5%E7%A7%91%E7%A0%94%E9%9A%8F%E6%83%B3/</guid><pubDate>Fri, 09 Jul 2021 11:18:39 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>感觉科研陷入了一种在纯空想的状态，明明软件工程是为了解决软件开发过程中的各种问题，但实际上大部分从事软工领域的科研人员并没有足够的开发相关经验，甚至缺乏相当的写代码的经历，这些人（包括我自己）是如何能够找到所谓的痛点，发现新的问题和场景呢？简单地通过到开源社区里面浏览开发人员的各种互动产生的各种 discussion 与 artifacts，再加以自己浅薄的了解与分析，我们就能够真正认识到在开发过程中尚存在什么需要解决的重要问题吗？&lt;/p>
&lt;p>为什么需要去寻找这些新的问题场景？从个人感受来说，发文章的工作无非是两种方向：&lt;/p>
&lt;ol>
&lt;li>寻找并定义新的问题场景。自己定义的新问题只要没有人做过，并且能够把这个问题的重要性讲好，基本上没什么问题。解决好了，是可以是开山之作，即使没能很好解决，也可以说是先把问题抛出了引发大家注意。&lt;/li>
&lt;li>对已有问题的更优新方法。通过对已经存在并有人研究过的方法进行继续研究，试图创造出性能更好，开销更小的方法。&lt;/li>
&lt;/ol>
&lt;p>通常来说，第二种方向往往需要有着更高的技术积累要求，因而可能更难，需要的时间周期也更长。所以像是硕士等短周期科研工作者（如我）往往会更倾向于第一种方向。于是乎最近在寻找新的工作方向的我就在一直想新的问题，不断地在重复以下流程&lt;/p>
&lt;ol>
&lt;li>在 GitHub 上面浏览一定数量 issues 并选择记录&lt;/li>
&lt;li>根据这些记录归纳总结可能可以做的问题&lt;/li>
&lt;li>把这些问题拿去讨论，然后逐个被告知已经有人做过或者很难做出来&lt;/li>
&lt;li>然后重新回到步骤 1&lt;/li>
&lt;/ol>
&lt;p>想起大四刚接触科研的时候就有过一个疑惑：&lt;/p>
&lt;blockquote>
&lt;p>好奇做 empirical study 的人是如何在没有某一个领域，某一个方面的专业知识，却能够对此做出深入而专业的分析。像 empirical study on bug，一般来说，做的人也并不是就研究这个方向的，就如 bugs in machine learning，研究人员也不是做 machine learning 的，但也还是能做出看上去还挺专业的分析，虽然涉及到的 machine Learning 的概念其实比较少。就像我现在做 llvm toolchain bug，我一没有接触过 llvm，工具链也不知道是啥，由我来做的分析真的可信/有价值吗？当前阅读 bug report 都有点吃力。
如何解决？想到两个点。一个是合作，每个人精通一方面的知识，通过合作获取意见，轮流充当 expert/data collecter/analyzer 的角色。另外一个是快速学习入门，但这个其实比较虚，不过其实做分析需要的水平其实也不是很高？&lt;/p>
&lt;/blockquote>
&lt;p>我们研究软件质量，会选择某些特定类型的软件来进行研究考察，但事实上我们并没有在这一类型或这一领域中有着深厚的专业知识，所以我们该如何对其做出深入而专业的分析，又或者说，为什么这类工作不交给领域相关的开发人员来负责其质量。也许是我们这也有着通用的，可以补上领域知识缺失的屠龙方法吧（当然可能合作更为关键）。&lt;/p>
&lt;p>&lt;del>所以到头来好像也没想出个什么结果，越想反而越加劝退自己了&lt;/del>&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E7%A7%91%E7%A0%94/">科研</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category><category domain="https://scottyeung.top/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/">软件工程</category></item><item><title>996 的二三事</title><link>https://scottyeung.top/2021/why-refuse-to-996/</link><guid isPermaLink="true">https://scottyeung.top/2021/why-refuse-to-996/</guid><pubDate>Fri, 25 Jun 2021 16:06:10 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>从五月中在 B 站上面刷到一些关于政经与哲学的视频之后又重新勾起了自己对于这方面知识内容的兴趣，陆续关注了一些 up 主进行了解~~，人也变得越来越左~~。其中有个比较喜欢的 up &lt;a href="https://space.bilibili.com/23191782">未明子&lt;/a> 谈了点关于 996 的话题，深以为然，觉得还是启发挺大的，于是写点东西把它记录下来。&lt;/p>
&lt;h2 id="什么是-996">什么是 996&lt;/h2>
&lt;p>现在总是在说 996，到底是什么是 996 呢？&lt;/p>
&lt;p>从字面上的意思来看，就是工作时间变成了早上 9 点上班，晚上 9 点下班，每周工作六天。与传统的 965 相比，每周的工作的时间多了 27 小时。以互联网行业来说，这些多出来的工作时间在大多数公司都可以被算作加班时间，可以获得额外的加班费以及相应的福利，因而会有人觉得加班很好，甚至主动加班，主动 996 来开卷。可能是因为太多这样的情况，导致高收入都逐渐与 996 划上等号了，如果想要收入高点，就必须要 996，如果要不加班，就要选择接受较低的收入。&lt;/p>
&lt;h2 id="996-的结果">996 的结果&lt;/h2>
&lt;p>所以说 996 就是通过付出更长的加班时间来换取更高的收入吗？或者说如果给多点钱是不是就可以接受 996 呢？想法很美好，但现实很残酷。&lt;/p>
&lt;p>个人消费的目的可以分成两大类型，一是用于再生产，二则是用于提高生产力的发展。后者很明显，就是可以提高自身生产力的投入，例如去学习知识，去练习技能，去维护人脉等。再生产则是指不断更新和重复的生产，个人理解则是为了让状态复原所需要的消费，包括：&lt;/p>
&lt;ul>
&lt;li>体力再生产：用于维持身体健康与体力恢复&lt;/li>
&lt;li>脑力再生产：娱乐提供情绪价值&lt;/li>
&lt;li>社会关系再生产：维护与他人的社会关系&lt;/li>
&lt;/ul>
&lt;p>社会关系再生产中有一种很重要的隐形支出，就是用于维护自己岗位，保护自己饭碗的再生产。这可以理解成需要付出一定的成本来保住工作的机会，换言之，工作的本质可以理解为个体户付出租金来换取工作的饭碗，这个付出的租金就是剩余价值。这个租金是隐形的，也是确实存在的。因为是隐形的，所以就需要与老板进行协商，但往往会被大家所忽略。&lt;/p>
&lt;p>996 的工作模式通过更多的工作时间提高了所创造的价值，但同时员工所需要付出的消费成本向随之增高，包括所付出的租金也相应按比例（甚至是更高的比例）提高了。更长时间的工作使得消费中各种再生产的成本大幅上涨：&lt;/p>
&lt;ul>
&lt;li>体力再生产：长时间工作容易使身体变差；缺乏时间去锻炼身体/保持健康&lt;/li>
&lt;li>脑力再生产：缺乏娱乐；缺乏脑力上的休息&lt;/li>
&lt;li>社会关系再生产：缺乏与他人交往的时间与机会&lt;/li>
&lt;/ul>
&lt;p>这些消费中的各项其实都可以通过时间来换取或者缓解成本，但是因为 996 的存在导致缺乏时间，使得各项的成本大幅上涨。而这些额外的消费成本其实是基本抵消甚至超过超时工作所获得的额外价值/收入，因而自己其实没什么收益，而公司与老板则通过躺收你多付出的租金，没有付出其余任何的代价，因而是净赚的。这也解释了为什么只要我们再努力一点，老板就能买大 house 了。&lt;/p>
&lt;h2 id="996-的本质">996 的本质&lt;/h2>
&lt;p>除了更长时间的工作以外，996 为什么还会使我们的消费成本大幅上涨呢？昨晚看完一个视频的讨论后，感觉很有启发。&lt;/p>
&lt;p>为什么 996 的工作时间是九点到九点呢？同样是干 12 个小时的工作模式，666 的效率不得要比 996 还要高吗？996 的工作模式当中，包含了中午饭以及晚饭，每顿饭一般都需要一个小时来解决，再加上吃饭前后工作的低效，其实就效率来讲，996 所带来的好处其实对于公司来说也不算多，尤其是许多人其实都会选择晚上吃完饭后回公司在办公时间摸鱼。如果说追求效率的话，大可以把工作时间提到 666，上下午各有两大段的工作时间，工作得更有效率，也更为纯粹。&lt;/p>
&lt;p>之所以是选择 99 这个工作时间区间，最大的主要原因还是想要包含了你的晚饭时间，进而控制你整个人。因为晚饭的时间被包含到了工作里面，所以就不能选择出去吃饭，就不能够与他人进行交际应酬，从而丧失了饭局时间，公关时间，商务时间。然而这些时间却往往是发展与交易诞生的地方，尤其是在中国式应酬的背景下，许多的生意都是在饭桌上面谈成。所以现在限制了这段时间，其实就是限制了个人发展机会，加大了自我发展的难度。同理，每周 6 天工作日也是如此，把你的休息日减少为一日，而你不得不把这一天的休息日完全拿来休息，而无法抽出时间与精力去参加应酬交际活动，也不会想把这天的休息时间拿去学习和自我提升。选择了 996，其实变相就等于放弃了这些机会，自绝了跳出去另寻机会的可能。&lt;/p>
&lt;p>所以说 996 的本质还不只是剥削，更多的是在 domination. 通过 996 的方式来控制来控制底下的员工，让其缺乏跳出被控制的能力。接受了 996 更像是接受了公司对自身的自我阉割，接受持续给老板打工的这个事实，甚至自觉加入到维护这份工作的任务中。&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1A84y1F7HE">【政治经济学】为什么再怎么省钱还是穷：花钱的本质，上班的本质，薪水的本质，996的本质，老板的本质&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1U5411T7tV">【社会观察】996的实质：不！是！剥！削！&lt;/a>&lt;/li>
&lt;/ol></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E5%93%B2%E5%AD%A6/">哲学</category><category domain="https://scottyeung.top/tags/%E8%AE%A8%E8%AE%BA/">讨论</category><category domain="https://scottyeung.top/tags/%E8%AE%B0%E5%BD%95/">记录</category></item><item><title>博客切换至 Hugo</title><link>https://scottyeung.top/2021/transform-to-hugo/</link><guid isPermaLink="true">https://scottyeung.top/2021/transform-to-hugo/</guid><pubDate>Thu, 03 Jun 2021 12:07:47 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>不到半年时间，又重新折腾过博客了。大概花了两天多的时间，把博客从原来的 Hexo + Stun 切换到 Hugo + MemE 上面。想要转换的原因有很多，例如&lt;/p>
&lt;ul>
&lt;li>使用 Hexo 生成页面的速度已经进入了有点慢的程度。我也不过 70 个页面，每次构建部署加上提交可能需要花上一两分钟，然后随着时间久了所写的内容越多，还会越来越久。&lt;/li>
&lt;li>原主题看着有点不太合适。现在的自己更加希望博客的风格往简洁靠近，让网站的聚焦点能回归到文字本身。这也促使自己这次在选主题的时候把文章主体不居中的都 ban 掉了。&lt;/li>
&lt;li>原博客感觉有着太多无用啰嗦的页面和功能，包括所谓的背景音乐播放。为了有着更好播放背景音乐体验，又不得不搞 PJAX。但实际上我自己点开背景音乐并播放的次数寥寥可数。&lt;/li>
&lt;/ul>
&lt;p>当然想要更换的最主要原因还是&lt;em>喜欢折腾&lt;/em>，这两天在折腾博客的时候，久违地感受到了那种心思全部集中在一个事情上面的状态。在迁移博客的时候，选主题，配环境，写迁移脚本，改写主题以获取想要的效果和功能，虽然也遇到一些坑，但还是能够拥有着持续的动力去继续和完善。看来自己是真的发自内心的喜欢折腾想折腾的东西。&lt;/p>
&lt;h2 id="迁移准备">迁移准备&lt;/h2>
&lt;p>因为 Hugo 和 Hexo 存在一些差异，同时我所选择的主题与原主题不一致，导致博客迁移到 Hugo 的时候需要做一些变更，才比较好实现无缝转换。 &lt;br>
主要需要考虑以下问题：&lt;/p>
&lt;ul>
&lt;li>路径组织差异&lt;/li>
&lt;li>分类标签差异&lt;/li>
&lt;li>评论功能实现&lt;/li>
&lt;/ul>
&lt;h3 id="路径">路径&lt;/h3>
&lt;p>在 Hexo 中文章的路径默认通过根目录配置文件的 permalink 来配置文章链接的构成，其可以使用常用的基础变量（年份，月份，标题），也可以使用在 front matter 中自行定义的变量。&lt;/p>
&lt;p>Hugo 则默认是根据在 content 目录下文件的组织情况来构建页面的链接的，也可以在配置文件下面通过配置 permalink 属性来实现，但可选择的变量比较少，通常为年月日标题与文件名，不支持使用自定义的 front matter 变量。&lt;/p>
&lt;p>我之前的博客链接使用的样式都是 &lt;code>/:year/:urlname&lt;/code>，通过在 front matter 中自定义文章的路径名。刚开始一直找不到 permalink 的正确配置方式，最终在文件的 front matter 中使用 url 属性来强行确定文章的链接。于是写了一个脚本，把所有 Markdown 文件当中的 urlname 属性改成 url，并在值前面加上年份，硬编码成 &lt;code>/:year/:urlname&lt;/code> 的形式。后来发现可以通过 slug 变量向 permalink 传递值，所以在配置中设置 &lt;code>posts = &amp;quot;/:year/:slug/&amp;quot;&lt;/code> 然后再写脚本把 url 属性转换为 slug 并去掉前面的年份编码。&lt;/p>
&lt;h3 id="分类标签">分类标签&lt;/h3>
&lt;p>刚复制几篇文章到 Hugo 时发现总是运行失败，提示 range cannot iterate 某个分类或标签，把它们删了就能够正确运行。后来发现是所使用的主题 MemE 总是预设这些属性是数组形式，因而如果分类或标签写成 &lt;code>tags: val&lt;/code> 的单行形式便会出错，需要写成多行形式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">tags&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="l">val&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为什么分类（category）明明只有一个，但需要使用数组呢？这里 Hugo 就与 Hexo 有点差异，Hugo 的分类其实与标签有点类似，Hugo 中更像 Hexo 的分类反而是 sections，这种是通过目录的文件结构来组织的。&lt;/p>
&lt;p>考虑到这个差异，我干脆把所有的分类都通过脚本一并删了。通过 tags 的方式来组织文章的分类。&lt;/p>
&lt;h3 id="评论功能实现">评论功能实现&lt;/h3>
&lt;p>之前使用的是 Waline 评论系统实现，选择的主题只提供 Valine 的设置，而且实现还是不完整，用不了的。于是我就仿照它的思路写了个 Waline 的实现，并且把未实现的部分实现了，并且补上了文章阅读量的显示。&lt;/p>
&lt;h2 id="博客到底需要什么">博客到底需要什么？&lt;/h2>
&lt;p>在博客迁移需要对博客的功能内容进行重新取舍时，不禁又在重新思考了一下这个问题：我在写一个博客的时候，到底需要些什么，需要向他人展示些什么？&lt;/p>
&lt;p>在最开始的时候，写博客不过就是在做技术类的笔记，大多时候都在摘抄与记录，少有自己的想法。而这种技术类的文章创作起来也不容易，就导致了更新也不频繁，内容不够充实。于是乎，就很容易花费心思到博客本身上面，而非文章内容本身，总是想着给博客加点什么功能，怎样让博客好看点，通过这样的方式来吸引人前来博客。于是越来越花哨，打开也越来越慢。这样的博客确实可能会给人打开时眼前一亮的感觉，但也仅会在第一次而已。&lt;/p>
&lt;p>在之前给女友写信寻找博客主题时，选择了一个很棒的极简主义风格主题。这个主题让我意识到，我应该要回归到博客的内容本身，让人们的视线重新聚焦到文字上面。所以这次挑选 Hugo 主题时就秉着这个条件，一是要简单，二是则以文字为主。当前这个主题感觉还是能够很好地符合我的要求。&lt;/p>
&lt;p>但写到这里就会觉得，其实在博客内容创造上面，我好像也陷入了一个瓶颈的位置。写技术类文章，简单的类文档形式的比较耗时且繁琐，不如去看官方文档；复杂点的技术性强点的文章，又会使阅读的门槛提高；记录自己爬坑经历与反思，但没有相似的具体场景的话有时也比较无味。写生活类文章，困于校园忙于学业的我似乎也找不到更多的时间去真正生活，即使遇到有意思的事情，首先会想到的也是记录在私密的周记记录当中。而关于练拳，养生，阅读等等各个方面的内容，感觉自己都有点半桶水的感觉。&lt;/p>
&lt;p>不过问题来了：文章写得不够好就不能写吗？显然不是的，越不够好就越要写，只有通过多写多练的方式才能促进水平提示，包括写作水平以及所写内容涉及到的领域水平。&lt;/p>
&lt;p>正如自己更新的个人介绍中写到&lt;/p>
&lt;blockquote>
&lt;p>🛠️ 什么都会点但又不够精通的杂才&lt;/p>
&lt;/blockquote>
&lt;p>希望自己早日能够从杂才成为通才吧！&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E5%8D%9A%E5%AE%A2/">博客</category><category domain="https://scottyeung.top/tags/Hugo/">Hugo</category><category domain="https://scottyeung.top/tags/%E7%BB%8F%E5%8E%86%E5%9B%9E%E9%A1%BE/">经历回顾</category></item><item><title>CSS 选择器</title><link>https://scottyeung.top/2021/css-selector/</link><guid isPermaLink="true">https://scottyeung.top/2021/css-selector/</guid><pubDate>Sat, 22 May 2021 18:39:56 +0000</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>翻 MDN 文档重新系统地学习下 CSS 选择器知识，记录下来当作笔记。&lt;/p>
&lt;p>所谓 CSS selector 用于在 HTML 文档中选取指定的元素节点，可用于 CSS 文件中设置 style 或者在某些库中选取元素节点（如爬虫）。&lt;/p>
&lt;h2 id="css-rules-中使用">CSS Rules 中使用&lt;/h2>
&lt;p>在 CSS 文件中 selector 通常为 Rules 的开头，每个 Rules 可以指定单个 selector 或者指定 selectors list，后者以逗号分割 (,)&lt;/p>
&lt;h2 id="css-选择器类型">CSS 选择器类型&lt;/h2>
&lt;ul>
&lt;li>Type selectors: 类型选择器，根据 &lt;code>tagname&lt;/code> 来选择对应的元素&lt;/li>
&lt;li>Universal selectors: 通用选择器，使用 &lt;code>*&lt;/code> 来匹配所有元素
&lt;ul>
&lt;li>可以增强伪类选择器的可读性： &lt;code>div *:first-child&lt;/code> instead of &lt;code>div :first-child&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Class selectors: 类选择器，使用 &lt;code>.classname&lt;/code> 来选择相应的元素
&lt;ul>
&lt;li>可以结合其它选择器如 &lt;code>span.highlight&lt;/code>&lt;/li>
&lt;li>可以同时选取包含多个 class 的元素 &lt;code>.class1.class2&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ID selectors: ID 选择器，使用 &lt;code>#id&lt;/code> 来选取相应元素&lt;/li>
&lt;li>Attribute selectors: 属性选择器，根据元素的属性来选择元素
&lt;ul>
&lt;li>&lt;code>[attr]&lt;/code>: 元素包括 attr 属性&lt;/li>
&lt;li>&lt;code>[attr='val']&lt;/code> : 元素的 attr 属性值为 val&lt;/li>
&lt;li>&lt;code>[attr~='val']&lt;/code> : 元素的 attr 属性为 val 或该属性的列表中包含 val（如 &lt;code>attr='val val1'&lt;/code>&lt;/li>
&lt;li>&lt;code>[attr|='val']&lt;/code> : 元素的 attr 属性为 val 或该属性以 val- 开头（如 &lt;code>attr='val-val1'&lt;/code>&lt;/li>
&lt;li>&lt;code>[attr^='val']&lt;/code> : 属性以 val 开头&lt;/li>
&lt;li>&lt;code>[attr$='val']&lt;/code> : 属性以 val 结尾&lt;/li>
&lt;li>&lt;code>[attr*='val']&lt;/code> : 属性包含 val&lt;/li>
&lt;li>取否定需要伪类选择器 &lt;code>:not([attr])&lt;/code>&lt;/li>
&lt;li>末尾添加 &lt;code>i&lt;/code> 可以是匹配大小写不敏感&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>pseudo-class: 伪类选择器，用 &lt;code>:pseudo-class-name&lt;/code> 可选择在特定状态的元素
&lt;ul>
&lt;li>选择指定顺序: &lt;code>first-child&lt;/code>, &lt;code>last-child&lt;/code>, &lt;code>first-of-type&lt;/code>, &lt;code>nth-child(n or an+b)&lt;/code>&lt;/li>
&lt;li>选择特定状态: &lt;code>checked&lt;/code>, &lt;code>disabled&lt;/code>, &lt;code>visited&lt;/code>&lt;/li>
&lt;li>for action: &lt;code>hover&lt;/code>, &lt;code>focus&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>pseudo-element: 伪元素选择器，使用 &lt;code>::pseudo-element&lt;/code> 选取
&lt;ul>
&lt;li>与伪类的区别伪元素会为选中的元素添加 HTML 片段，而伪类只会在原元素中修改&lt;/li>
&lt;li>选取特定位置: &lt;code>first-line&lt;/code>&lt;/li>
&lt;li>生成特定内容: &lt;code>before&lt;/code>, &lt;code>after&lt;/code> 然后通过 content 属性设置&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="css-combinators">CSS Combinators&lt;/h2>
&lt;ul>
&lt;li>Descendant: &lt;code> &lt;/code> 后者元素的某个祖先是前者元素&lt;/li>
&lt;li>Child: &lt;code>&amp;gt;&lt;/code> 后者是前者的直接子节点&lt;/li>
&lt;li>Adjacent sibling: &lt;code>+&lt;/code> 后者紧接着前者，且是同一个父元素节点&lt;/li>
&lt;li>General sibling: &lt;code>~&lt;/code> 后者出现在前者的后面，且是同一个父元素节点&lt;/li>
&lt;/ul>
&lt;h2 id="css-selector-的优先级">CSS Selector 的优先级&lt;/h2>
&lt;p>如果有多个 CSS Rule 同样选择到了某个元素节点且声明的 CSS 样式出现冲突时，会根据首先根据优先级进行处理，当优先级相同时，选择后声明的规则。&lt;/p>
&lt;p>优先级可以用一个四位数表示，每出现一个选择器在相应位上加一&lt;/p>
&lt;ol start="0">
&lt;li>inline style: 行内的 css style 的优先级时最高的，直接在千位加一&lt;/li>
&lt;li>百位: ID Selector&lt;/li>
&lt;li>十位: Class selector, attribute selector, preudo-class selector&lt;/li>
&lt;li>各位: type selector, preudo-element selector&lt;/li>
&lt;/ol></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/CSS/">CSS</category><category domain="https://scottyeung.top/tags/%E5%89%8D%E7%AB%AF/">前端</category><category domain="https://scottyeung.top/tags/Coding-%E5%AD%A6%E4%B9%A0/">Coding 学习</category></item><item><title>种树，直到把自己围住</title><link>https://scottyeung.top/2021/forest-for-what/</link><guid isPermaLink="true">https://scottyeung.top/2021/forest-for-what/</guid><pubDate>Tue, 18 May 2021 22:36:14 +0000</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;blockquote>
&lt;p>对于五月假期回来后状态的复盘，其实是写于 5.15 的周记记录&lt;/p>
&lt;/blockquote>
&lt;p>是否还应该要使用 &lt;a href="https://www.forestapp.cc/">Forest&lt;/a> 种树呢？在去年的四五月份的时候就曾经有过这样的&lt;a href="https://scottyeung.top/2020/%E7%AA%81%E7%84%B6%E4%B8%8D%E6%83%B3%E5%86%8D%E8%AE%B0%E5%BD%95%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%BF%E7%94%A8/">想法&lt;/a>，怀疑自己使用 Forest 等时间记录工具的意义在哪，甚至会觉得使用这些工具使自己对于时间的利用变得很焦虑，进而对自己的时间安排产生焦虑。&lt;/p>
&lt;p>说起来也比较讽刺，原意使用 Forest 是为了记录我日常使用时间的情况，但是演变到今天，已经变成了推动自己工作学习的工具，用来衡量自己有无努力学习，认真工作的工具。我对于 Forest 的使用心态，已经从以往看看今天学了多久时间，变成看看今天能不能学到 300 分钟。一般来说，这个任务是可以达到的，但如果有些特殊的情况，例如昨天提到的状态不好，不想干活，导致开始工作的时间晚了，我就会觉得今天的任务预期好像完成不了，就会觉得愧疚与焦虑。当出现这种心态之后，就会出现想要让自己的数据更加好看的想法，继而会出现一些不妥的功利的想法，例如将一些非工作的活动也计时，又或者是中途需要打断活动的时候还是继续计时，通过这样的方式来让种树的时间更多更好看。&lt;/p>
&lt;p>但这样的行为并没有意义，这样获取到的数据也没有意义，相反，还会给自己增添许多的压力。翻了翻以前的种树的记录，在 19 年刚刚开始使用的时候，那时使用 Forest 就真的纯粹就是记录自己的时间使用情况而已，以及让自己增添的一个开始工作的仪式感。那个时候的我虽然有时种树也能种比较多的时长（挺多 300-400+ 分钟），但是其中也不乏一些 200+ 分钟的日子夹杂在其中。状态的起伏，可利用时间的变化都是很常见的状况，尤其是在读书阶段还需要去上课，需要处理一些额外的状况，又或者是出去玩之类的活动，为什么需要强求自己每天都能够学习到某一个固定的时间呢？&lt;/p>
&lt;p>这种转变大概发生在保研之后的大四上学期，那个阶段的我一下子没有了比较紧迫且具体的任务推动，很多时候不想干活，也不知道要干些什么，干到什么程度。为此，我就想出了一个比较好能够推动自己的方法，既然没有具体的目标，不知道需要完成到什么程度，那我就按照学习时间来衡量，每天学多少时间来判断自己当天有无认真学习。想法是很好的，但这个标准任何制定，制定得是否灵活，就需要衡量太多东西了。&lt;/p>
&lt;p>这样的想法放到了如今重新回到学习生活的我来说，又显得不够灵活。一方面我被其制约，无法更加灵活而合理地利用时间，另一方面，我对于时间的利用也变得更为洁癖与讲究。具体表现为&lt;/p>
&lt;ul>
&lt;li>有些重要但是与学习不太相关的事情，我可能会因为其不能种树（计时）而将其优先级放得比较低，从而导致自己不会去做这些事情。例如运动，尤其是在学习途中的休息活动，因为这些活动不能很直观地将它们的好处与效果表现出来，不像学习能够通过种树显示出学习时间，知道自己今天努力了多久，做了多少。所以不愿意去，也不敢去做，担心占用我的时间。&lt;/li>
&lt;li>对于时间的利用不够灵活，仿佛洁癖一般，总是会抱着一种完美主义的效率至上心态。会认为与其在上课的半个小时里面低效的学，不如在这期间摸鱼休息，然后等到之后可以高效率学习。这样的心态会导致自己在某些时候心安理得地摸鱼不学习，把时间白白浪费掉。其次就是对于时间的要求越来越多，然后就开始成为拖延某些任务的借口。明明可以做半个小时，一个小时，但是觉得这么短的时间干不出什么结果就干脆放弃，不做，选择做一些短平快的事。&lt;/li>
&lt;/ul>
&lt;p>当然其实工具的本身还是其次，本质上还是自己的心态出现了问题，现在的自己不是很能够接纳没有学习的自己，不能接受好像一天都没怎么学习的自己。原本只是为了对于时间记录这个用于以后留念的数据，现在逐渐演变成证明自己有在努力的工具，很是不妥，而自己也仿佛被困在 Forest 这个工具当中。&lt;/p>
&lt;p>当然你要我一下子就完全不用，我也还是做不到，甚至在写这篇文章的时候，我也开着了 Forest 来计时。不过还是需要改变，正如昨天文章所写，改变只需要一点点的改进，就从看少点 Forest 的种树记录，看轻点里面的数字开始。或许首先可以做到的就是，减少学习时间吧 😆&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/">时间管理</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category></item><item><title>“什么都不做”</title><link>https://scottyeung.top/2021/do-nothing/</link><guid isPermaLink="true">https://scottyeung.top/2021/do-nothing/</guid><pubDate>Tue, 18 May 2021 21:21:49 +0000</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;blockquote>
&lt;p>对于五月假期回来后状态的复盘，其实是写于 5.14 的周记记录&lt;/p>
&lt;/blockquote>
&lt;p>经历了不太想工作的一周工作日，可能是还处在五一的假期后遗症当中，缺乏干活的动力，每天都不想起床，不想干活，但偏偏事情又感觉很多，因而会陷入一种焦虑当中，不想干，但又要干，让人很是闹心。因为不想干活导致了无意义的拖延行为，因为拖延导致不得不利用一些另外的时间来尽量补回被拖延的时间，因为额外的时间被占用了导致某些想做的事情难以完成甚至无法完成，因为做不了自己想做的事情觉得不甘心又导致因为不愿就这样结束自己的一天而自然地熬夜，因为睡得不够又导致了第二天很困起不来，更加缺乏做事的动力与决心。&lt;/p>
&lt;p>感觉像是陷入了一个无解的死循环中，但自己还在寄希望于只是今天先这样，明天就能好起来的幻想当中，还觉得自己只是陷入了一种每个人都会进入的，缺乏动力不想干活的状态。只要等它过去，只要等自己进入一种充满活力的状态，问题就能够自己消解。尽管如此，我也没有去尝试或寻找让自己进入充满精力的状态，只有空想，而没有实践。&lt;/p>
&lt;p>我能够做什么，或是需要做什么呢？应该要意识到，改变并不总是需要翻天覆地，彻彻底底的。我想要变得更具活力，更有动力，做不到也不需要今天还无心工作草草种树 200 分钟，明天就一下子能学到五六小时甚至更多。每天比昨天赖床时间短一点，起床时间早一点，开始学习的时间早一点，走神摸鱼的时间少一点，拖拉的时间短一点，学习的时间多一点，也是一种很棒的改进了。&lt;/p>
&lt;p>但为什么做不到呢？我觉得是现在的自己缺乏一种勇气，一种能够坦然接受现状并寻求应对解决方法的勇气。遇到问题，处于不满意的状态，不能够坦然地接受自己就处于这种状态，以及承受接下来可能出现的后果。出现这种情况，第一时间想到的是逃避，想着明天再来，全然不想处理当天比较糟糕的开局，哪怕只是稍微起晚了一点，哪怕只是上午的学习时间没了。内心居然隐隐会觉得，在状态不好时间不足的一天学习，还不如一天都不学，或者是干一些所谓轻松点的，与任务无关的事情。&lt;/p>
&lt;p>迎着糟糕的情况前进比放弃或拖延所需要承担的压力还要多，因而会使人退缩。所以现在的我会选择早上醒来晚后就多赖一会床，起床晚了后就干脆不去实验室学习，去不了实验室就干脆上午不学习，上午不学习就中午早点睡下午再努力。当事情的一点点发展得不如心意就干脆将后续的发展也跟着打乱，舍弃掉本可利用的时间资源，想的是从下个阶段再开始。但很现实的是，既然第一个阶段的开端会出现意外，那么之后的又如何担保其一定按照预期发展呢？&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/posts/2.png" alt="懂得都懂不懂都不懂的示意草图">&lt;/p>
&lt;p>勇气怎么培养，我自己也不知道。不过现在的我已经不是之前那个只会接受一切的我，我相信一切都能够改变，都可以尽力去做到。改变自身性格就是一个，哪怕可能只是一点点。当以后出现这种情况的时候，直面它，接受它，应对它，战胜它。希望以后出现今天状态不好不想学习的时候，我的想法不再是等到明天状态好点再开始，而是状态不好的话我应该做些什么，应该怎么做，能做多少算多少的心态。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/">时间管理</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category></item></channel></rss>