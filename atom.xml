<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>YeungYeah 的乱写地</title><link>https://scottyeung.top/</link><description>YeungYeah 的乱写地中记录了作者的所思所想及所为。</description><generator>Hugo 0.83.1 https://gohugo.io/</generator><language>zh-CN</language><managingEditor>yeungyeah@qq.com (YeungYeah)</managingEditor><webMaster>yeungyeah@qq.com (YeungYeah)</webMaster><lastBuildDate>Sat, 11 Nov 2023 02:58:21 +0000</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://scottyeung.top/atom.xml"/><item><title>双十一与我</title><link>https://scottyeung.top/2023/11-11-shopping-festival/</link><guid isPermaLink="true">https://scottyeung.top/2023/11-11-shopping-festival/</guid><pubDate>Sat, 11 Nov 2023 10:53:30 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>不知不觉双十一购物节这个概念已经诞生了这么久，然而现在都双十一似乎也越来越没有购物节的氛围，优惠没感觉到多少，基本提不起购买欲。&lt;/p>
&lt;p>对我来说，现在已经换了种方式参与双十一，从过去提前一个月参与各种活动拿红包然后准点下单，到现在工作为双十一大促赶需求和做保障，真的颇有感概。&lt;/p>
&lt;p>以前的双十一，确实能有优惠，虽然优惠不大，也是实打实的。也正是这些优惠的存在，给予了当时还是学生的我一个购物花钱的理由和机会。有什么想买的都可以接着双十一这个机会来购买。&lt;/p>
&lt;p>大一那年买了个 kindle，大二买了双鞋和电动牙刷，大三买了个骨传导耳机，大四那年换了台笔记本。真的到了双十一，就突然有了个理由，可以去买一些自己以前想买的东西，尤其是学生阶段的自己其实还没自己的收入，没有属于自己可以随意支配的钱。消费就更需要一个理由。双十一就是一个很好的给自己和给家人购物的理由。&lt;/p>
&lt;p>最早期的双十一，直接就给你降价优惠，给你发消费红包，消费者是真的能够实打实地体现到优惠。双十一当天随便点开淘宝都能发现相关优惠并被吸引到。&lt;/p>
&lt;p>然后搞跨店满减，买多了才能优惠。但是不同商品满足的满减条件又不一样，变得需要各种拼凑计算，宛然成为数学题。算来算去要买什么东西，加起来买多少钱，要不要和别人凑单。&lt;/p>
&lt;p>然后开始搞预售，把双十一周期拉长，订金抵双倍这种。也算是有那么一点优惠，就是要等一等。&lt;/p>
&lt;p>接着还搞组队 pk，逼迫人每天去转发链接，pk 赢了才能拿那点点红包，pk 输了还会红包清零。第一年还能和几个好友每天拉人 pk，然后最后也就拿到了几十块红包。第二年看到还出了类似的活动，简直觉得去年的自己是个傻逼。&lt;/p>
&lt;p>最后，今年的双十一还是基本什么都没买，一方面可能是因为确实没什么优惠，另一方面也是自己确确实实没有什么很需要的购物需求。但最主要的还是自己已经开始工作，有属于自己可以支配的钱，不需要再为购物找原因和理由。&lt;/p>
&lt;p>但是作为利益相关方，还是希望双十一能够大卖，大家也真的有钱能够消费吧。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/">生活记录</category></item><item><title>动态时间线聚合 - Cloudflare 重制版</title><link>https://scottyeung.top/2023/rss-timeline-cloudflare/</link><guid isPermaLink="true">https://scottyeung.top/2023/rss-timeline-cloudflare/</guid><pubDate>Sat, 04 Nov 2023 11:46:58 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>上个周末把在服务器运行的 rss 聚合程序迁移到了 Cloudflare 处运行。&lt;strong>真的 Cloudflare 太香了！！&lt;/strong>&lt;/p>
&lt;h2 id="why">why&lt;/h2>
&lt;ol>
&lt;li>之前部署到服务器这个流程太麻烦
&lt;ol>
&lt;li>本地修改代码 -&amp;gt; 打包发布 -&amp;gt; scp 上传服务器 -&amp;gt; 服务器关掉正在运行的程序 -&amp;gt; 重新运行程序&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>查看和管理数据麻烦：
&lt;ol>
&lt;li>因为使用本地 sqlite 数据库文件来保存抓取的文件，所以导致查看服务器上的数据就比较麻烦，得 ssh 连上去然后跑一个 sqlite client 的 shell 程序执行 sql 语句来查询，显示也不好看&lt;/li>
&lt;li>基于文件存储，本地一份，服务器一份，数据常常不同步，还得专门搞一个功能来只抓数据&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>网络环境不是很好。
&lt;ol>
&lt;li>需要访问 vercel 部署的网页和访问 telegram api，都对网络环境有点要求，本地开发调试还得走个代理，又需要个额外配置&lt;/li>
&lt;li>即使是部署在境外服务器上，网络访问也常常出现链接的问题，log 里面一大堆网络 error&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="方案">方案&lt;/h2>
&lt;p>使用 Cloudflare 提供的&lt;/p>
&lt;ul>
&lt;li>cron 定时任务调用 worker
&lt;ul>
&lt;li>worker 根据定时任务的 cron 种类来区分重发任务和抓取任务&lt;/li>
&lt;li>抓取任务：访问各个 RSS 源解析数据象，并把新的数据发送到 Telegram 频道并保存到数据库当中&lt;/li>
&lt;li>重发任务：捞取数据库当中没有发送成功的数据，重新发送到 Telegram 频道当中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用 D1 数据库存储数据&lt;/li>
&lt;/ul>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>Cloudflare 提供的 worker 需要用 JS / TS 实现。因为之前其实就已经写过 typescript 版本，所以其实直接迁移调试就可以了。&lt;/p>
&lt;p>大概的创建的流程可以看 &lt;a href="https://scottyeung.top/2023/cloudflare-app-dev/">Cloudflare 应用&lt;/a>，主要是有几个点需要注意&lt;/p>
&lt;ul>
&lt;li>Cloudflare worker 启动都是通过其入口函数来启动的。传递的环境变量和数据库实例都是通过入口函数的 env 变量来传递的。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">async&lt;/span> &lt;span class="nx">scheduled&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>: &lt;span class="kt">ScheduledEvent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">env&lt;/span>: &lt;span class="kt">Env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ctx&lt;/span>: &lt;span class="kt">ExecutionContext&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// A Cron Trigger can make requests to other endpoints on the Internet,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// publish to a Queue, query a D1 Database, and much more.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// We&amp;#39;ll keep it simple and make an API call to a Cloudflare API:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">resp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://api.cloudflare.com/client/v4/ips&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">wasSuccessful&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">resp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;success&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;fail&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// You could store this result in KV, write to a D1 Database, or publish to a Queue.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// In this template, we&amp;#39;ll just log the result:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`trigger fired at &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cron&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">wasSuccessful&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>因为 Cloudflare 的 JS 运行时并不是标准的 node，所以一些依赖 node api 的 npm 库可能会跑不了。之前的一些依赖库可能就需要替换，或者手工对 npm 库源代码进行修改。&lt;/li>
&lt;/ul>
&lt;h2 id="体验">体验&lt;/h2>
&lt;ul>
&lt;li>本地开发可以使用 remote 运行调试，直接用上 Cloudflare 的网络环境和数据库来进行测试。&lt;/li>
&lt;li>使用 Cloudflare worker 后可以用官方提供的 wrangle 一键部署，流程大大简化。&lt;/li>
&lt;li>使用 Cloudflare 的 dashboard 可以随时查看运行情况（但是拉历史日志好像比较麻烦？）。&lt;/li>
&lt;li>可以用在 dashboard 上面修改一些简单的配置，比如定时间隔和环境变量。&lt;/li>
&lt;li>可以用 D1 数据库的 console 查询数据库情况，并且做些简单的增删改查。&lt;/li>
&lt;/ul></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/serverless/">serverless</category><category domain="https://scottyeung.top/tags/JavaScript/">JavaScript</category><category domain="https://scottyeung.top/tags/Cloudflare/">Cloudflare</category><category domain="https://scottyeung.top/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/">云服务</category><category domain="https://scottyeung.top/tags/coding-%E8%AE%B0%E5%BD%95/">coding 记录</category><category domain="https://scottyeung.top/tags/rss/">rss</category><category domain="https://scottyeung.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/">自动化</category></item><item><title>Cloudflare 应用开发使用小记</title><link>https://scottyeung.top/2023/cloudflare-app-dev/</link><guid isPermaLink="true">https://scottyeung.top/2023/cloudflare-app-dev/</guid><pubDate>Sun, 29 Oct 2023 16:45:21 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;blockquote>
&lt;p>能给大众白嫖使用的 serverless 服务，像 Cloudflare 和 Vercel 就是好的服务商。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202310291700756.png" alt="">&lt;/p>
&lt;p>最近因为各种原因，突然想把在服务器上运行的 rss-timeline 记录（详情可以看这里 -- &lt;a href="https://scottyeung.top/2023/my-timeline/">我的动态时间线聚合&lt;/a>）的程序换成在云服务上面部署，最终选择了 Cloudflare，并且实现了一版。下面是实现过程中一些记录。&lt;/p>
&lt;h2 id="worker">worker&lt;/h2>
&lt;p>cloudflare 通过 worker 的方式提供服务，worker 有两种触发的方式&lt;/p>
&lt;ul>
&lt;li>http trigger. 通过发送 http 请求进行触发，也是最常用的一种，实现 fetch 方法处理请求即可
&lt;ul>
&lt;li>在 ChatGPT API 刚出的时候，很多人都因为 API 地址不能直连，所以搞一个 worker 请求转发就可以了。比如&lt;a href="https://github.com/noobnooc/noobnooc/discussions/9">这个&lt;/a>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>cron trigger. 通过定时任务的方式来触发任务。通过配置 cron job 来声明执行的周期。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// The scheduled handler is invoked at the interval set in our wrangler.toml&amp;#39;s
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// [[triggers]] configuration.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="nx">scheduled&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>: &lt;span class="kt">ScheduledEvent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">env&lt;/span>: &lt;span class="kt">Env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ctx&lt;/span>: &lt;span class="kt">ExecutionContext&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// A Cron Trigger can make requests to other endpoints on the Internet,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// publish to a Queue, query a D1 Database, and much more.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// We&amp;#39;ll keep it simple and make an API call to a Cloudflare API:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">resp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://api.cloudflare.com/client/v4/ips&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">wasSuccessful&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">resp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;success&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;fail&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// You could store this result in KV, write to a D1 Database, or publish to a Queue.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// In this template, we&amp;#39;ll just log the result:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`trigger fired at &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cron&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">wasSuccessful&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="c1">// The event handler is invoked whenever an HTTP request is made to your
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// worker. The request will trigger the event handler regardless of the
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// request method or URL path.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">request&lt;/span>: &lt;span class="kt">Request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">env&lt;/span>: &lt;span class="kt">Env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ctx&lt;/span>: &lt;span class="kt">ExecutionContext&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Response&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Hello from the scheduled worker at &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以通过在配置文件 wrangle.toml 或者 dashboard 中的设置中声明环境变量。环境变量通过传递进来的 env 参数使用。&lt;/p>
&lt;p>免费版主要是限制&lt;/p>
&lt;ul>
&lt;li>每次调用的 CPU 执行时间 10ms
&lt;ul>
&lt;li>官网中介绍用量很少，基本都不会超&lt;/li>
&lt;li>但实际跑下来发现好像超了也没事？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>每天的请求执行次数 100, 000&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202310282110476.png" alt="">&lt;/p>
&lt;h3 id="本地调试">本地调试&lt;/h3>
&lt;p>本地可以通过 wrangle 来进行开发调试和部署&lt;/p>
&lt;p>cron worker 可以通过 &lt;code>--test-scheduled&lt;/code> 参数，实现 http 调用 &lt;code>http://localhost:8787/__scheduled?cron=*+*+*+*+*&lt;/code> 触发 trigger.&lt;/p>
&lt;p>有些时候本地访问一些网站可能因为某些奇怪因素访问不了，可以通过 &lt;code>--remote&lt;/code> 参数，实现本地运行远程调试，这样就可以突破网络限制访问某些网站。另外也可以通过这个方法直接操作数据库，这样就可以直接在网站就看到数据库的更新情况。&lt;/p>
&lt;h3 id="non-standard-nodejs-runtime">non-standard Node.js runtime&lt;/h3>
&lt;p>cloudflare worker 本质上其实是 edge function，其实际的运行时并不是正宗的 node 环境，所以一些对于 node api 的使用，是可能会满足不了的。部分到 API cloudflare 的运行时实现了，在自己的代码中可以直接用。但往往通过 npm install 使用的依赖就容易会出现这种兼容性问题。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202310291635833.png" alt="">&lt;/p>
&lt;p>对于这些有兼容性问题的 npm 库，建议在本地运行时看看实际跑到的代码是否真的用到这些 node api，如果没有，只是在文件当中导入的话，可以注释掉。动态语言 js 的一个爽点就是，就算代码有问题，但只要没有跑到有问题的地方，也还是能跑，就算这样注释掉一个依赖导入，但只要调用的代码没有使用它们，照样能跑。&lt;/p>
&lt;p>如果调用的 node api 在 Cloudflare 中有实现的，通过换个方式导入也可以。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// Do this:
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">Buffer&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;node:buffer&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Do not do this:
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">Buffer&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;buffer&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="d1">D1&lt;/h2>
&lt;p>cloudflare 提供的关系型数据库&lt;/p>
&lt;p>创建数据库后可以在 worker 里面添加绑定，直接访问到数据库&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="p">[[&lt;/span>&lt;span class="nx">d1_databases&lt;/span>&lt;span class="p">]]&lt;/span>
&lt;span class="nx">binding&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;DB&amp;#34;&lt;/span> &lt;span class="c"># available in your Worker on env.DB&lt;/span>
&lt;span class="nx">database_name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;database&amp;#34;&lt;/span>
&lt;span class="nx">database_id&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;database_id&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>实际使用起来就是会在入口处传递 env，然后这个数据库的实例也随着 env 传进来，然后就可以手写 sql 进行数据处理了。&lt;/p>
&lt;p>数据库操作可以通过&lt;/p>
&lt;ul>
&lt;li>官网网页可以创建表，已经修改行数据
&lt;ul>
&lt;li>官网也提供一个 console 进行 sql 语句的执行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>也可以在命令后通过 wrangle 执行 sql 语句，从而更新数据库
&lt;ul>
&lt;li>这种方式还可以实现一些表结构的更新，比如增加一列&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>免费的用量限制&lt;/p>
&lt;ul>
&lt;li>最多创建 10 个数据库&lt;/li>
&lt;li>单个数据库 500MB&lt;/li>
&lt;li>每月读 5,000,000 行，写 100,000 行&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://scottyeung.top/my-images/%E6%88%AA%E5%B1%8F2023-10-28%2021.07.36.png" alt="">&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/serverless/">serverless</category><category domain="https://scottyeung.top/tags/JavaScript/">JavaScript</category><category domain="https://scottyeung.top/tags/Cloudflare/">Cloudflare</category><category domain="https://scottyeung.top/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/">云服务</category></item><item><title>拥抱 AI 的 Arc 浏览器</title><link>https://scottyeung.top/2023/ai-in-arc-browser/</link><guid isPermaLink="true">https://scottyeung.top/2023/ai-in-arc-browser/</guid><pubDate>Sun, 15 Oct 2023 08:00:00 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>虽然前面的使用小记中对于 Arc 浏览器进行了不少吐槽，但是其特色和美观的外表还是挺吸引我的，于是在自己的电脑上总是时不时又忍不住切换默认的浏览器到 Arc 上面。现在整体使用感觉还是挺不错的，除了看不到扩展的状态，需要在使用的时候点菜单来唤起扩展以外。&lt;/p>
&lt;p>在这次切换并更新 Arc 浏览器后，发现 Arc 浏览器在设置上多了一个关于 AI 的 tab，叫做 Max，看起来还挺有意思的。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202310142324997.png" alt="">&lt;/p>
&lt;p>根据这个设置页简单看了一下，主要有下面的功能：&lt;/p>
&lt;ul>
&lt;li>根据当前页面内容进行提问&lt;/li>
&lt;li>链接内容根据 AI 进行一个预览生成&lt;/li>
&lt;li>利用 AI 为打开 tab 的 title 和下载文件名进行智能命名&lt;/li>
&lt;li>拉起 ChatGPT 提问&lt;/li>
&lt;/ul>
&lt;p>实际使用了一下，想法挺不错的，但是还可以有进一步的改进空间&lt;/p>
&lt;h2 id="link-preview">link preview&lt;/h2>
&lt;p>这个超链接 preview 的功能挺有意思的，可以在打开前先看看链接描述的内容。生成 preview 格式是一句话的 title，加上一些分组列出的属性。生成 preview 的内容其实也算准确，不过现阶段生成的 preview 语言都是固定是英语的，即使我调了一下浏览器的 Preferred languages 改成英语，生成的 preview 也还是英语的。虽然没错，但是其实对于帮助了解链接内容讲什么作用不是很大，不过感觉这个提升空间很大，如果继续优化估计会很强。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202310142327077.png" alt="">&lt;/p>
&lt;h2 id="chatgpt">ChatGPT&lt;/h2>
&lt;p>拉起 ChatGPT 就是一个比较 normal 的功能了，通过 option + command + G (windows 下应该是 alt + ctrl + G) 唤起。不过本质其实就是个启动器，输入问题后就是跳转到 &lt;a href="https://chat.openai.com/">chat.openai.com&lt;/a> 页面进行提问回答了。（不过发现现在的 ChatGPT 官网是不是放开了对区域的限制？挂🇭🇰网络访问还是非常丝滑的）&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202310142345200.png" alt="">&lt;/p>
&lt;h2 id="页面内容提问">页面内容提问&lt;/h2>
&lt;p>传统的页面搜索唤起后，如果搜索不到内容，可以进行提问，估计也是唤起 ChatGPT 来提问？但我这里尝试了几次都是遇到问题，返回 &lt;code>Sorry, I encountered an error.&lt;/code>。上网一搜好像也不是个例，尝鲜不了。&lt;/p>
&lt;h2 id="智能重命名">智能重命名&lt;/h2>
&lt;p>Arc 浏览器一个挺有意思的改动，就是去除了收藏夹的概念，转变为 pin tab 的概念。现在把 tab pin 后把这个标签页的 title 智能重命名，变得更短更整洁，用起来也还好。个人理解其实就是相当于收藏页面的时候，用 AI 自动为它生成一个标题。这个功能还是有点用的，毕竟很多时候添加收藏其实都不会给它加标题，直接用它的标题可能会巨长，或者也描述不清。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E7%94%9F%E4%BA%A7%E5%8A%9B/">生产力</category><category domain="https://scottyeung.top/tags/%E5%B7%A5%E5%85%B7/">工具</category><category domain="https://scottyeung.top/tags/%E8%AE%B0%E5%BD%95/">记录</category><category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category><category domain="https://scottyeung.top/tags/AI/">AI</category></item><item><title>围城之内：一位程序员的生活反思与职业选择</title><link>https://scottyeung.top/2023/thoughts-of-programmer-career/</link><guid isPermaLink="true">https://scottyeung.top/2023/thoughts-of-programmer-career/</guid><pubDate>Sat, 14 Oct 2023 20:19:57 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>前两天在抖音刷到了一个同是 23 年应届的 Java 开发程序员，也是在深圳工作。按他视频的介绍，早上九点上班，然后看起来也似乎是住的比较远，从罗湖站附近坐地铁来南山这边上班，可能也需要个一小时。晚上平均大概十点走，有事可能还会更晚，比如软件发布。公司体量应该还行，月 base 也有差不多 20k。刷到的时候已经因为工作强度高，常加班且加班时间长等原因，选择裸辞。&lt;/p>
&lt;p>第一眼看到他的生活以及他的选择的时候，觉得走人确实没什么问题，自己作为也同样在互联网大厂工作的人来说，能够体会到他这种高强度长时间工作的累（身体上的累和心累）。不过其实细看他的生活，其实对于这样累的生活方式，其实有挺多是可以通过一些方法或者舍弃一些东西来缓解的。&lt;/p>
&lt;ul>
&lt;li>通勤时间太长。可能因为租房价格的原因，所以选择租得比较远，住罗湖区来南山区上班，通勤来回感觉得两个小时了，而且途径一些大站上地铁，排队挤地铁通勤的体验也实在不好，看视频等两三次地铁才能上简直是窒息。要么加点钱住近点（多掏个 2k 能舒服很多），要么舍弃点其他因素（比如合租而不是不整租）。原本工作时间就长了，还花这么多在通勤，很窒息。&lt;/li>
&lt;li>每天还自己做饭，晚上下班后到家才做饭吃，并且做好第二天的饭。做饭也花上不少的时间，备材料，做饭，洗碗筷收拾，又花上个一小时。而且最主要的是这样下班后才回家做饭吃，一是太晚吃东西，饿得难受，二是这样岂不是就少了晚上吃饭这个摸鱼的时间了吗？&lt;/li>
&lt;li>&lt;strong>在时间如此紧缺的情况下，不单没有接受这种处境，反而想要通过拼一点来与这种处境抗争。&lt;/strong> 比如十一点多才到家，不赶紧休息还去做个饭，晚上还剪下视频，到差不多两点钟才睡觉，然后早上7点钟又起床。这样纯靠意志力来抗衡，其实终究会是被消磨干净。&lt;/li>
&lt;/ul>
&lt;p>当然对于这样的生活，大家都可以选择不要，选择离开，有些时候是真的难顶，真的会顶不住。然而离开后又能干什么呢？或者说你能不能做出舍弃，比如放弃相当的收入，或者放弃在大城市工作的机会。&lt;/p>
&lt;p>看 up 裸辞爽玩了半个月不到，然后又开始焦虑地找工作，但是还是在这一行里面，还是找类似的开发工作，面试类似的工作，又能够找出多少例外？因为今年毕业且已经工作，基本都只能够走社招，但经验又只工作了几个月，求职也不太容易。最新的视频是最后拿到了平安银行的开发，工资可能十来 k，号称是晚上七点多下班。但就这家在脉脉的风评，以及评论区的现身说法，我感觉是难保证这个下班时间的。这个 offer 本质上和前面干不下去的那家又有什么区别呢？&lt;/p>
&lt;p>&lt;del>不过 up 也已经因为这些视频收获了一些粉丝，正如某评论说的，不如就干脆把找工作作为工作，当自媒体算了🤣。也可能可以是下一步我的副业方向。&lt;/del>&lt;/p>
&lt;p>现在的互联网计算机行业就像围城一样，外面的人看到工资都高都觉得程序员这份工作很好，里面的人则因为这种心累而选择退出。我还能熬多久自己也不知道，不过现在的心态也已经从以前我能卷过它们，我能克服一切，到现在理解，接受，成为。不过人的接受阈值终究是有一条界线在，能够坚持多久，其实不好说，毕竟其实也并非完全不可能。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202310142029272.png" alt="">&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E7%94%9F%E6%B4%BB/">生活</category><category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category><category domain="https://scottyeung.top/tags/%E8%AE%B0%E5%BD%95/">记录</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category><category domain="https://scottyeung.top/tags/%E5%90%90%E6%A7%BD/">吐槽</category><category domain="https://scottyeung.top/tags/%E5%81%A5%E5%BA%B7/">健康</category><category domain="https://scottyeung.top/tags/Java/">Java</category></item><item><title>gradle 项目如何发布到 Maven 中央库</title><link>https://scottyeung.top/2023/gradle-deploy-maven-central/</link><guid isPermaLink="true">https://scottyeung.top/2023/gradle-deploy-maven-central/</guid><pubDate>Sat, 16 Sep 2023 22:34:26 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>如何把开发完成的 gradle 项目的产物发布到 Maven Central Repository 中，让大家可以使用到你的成果？上周走了一遍流程，把写的剪贴板操作的一个简单项目发布了一下，发现有点麻烦的，流程比较长，而且使用 gradle 的话，gradle 更新实在是太快，兼容性也太差，导致网上搜到到文档，其实都不太一样，更难绷的是是连 &lt;a href="https://central.sonatype.org/publish/publish-gradle">sonatype 官方给出的 gradle 发布教学文档&lt;/a> 也是跟实际最新 gradle8 版本的不一致，因此只能参考下里面的流程，而细节只能靠自己摸索。&lt;/p>
&lt;h2 id="发布本质">发布本质&lt;/h2>
&lt;p>项目发布本质上是将项目打包成一个可用的 artifact，里面有编译好字节码，以及包含项目相关信息的配置 pom 文件。这些产物可以上传到可供大众使用到托管平台中，如 &lt;a href="http://links.sonatype.com/products/nexus/pro/home">Sonatype Nexus Repository&lt;/a>，并最终同步到 Central Repository 当中。当需要使用依赖时，声明依赖的标识 groupId:artifactId:version，构建工具 Maven/gradle 就会自动到这些仓库获取依赖并使用。因此发布的核心操作其实就两个&lt;/p>
&lt;ol>
&lt;li>项目打包成产物&lt;/li>
&lt;li>产物上传到托管平台&lt;/li>
&lt;/ol>
&lt;h2 id="发布流程">发布流程&lt;/h2>
&lt;p>这里以发布到 sonatype 的仓库为例，这是一个开源的 artifact 托管平台，大家都可以使用，产物也都是公开的。&lt;/p>
&lt;blockquote>
&lt;p>这里用的都是最新的 gradle 8.2&lt;/p>
&lt;/blockquote>
&lt;h3 id="创建-ticket">创建 ticket&lt;/h3>
&lt;p>想要发布产物到公开仓库，首先需要到 sonatype 注册一个 &lt;a href="https://issues.sonatype.org/secure/Signup!default.jspa">JIRA 帐号&lt;/a>，然后提交一个 issue，为需要发布的产物创建一个 &lt;a href="https://issues.sonatype.org/secure/CreateIssue.jspa?pid=10134&amp;amp;issuetype=21">ticket&lt;/a>。在这个 ticket 当中，需要填写将发布产物的基本信息，包括 groupId，项目地址，项目代码管理地址（SCM）。&lt;/p>
&lt;p>在填写好 ticket 后，会由 sonatype 来审核相关信息，并会确认用户是否对使用的 groupId 具有所有权（即是否有 groupId 倒过来的域名控制权），比如如果我想要用自己的域名 top.yeungyeah 作为 groupId，就会要求我给域名的 dns 加个解析。除了这些通用域名，还可以使用 GitHub 提供的 GitHub Page 作为域名，如 io.github.username，这个的验证方法就比较简单，去创个 GitHub repo 即可。所以发布时的 groupId 得需要考虑下，不能乱填了。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202309161941492.png" alt="">&lt;/p>
&lt;h3 id="完善项目">完善项目&lt;/h3>
&lt;p>sonatype 对于发布的项目有一定的质量要求，其中就要求，除了项目编译后 jar 包，还需要将项目的源代码，以及 javadoc 都一并上传发布到托管平台。这就需要在 gradle 的构建配置文件&lt;code>build.gradle.kts&lt;/code>当中进行额外的配置。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="n">java&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">withJavadocJar&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">withSourcesJar&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另外，发布的项目其最终生成的 pom 配置文件里包含的信息要求也是完整的，比如项目的开发者信息，开源的 license，都需要进行额外的配置。&lt;/p>
&lt;h3 id="maven-publish">maven-publish&lt;/h3>
&lt;p>看到这里可能有些人会觉得很奇怪，为什么用 gradle，但是一直在说 Maven 的发布，发布也是发布到 Maven 的中央仓库当中。其实 gradle 是可以支持很多类型的依赖，除了 maven 以外，也可以支持 ivy。不过 Maven 的使用现在要更加广泛，所以基本都是在用 maven 仓库当中的依赖（而且 gradle 好像也没有搞自己的依赖格式标准）。&lt;/p>
&lt;p>最新的 gradle 可以用其提供的 maven-publish 插件来完成发布相关的功能，而不是此前的 maven 插件，上面文档提到的许多配置，在这个新的 maven-publish 插件都不可用了😂&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="n">plugins&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>
&lt;span class="nd">`maven&lt;/span>&lt;span class="p">-&lt;/span>&lt;span class="n">publish&lt;/span>&lt;span class="err">`&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">publishing&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">publications&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">create&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">MavenPublication&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="s2">&amp;#34;maven&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 自行替换产物描述信息
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">groupId&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;io.github.yeung66&amp;#34;&lt;/span>
&lt;span class="n">artifactId&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;clipboard-jvm&amp;#34;&lt;/span>
&lt;span class="n">version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">version&lt;/span>
&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">components&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;java&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">pom&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 填充生成的 POM 信息
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;clipboard-jvm&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">description&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;A simple clipboard library for jvm.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;https://github.com/yeung66/clipboard-jvm&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">licenses&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">license&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;The Apache License, Version 2.0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://www.apache.org/licenses/LICENSE-2.0.txt&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">developers&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">developer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">id&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;yeung66&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;YeungYeah&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">email&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;email@host.com&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">scm&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">connection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;scm:git:git://github.com/yeung66/clipboard-jvm.git&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">developerConnection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;scm:git:ssh://github.com/yeung66/clipboard-jvm.git&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;https://github.com/yeung66/clipboard-jvm&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">repositories&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">maven&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;OSSRH&amp;#34;&lt;/span>
&lt;span class="n">url&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">URI&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">credentials&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">username&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">project&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">properties&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;ossrhUsername&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">String&lt;/span>
&lt;span class="n">password&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">project&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">properties&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;ossrhPassword&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">String&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中帐号密码可以放到用户目录下的 gradle.properties 当中，防止泄漏。&lt;/p>
&lt;h3 id="signing">signing&lt;/h3>
&lt;p>在生成产物后，还需要对生成的产物进行一次签名，这样托管平台才能确保这个上传是由本人完成，保证产物的可靠性。对发布产物签名，需要先生成自己的密钥，并使用直接的私钥文件签名。然后把公钥上传到公钥服务器上面，供托管平台取得公钥验证签名。&lt;/p>
&lt;p>具体步骤如下&lt;/p>
&lt;ol>
&lt;li>首先使用 gpg 生成自己的密钥，可参考阮一峰的 &lt;a href="https://www.ruanyifeng.com/blog/2013/07/gpg.html">这个文档&lt;/a>&lt;/li>
&lt;li>根据上面生成的密钥，取得私钥的路径，使用私钥的密码，公钥的 keyId，并填入 gradle.properties 文件当中。为了安全，不泄漏个人信息，一般这种敏感信息可以放到用户目录下的配置文件而不是项目当中的，这样就能够好地避免随着代码仓库上传到 GitHub 而被泄漏。
&lt;ul>
&lt;li>
&lt;pre>&lt;code class="language-property" data-lang="property">signing.keyId= #The last 8 symbols of the keyId
signing.password= #passphrase used to protect your private key
signing.secretKeyRingFile= #absolute path to the secret key ring file containing your private key
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>(Since gpg 2.1, you need to export the keys with command gpg --keyring secring.gpg --export-secret-keys &amp;gt; ~/.gnupg/secring.gpg).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>把公钥上传到公钥服务器上
&lt;ol>
&lt;li>&lt;img src="https://scottyeung.top/my-images/202309162022777.png" alt="">&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>在构建问题当中添加 signing 的插件，并进行配置
&lt;pre>&lt;code>plugins {
...
signing
}
signing {
sign(publishing.publications[&amp;quot;maven&amp;quot;])
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;p>在进行上面的配置后，执行构建发布任务时，会自动对构建产物进行一个签名。&lt;/p>
&lt;h3 id="执行发布">执行发布&lt;/h3>
&lt;p>直接执行 gradle 的发布任务即可&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202309162043253.png" alt="">&lt;/p>
&lt;p>执行顺利的话，项目会将编译得到的产物打包，签名，然后上传到托管平台当中。此时可以在 &lt;a href="https://central.sonatype.org/publish/release/">托管平台&lt;/a> 里面进行一个 release 发布。&lt;/p>
&lt;p>在 staging repositories 当中找到刚刚发布的产物，检查上传的文件无误后，点击 close 按钮，就会自动推进到检查阶段，检查发布的产物是否符合标准，这里面的检查就包括上面提到的质量检查，信息检查。检查通过后会就会发送邮件提醒，然后就可以点击 release 按钮，正式将产物发布。发布后产物会同步到 Maven Central 仓库当中，就可以在 &lt;a href="https://mvnrepository.com/">mvnrepository&lt;/a> 或者 &lt;a href="https://central.sonatype.com/">sonatype central&lt;/a> 查询到。
不过这个 staging 的步骤好像也能通过 &lt;a href="https://github.com/Codearte/gradle-nexus-staging-plugin/">插件&lt;/a> 进行自动化。如果可以自动化估计可以简单点。&lt;/p>
&lt;hr>
&lt;p>至此，gradle 项目就可以成功发布到 Maven Central 仓库当中，供大家使用了。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/gradle/">gradle</category><category domain="https://scottyeung.top/tags/jvm/">jvm</category><category domain="https://scottyeung.top/tags/Java/">Java</category><category domain="https://scottyeung.top/tags/kotlin/">kotlin</category><category domain="https://scottyeung.top/tags/maven/">maven</category><category domain="https://scottyeung.top/tags/coding-%E8%AE%B0%E5%BD%95/">coding 记录</category></item><item><title>JVM 当中的剪贴板访问</title><link>https://scottyeung.top/2023/clipboard-access-jvm/</link><guid isPermaLink="true">https://scottyeung.top/2023/clipboard-access-jvm/</guid><pubDate>Sun, 10 Sep 2023 20:00:00 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>起因是想要写一个 kotlin 的脚本，用于读取剪贴板中的内容并保存到文件当中。然而网上搜了一圈，java 和 kotlin 给出的方法都是通过 jdk 中的 awt 包来获取系统剪贴板。因为 kotlin 脚本还是跑的 jvm target，所以方法还是通用的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.awt.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.awt.datatransfer.DataFlavor&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.awt.datatransfer.UnsupportedFlavorException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.IOException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Test&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">UnsupportedFlavorException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">clipboard&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Toolkit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultToolkit&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getSystemClipboard&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">transferable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clipboard&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContents&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">transferable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTransferData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DataFlavor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stringFlavor&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">toolkit&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Toolkit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getDefaultToolkit&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">clipboard&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">toolkit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">systemClipboard&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DataFlavor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">stringFlavor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">String&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个方法用是能用，而且支持操作的数据类型还挺全，除了文本，还能读写图片。然而有一个缺点，就是使用时必须关掉 headless 选项。kotlin 默认是关掉的，需要显示声明配置 &lt;code>kotlin -Djava.awt.headless=false&lt;/code>来禁用掉。&lt;/p>
&lt;blockquote>
&lt;p>Headless mode is a system configuration in which the display device, keyboard, or mouse is lacking. Sounds unexpected, but actually you can perform different operations in this mode, even with graphic data.&lt;/p>
&lt;/blockquote>
&lt;p>禁用掉 headless 模式后是代码是可用，然而运行起来时会拉起一个 jre 程序，虽然这个拉起的程序没有界面，但是还是会强制跳转切换一次窗口，体感很差。于是只能另寻办法，选择使用 nodejs，最后找到了 &lt;a href="https://github.com/sindresorhus/clipboardy">clipboardy&lt;/a>，一个简单好用的 npm 库，先实现了我的需求。后来细细看了下它的实现代码，是通过调用命令后的方式来实现访问系统剪贴板。然而调用系统命令的话，各个系统环境的命令都不同，如何兼顾可移植性，在不同的系统环境都能运行呢？解决的办法也很简单粗暴，手动为每个系统都写一个实现，并且针对如果某些系统没有这个操作系统剪贴板的命令程序，还在 npm 包里附带一个二进制作为 fallback。简单，但可用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">import&lt;/span> &lt;span class="nx">process&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;node:process&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">isWSL&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;is-wsl&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">termux&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./lib/termux.js&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">linux&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./lib/linux.js&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">macos&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./lib/macos.js&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">windows&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./lib/windows.js&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">platformLib&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">platform&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;darwin&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">macos&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;win32&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">windows&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;android&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">env&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PREFIX&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s1">&amp;#39;/data/data/com.termux/files/usr&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;You need to install Termux for this module to work on Android: https://termux.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">termux&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="c1">// `process.platform === &amp;#39;linux&amp;#39;` for WSL.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">isWSL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">windows&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">linux&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">})();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>于是很自然地借鉴这个思路，用 kotlin 也来实现一版。代码实现可见 &lt;a href="https://github.com/yeung66/clipboard-jvm">clipboard-jvm&lt;/a>，实现的思路也是通过不同的操作系统，调用不同的 shell 命令，访问与操作系统剪贴板。对于执行外部命令&lt;/p>
&lt;p>使用起来也很简单&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">import&lt;/span> &lt;span class="nn">org.yeungyeah.clipboard.Clipboard&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">clipboard&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getClipboard&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">get&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">get&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>原本想把依赖库发布到 maven central 仓库，这样脚本就可以一行直接使用。然而 maven 发布实在是麻烦，研究了几个小时，还是被一些相关的检查卡点了，只能够先 install 到本地，给自己先用。&lt;del>后续上传到 maven central 后再更新，也顺便更新一篇文章如何 deploy to maven central.&lt;/del>&lt;/p>
&lt;p>部署到 maven central 仓库后，就可以通过配置直接导入依赖使用了。比如在 java 项目，通过&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>io.github.yeung66&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>clipboard-jvm&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.0.0&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者是在 kotlin script 中，直接&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="nd">@file&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">DependsOn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;io.github.yeung66:clipboard-jvm:1.0.0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">import&lt;/span> &lt;span class="nn">org.yeungyeah.clipboard.Clipboard&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">clipboard&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getClipboard&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">get&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">get&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>起飞🛫️。不过只是测试了在macOS系统下面的使用，按理说其他系统也是可行的，如果有兴趣的可以试试玩玩。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/Java/">Java</category><category domain="https://scottyeung.top/tags/kotlin/">kotlin</category><category domain="https://scottyeung.top/tags/coding/">coding</category><category domain="https://scottyeung.top/tags/%E5%B7%A5%E5%85%B7/">工具</category><category domain="https://scottyeung.top/tags/JavaScript/">JavaScript</category></item><item><title>Scripting in Kotlin</title><link>https://scottyeung.top/2023/Scripting-in-Kotlin/</link><guid isPermaLink="true">https://scottyeung.top/2023/Scripting-in-Kotlin/</guid><pubDate>Wed, 30 Aug 2023 20:01:30 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>最近又重新非常心仪 kotlin，甚至将自己的 rss 时间线聚合都重新用 kotlin 写了一次。kotlin 的各种函数式的写法确实很招我喜欢。因此就想要把它更加应用到自己的生活中，其中 code 在日常生活中最重要的部份，还是写点小脚本解决日常问题，于是就考察了一下使用 kotlin 来写脚本的方式。&lt;/p>
&lt;h2 id="kotlin-官方">kotlin 官方&lt;/h2>
&lt;p>一搜 kotlin scripting，第一个结果就是官方关于 scripting 的 &lt;a href="https://kotlinlang.org/docs/custom-script-deps-tutorial.html">文档&lt;/a>，我也到其提供的代码示例库去研究了一下，它主要提供了三种方式的 kotlin scripting 使用方式。&lt;/p>
&lt;h3 id="jsr223">jsr223&lt;/h3>
&lt;p>java 里面的一个已经实现了的提案，提供了一个可用于运行脚本的 host，通过使用外部依赖，可以使这个 host 支持 kotlin。main.kts 的功能似乎更强，可以导入别的脚本 &lt;code>@file:Import(&amp;quot;import-common.main.kts&amp;quot;)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">import&lt;/span> &lt;span class="nn">javax.script.ScriptEngineManager&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">engine&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ScriptEngineManager&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">getEngineByExtension&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;main.kts&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">!!&lt;/span>
&lt;span class="c1">// 或者
&lt;/span>&lt;span class="c1">// val engine = ScriptEngineManager().getEngineByExtension(&amp;#34;kts&amp;#34;)!!
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;gt; &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nd">`in&lt;/span>&lt;span class="err">`&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">reader&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">forEachLine&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">res&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">engine&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;gt; &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>需要依赖&lt;/p>
&lt;pre>&lt;code class="language-kts" data-lang="kts">runtimeOnly(&amp;quot;org.jetbrains.kotlin:kotlin-main-kts:$kotlinVersion&amp;quot;) // 可选
runtimeOnly(&amp;quot;org.jetbrains.kotlin:kotlin-scripting-jsr223:$kotlinVersion&amp;quot;)
&lt;/code>&lt;/pre>&lt;p>它的输出是直接打到 System.out 里面，但是也不会直接显示出来，需要截获它的输出，有点诡异&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">captureOut&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">outStream&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ByteArrayOutputStream&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">prevOut&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">out&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setOut&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PrintStream&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outStream&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">body&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">flush&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setOut&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prevOut&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">outStream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">trim&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="simple-main-kts">simple-main-kts&lt;/h3>
&lt;p>官方提供了 kotlin-scripting-common|jvm|jvm-host 的依赖库（但是在 experimental 中，而且在很久了）。&lt;/p>
&lt;p>这种方式本质也是通过创建一个 jvm 运行时 host 来执行，不过这个可以通过注解的方式，添加许多编译配置，从而获取声明的 maven 依赖。不过这样需要的额外配置还是很多，自定义工作很多。&lt;/p>
&lt;p>一方面通过注解来声明 kotlin script&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">import&lt;/span> &lt;span class="nn">kotlin.script.experimental.annotations.KotlinScript&lt;/span>
&lt;span class="c1">// The KotlinScript annotation marks a class that can serve as a reference to the script definition for
&lt;/span>&lt;span class="c1">// `createJvmCompilationConfigurationFromTemplate` call as well as for the discovery mechanism
&lt;/span>&lt;span class="c1">// The marked class also become the base class for defined script type (unless redefined in the configuration)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@KotlinScript&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="c1">// file name extension by which this script type is recognized by mechanisms built into scripting compiler plugin
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// and IDE support, it is recommendend to use double extension with the last one being &amp;#34;kts&amp;#34;, so some non-specific
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// scripting support could be used, e.g. in IDE, if the specific support is not installed.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fileExtension&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;simplescript.kts&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1">// the class is used as the script base class, therefore it should be open or abstract
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">abstract&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">SimpleScript&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以通过配置 @KotlinScript 注解来声明脚本的编译配置和执行配置&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="nd">@KotlinScript&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">fileExtension&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;smain.kts&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// the class or object that defines script compilation configuration for this type of scripts
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">compilationConfiguration&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">SimpleMainKtsScriptDefinition&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// the class or object that defines script evaluation configuration for this type of scripts
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">evaluationConfiguration&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">MainKtsEvaluationConfiguration&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="k">class&lt;/span>
&lt;span class="err">)&lt;/span>
&lt;span class="c1">// the class is used as the script base class, therefore it should be open or abstract. Also the constructor parameters
&lt;/span>&lt;span class="c1">// of the base class are copied to the script constructor, so with this definition the script will require `args` to be
&lt;/span>&lt;span class="c1">// passed to the constructor, and `args` could be used in the script as a defined variable.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">abstract&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">SimpleMainKtsScript&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">args&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据声明的 script class 来创建运行的 host。host 的创建其实就是通过之前注解声明的 Script class 来创建编译的 configuration，另外根据需要来创建 evaluate 时的 configuration，来编译执行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin"> &lt;span class="k">val&lt;/span> &lt;span class="py">compilationConfiguration&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">createJvmCompilationConfigurationFromTemplate&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">SimpleScript&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">jvm&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 声明需要的依赖，用于编译
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">dependenciesFromCurrentContext&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s2">&amp;#34;script&amp;#34;&lt;/span> &lt;span class="cm">/* script library jar name (exact or without a version) */&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">BasicJvmScriptingHost&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">scriptFile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">toScriptSource&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">compilationConfiguration&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="main-kts">main-kts&lt;/h2>
&lt;p>通过上面的配置，其实就已经可以实现一个简单的 kotlin scripting。只需要再封装一下，添加点功能，比如缓存，就可以变成一个可用的 scripting 工具。实际上 jetbrains 官方将这个封装成来一个 kotlin-main-kts.jar 供运行。&lt;/p>
&lt;p>可以把 kotlin script 命名成&lt;code>*.main.kts&lt;/code>，即可以直接用 kotlin 来运行脚本&lt;/p>
&lt;pre>&lt;code>kotlinc -cp &amp;lt;path/to/kotlin-main-kts.jar&amp;gt; script.main.kts
&lt;/code>&lt;/pre>&lt;p>在 Kotlin version 1.3.70 后，可以直接把这个 jar 都省掉，直接&lt;/p>
&lt;pre>&lt;code>kotlin script.main.kts
&lt;/code>&lt;/pre>&lt;p>或者直接在脚本里面写 shebang&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">
&lt;span class="err">#&lt;/span>&lt;span class="p">!/&lt;/span>&lt;span class="n">usr&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">bin&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">env&lt;/span> &lt;span class="n">kotlin&lt;/span>
&lt;span class="nd">@file&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">DependsOn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;org.jetbrains.kotlinx:kotlinx-html-jvm:0.8.0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">import&lt;/span> &lt;span class="nn">kotlinx.html.*;&lt;/span> &lt;span class="k">import&lt;/span> &lt;span class="nn">kotlinx.html.stream.*;&lt;/span> &lt;span class="k">import&lt;/span> &lt;span class="nn">kotlinx.html.attributes.*&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">addressee&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">firstOrNull&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">?:&lt;/span> &lt;span class="s2">&amp;#34;World&amp;#34;&lt;/span>
&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">createHTML&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">html&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">h1&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">+&lt;/span>&lt;span class="s2">&amp;#34;Hello, &lt;/span>&lt;span class="si">$addressee&lt;/span>&lt;span class="s2">!&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>真爽，看起来就是我想要的方案了。这个 main-kts 的方法，会对脚本进行缓存，第一次运行后，会编译保存到本地 cache 目录，如果内容没有更改，会直接把已编译版本拿来用。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202308302040485.png" alt="">&lt;/p>
&lt;p>而且官方仓库还说 idea 支持 main.kts 脚本的补全提示，看起来就更香了，用起来也还行，补全还是挺香的，尤其是加上 GitHub Copliot，起飞。&lt;/p>
&lt;blockquote>
&lt;p>Starting from the Kotlin IntelliJ plugin version 1.3.70, the .main.kts scripts are supported automatically in the IntelliJ IDEA, provided that they are placed outside of the regular source folders. E.g. if this project is imported into the IntelliJ, the demo scripts in the scripts folders should be properly highlighted and support navigation, including navigation into imported libraries.&lt;/p>
&lt;/blockquote>
&lt;h2 id="第三方支持">第三方支持&lt;/h2>
&lt;p>除了官方提供的 scripting 方法以外，也有一些第三方库因为各种原因，比如之前官方的 scripting 功能还没出的时候，造出一些用 kotlin scripting 写代码的方法&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kscripting/kscript">kscript&lt;/a> 是 GitHub 一个比较有名的 kotlin 脚本库。
&lt;ul>
&lt;li>可以提供更加丰富功能特性的 kotlin 脚本。比如编译缓存，使用外部依赖，设置运行时参数，从输入或者链接读取脚本内容以及将脚本发布成独立二进制文件。&lt;/li>
&lt;li>不过随着官方发布了正式的 scripting 功能，好像提到的大多功能特性都被覆盖到了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="">jbang&lt;/a> 是一个使用 jvm 语言写脚本的工具软件。jbang 支持的脚本语言就更多了，java，kotlin 都可以，而且 jbang 感觉是有意做成一个脚本平台广场，还可以将写好的代码发布到其提供的 app store 中，看起来也不错，idea 也可以通过插件提供自动补全对支持。不过其对于 kotlin 的支持好像也不怎么样，前两年刚接触的时候，还帮其修了一个 kotlin 编译的 bug。&lt;/li>
&lt;/ul>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>写脚本最主要的还是方便，而方便有两方面，一是写要方便，二是跑起来要方便，比如有个小任务，随手打开个 vscode 甚至都不同打开目录，就能有自动补全开写，并在命令行一行命令执行，完成。这样才叫方便。&lt;/p>
&lt;p>这样调研了一轮，看起来用 kotlin 脚本，方便地跑起来现在已经是没有问题了，问题就在于如何方便地写。写个小东西打开 idea 是否方便呢？如果是以前的 Windows，打开一次得等上个几分钟，那可以直接否掉了。但是现在新电脑打开 idea 几乎是秒开，看起来使用 idea 来写脚本好像又变得可以接受了。&lt;/p>
&lt;p>&lt;del>不过最后好像还是用F#来写香😂·&lt;/del>&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/kotlin/">kotlin</category><category domain="https://scottyeung.top/tags/%E5%B7%A5%E5%85%B7/">工具</category><category domain="https://scottyeung.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/">自动化</category></item><item><title>Arc 浏览器使用小记</title><link>https://scottyeung.top/2023/arc-browser/</link><guid isPermaLink="true">https://scottyeung.top/2023/arc-browser/</guid><pubDate>Wed, 02 Aug 2023 20:46:35 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>之前其实一直都有听说过 Arc 这个号称要改变浏览器格局，取代 Chrome 的浏览器，但是一直只有 Macos 版，不支持 Windows 系统，所以也只能一直观望。直到工作之后，拿到了 Mac 的工作电脑，然后自己也提了一台 MacBook，终于有机会可以体验了。于是马上下载下来，设成默认浏览器，体验一番。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/20230802204238.png" alt="">&lt;/p>
&lt;p>下载好打开 Arc 浏览器，给人的第一感觉是好看，它的设计以及动画特效，一看就有种花里胡哨的感觉，据说还得付出性能代价，不过实际使用过程中倒也没有察觉到有什么性能问题。&lt;/p>
&lt;p>实际使用下来，对比于 Chrome 系的浏览器，Arc 主要有下面这些特性&lt;/p>
&lt;ol>
&lt;li>垂直侧边栏。Arc 直接把顶部的标签栏，地址栏，收藏夹等都搬到侧边栏，以换取更大的浏览高度&lt;/li>
&lt;li>不同的标签机制。
&lt;ol>
&lt;li>Arc 没有了收藏夹和书签的概念，取而代之的是可以将页面 Pined 住，或者设成 Fav&lt;/li>
&lt;li>Arc 为了解决开太多标签难以关闭的问题，选择定时会关闭标签，标签打开最多 24 小时就会关闭，默认好像是几个小时。为了防止想看的 tab 被关，必须把它 Pin 住&lt;/li>
&lt;li>同时，针对日常在各种应用打开链接只是看一下的情况，Arc 提供小窗模式供临时打开一些链接，觉得有必要在点击到大窗&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>对于页面分屏良好支持，可以随时在当前页面分出一半打开其他页面。&lt;/li>
&lt;li>使用 Space 来取代多窗口。提供 Space 这个概念来隔离浏览器的使用，不同分组的标签和 Pined 页面可以放到不同的 space 当中使用。相对地，这里比较少用多窗口，甚至打开的新窗口之间会共享已经打开的标签页。&lt;/li>
&lt;/ol>
&lt;p>本质上，Arc 也是用的 Chromium 内核，所以其实 Chrome 支持的插件 Arc 都能支持，实际使用起来感觉也还好。但是我的评价是，Arc 浏览器确实是个有特性的浏览器，然后并不算是一个好用的浏览器，尤其是其中的一些概念，可能喜欢的人会很喜欢，但对我来说，感到束手束脚的。比如&lt;/p>
&lt;ol>
&lt;li>强行为用户做决定，强制关闭标签页。就这一点，意味在工作中需要一直开着许多工作页面的场景根本不能用 Arc。&lt;/li>
&lt;li>很别扭的标签页同步。一方面它希望你能够及时关闭看完的页面，但另一方面又自作主张把你把所有打开的标签页同步到每一个打开的窗口，甚至是电脑打开的标签页给你实时地同步到手机上。感觉其实用起来挺别扭的，尤其是很多时候其实手机电脑浏览的场景都是分开的。&lt;/li>
&lt;li>过分注重美观导致在一些细节上面有很多小问题，不好用，比如靠近右上角自动触发分屏提示，但有时有些按钮在右上角边缘，可能还会导致按不了。&lt;/li>
&lt;li>没有书签的概念后，收藏页面只能用 Pin，但是 Pin 又不能在 Space 上面共享，又变得要绑定于某一个 Space，最终也还是只用一个 Space，失去了 Space 的意义。&lt;/li>
&lt;li>一个浏览器居然强制登录才能使用，而登录居然还有墙的限制，从开始就给使用者加障碍了。&lt;/li>
&lt;li>移动端应用实在太简陋了，甚至没有无痕浏览。&lt;/li>
&lt;/ol>
&lt;p>Arc 作为一个很有特点的浏览器，玩玩可以，真沉浸投入使用，可能还是得忍受种种差异与不适，当然就像臭豆腐一样，总有人能接受，如果能够接受，那它的优点还是很香的。另外，Arc 似乎也有很高的定制性，可以自己定制样式，甚至区块布局，不过我探索的时间（和兴趣）有限，懒得折腾。但是大家有兴趣的话也可以玩一玩，试一试。&lt;/p>
&lt;p>从前在没有 MacBook 的时候，对于 Macos 专享的应用，内心总是有特别的向往，不过真的使用下来，好像又会觉得不过如此，或者仅是还行而已。最近 Macos 上也多了很多新软件，比如 Warp Terminal，Raycast，这些都有在用。可能也是自己还没有深度使用，或者用到它们的精髓，所以感觉也还比较一般。继续慢慢发掘。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E7%94%9F%E4%BA%A7%E5%8A%9B/">生产力</category><category domain="https://scottyeung.top/tags/%E5%B7%A5%E5%85%B7/">工具</category><category domain="https://scottyeung.top/tags/%E5%90%90%E6%A7%BD/">吐槽</category></item><item><title>表达的力量：写作与情绪宣泄</title><link>https://scottyeung.top/2023/power-of-expression/</link><guid isPermaLink="true">https://scottyeung.top/2023/power-of-expression/</guid><pubDate>Fri, 07 Jul 2023 23:14:39 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>在知乎看看到一个 &lt;a href="https://www.zhihu.com/question/610553893/answer/3105392840">回答&lt;/a>，对此颇为认同。&lt;/p>
&lt;blockquote>
&lt;p>当你意识到自己的表达能力或者自尊水平下降的时候，一定要非常非常小心警惕，这是很危险的征兆。表达真的很重要的，比看起来还要重要。把表达能力一直顶在一个比较高的状态上实际上是一种维持平衡跟自我保护的办法。大家一定要留一个地方来表达，无论表达什么内容都好。&lt;/p>
&lt;p>不要沉默，别怕嘴笨，习惯去表达。表达是另一种意义上的健身。&lt;/p>
&lt;/blockquote>
&lt;p>表达或输出不仅是展示自我的有效工具，更是一种释放情绪的有效方式。一直以来自己都只是集中于表达在前者的作用，着眼于输出的意义和作用。这种情况下，写作大多数是为了知识的积累与沉淀，以及是将这些内容和自己的一些想法和记录分享给大家，好是好，但难免会带点为了外在的功利心。&lt;/p>
&lt;p>同时其实自己也有在 OneNote 上面开启一个带有密码的笔记本来写一点随心的周记记录，虽然因为各种各样的原因搁置过，但是也断断续续地写了几年，也囤了不少的文字。虽然当时写作的心态，是为了记录当时发生过的事情和想法，方便以后重温，但是在通过写作表达内心想法的过程中，其实也无形中释放了许多负面的情绪。尤其当情绪比较郁闷而不想开始工作的时候，甚至可以每天在 OneNote 上面写个几百上千字，哪怕其实没有什么内容，在无病呻吟，但在写的过程和写完之后，心情总是会畅快得很。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202307071741719.png" alt="">&lt;/p>
&lt;p>昨晚在 B 站看到一个 &lt;a href="https://www.bilibili.com/video/BV1dm4y1J7n1">视频&lt;/a>，讲述了一个观点，为什么好人不长命。up 主认为，好人总是为考虑他人，为别人想很多，而这样想太多，就会在内心中积累很多的想法和情绪，但他是好人，他会为他人着想，会顾虑想法表达出来后对他人的影响，于是藏在心中。长久以来，思绪积聚易成气，气郁结则容易演化成结节，影响健康。&lt;/p>
&lt;p>我深表赞同这个 UP 主的观点，也觉得自己有时也会有这样的情况。我也不是说很好人，不过自己会很在意他人的想法，所以很多想法或者情绪都会藏在心中，自己消化，以免影响他人，影响关系，又或是影响自己所谓的“形象”。虽然偶尔也能于好友亲人吐槽，但是总有些时候，是找不到表达倾诉的对象，此时通过写作的方式把想法写下来就很有价值了，哪怕只是写给自己看，甚至自己以后不看，写出来了，就已经足够了。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202307072311304.jpg" alt="">&lt;/p>
&lt;p>然而，就像许多知道有好处的事情一样，写周记和表达自我也常常因为各种原因而难以坚持。尤其是当我习惯于使用电脑键盘敲字后，如果某个时候无法使用电脑，我就会放弃记录，这些积压在心中的想法和感受就会被遗忘，这实在是一种遗憾。如何更方便地使用手机等移动端进行记录和写作，将是后面一个探索的方向。（这篇文章的文字内容就是用手机的 obsidian 写出来的，然后用 vscode 整理具体的博客内容✌️）&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E5%86%99%E4%BD%9C/">写作</category><category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category><category domain="https://scottyeung.top/tags/%E8%BE%93%E5%87%BA/">输出</category><category domain="https://scottyeung.top/tags/%E8%AE%B0%E5%BD%95/">记录</category><category domain="https://scottyeung.top/tags/%E5%81%A5%E5%BA%B7/">健康</category><category domain="https://scottyeung.top/tags/%E5%BF%83%E6%80%81/">心态</category></item></channel></rss>