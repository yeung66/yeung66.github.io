<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>YeungYeah 的乱写地</title><link>https://scottyeung.top/</link><description>YeungYeah 的乱写地中记录了作者的所思所想及所为。</description><generator>Hugo 0.83.1 https://gohugo.io/</generator><language>zh-CN</language><managingEditor>yeungyeah@qq.com (YeungYeah)</managingEditor><webMaster>yeungyeah@qq.com (YeungYeah)</webMaster><lastBuildDate>Sun, 23 Apr 2023 03:21:10 +0000</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://scottyeung.top/atom.xml"/><item><title>Hugo 如何转义美元符号 $</title><link>https://scottyeung.top/2023/hugo-escape-dollar-sigh/</link><guid isPermaLink="true">https://scottyeung.top/2023/hugo-escape-dollar-sigh/</guid><pubDate>Thu, 13 Apr 2023 10:42:26 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>写上一篇博客的时候出现了一些美元符号 $，因为平时比较少用，所以发布后才发现这是个特殊字符，显示效果会有点问题，需要进行转义。不转义的话，可能就会当成行内公式来处理，显得很奇怪。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202304131045363.png" alt="">&lt;/p>
&lt;p>反应过来后很快就给这些 $ 符号添加上反斜杠 \ 来转义了，即使用&lt;code>1\$&lt;/code>的形式。因为文章还同时发布在 &lt;a href="https://blog.yeungyeah.top/">xLog&lt;/a> 的平台上面，所以修改后就直接在上面看效果，看起来没事，就重新发布了。&lt;/p>
&lt;p>然后今天发现主页上 hugo 的版本还是显示不正常，在本地跑了一下才发现，这样加一个反斜杠转义并没有转义效果。搜了一轮才意识到，应该是我的 Hugo 全局开了 MathJax 的问题。在开启 MathJax 的情况下，文章 markdown 会出现处理一轮，先做一轮转义，比如 &lt;code>\$&lt;/code> 会转义成 &lt;code>$&lt;/code>，然后再用 MathJax 扫描，如果这时还发现 $ 符号，自然就会当成公式再处理一遍，导致不能正常显示出 $。&lt;/p>
&lt;p>所以解决办法是，要么关掉 Hugo 的全局 MathJax，要么给反转义符再加一层转义，像下面一样。这两者都可以解决问题，使得文章正常显示 $。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-markdown" data-lang="markdown">花了 1\\\$ 手续费
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>最终为了方便在两个平台同时发布，还是选择了关掉了全局的 MathJax，然后再为出现了数学公式的文章添加 Front Matter&lt;/p>
&lt;p>mathjax: true&lt;/p>
&lt;/blockquote></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/Hugo/">Hugo</category><category domain="https://scottyeung.top/tags/%E5%8D%9A%E5%AE%A2/">博客</category></item><item><title>使用 Depay 绑定 OpenAI</title><link>https://scottyeung.top/2023/depay-and-openai/</link><guid isPermaLink="true">https://scottyeung.top/2023/depay-and-openai/</guid><pubDate>Tue, 11 Apr 2023 12:02:17 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>之前一直苦于没有外币信用卡，外面的很多服务都没有办法体验。然后刚好 4.1 号后 OpenAI 送的 credit 到期了，继续使用 ChatGPT 的 API 就需要绑定信用卡，才能够继续使用。没有办法，只能寻找办法办一张可以支付的卡。刚好看到土木坛子关于 &lt;a href="https://tumutanzi.com/archives/16984">depay 信用卡的介绍&lt;/a>，看起来还行，有支付的渠道，而且能用于 OpenAI 的付费，就搞了一张。&lt;/p>
&lt;h2 id="depay">Depay&lt;/h2>
&lt;p>Depay 支持申请 Master 卡，是一种预付型的信用卡。可以简单地理解成需要预先充值才能使用的银行卡。Depay 办卡本身还是挺容易的，麻烦在于后面的充值。&lt;/p>
&lt;h3 id="办卡">办卡&lt;/h3>
&lt;ol>
&lt;li>在 &lt;a href="https://depay.depay.one/web-app/register-h5?invitCode=737033&amp;amp;lang=zh-cn">Depay 网站&lt;/a> 或者 APP 上注册账号
&lt;ul>
&lt;li>可以用我的邀请码进行注册 737033
&lt;ul>
&lt;li>&lt;img src="https://scottyeung.top/my-images/202304111229402.jpg" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果是 IOS 用户的话，需要切换到美区才能够找到 Depay 的 app，国区的 Depay 测试已满，已经加不进去了&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在 APP 进行身份认证，然后录制一段小视频完成 KYC/AML 反洗钱程序，等待通过&lt;/li>
&lt;li>通过后就可以申请卡，有不同的卡片等级可以选择，不同等级有着不同的开卡费，月费，充值手续费的区别。个人感觉选个最低级别的其实就够了，后续用得多了还可以再升级。
&lt;ul>
&lt;li>&lt;img src="https://scottyeung.top/my-images/202304111225681.png" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>开了卡之后需要充值 5$ 还是 10$ 以上才能激活，获得卡号&lt;/li>
&lt;/ol>
&lt;h3 id="充值">充值&lt;/h3>
&lt;p>作为一张预付型的卡，Depay 需要先充值才能够再使用。Depay 主要是通过数字货币 USDT 来进行充值，只需要把 USDT 转到他们指定的账号上，然后就能够将其兑换成美元使用。当然 USDT 的获取在这里也不是那么容易，这里选择的是在 &lt;a href="https://www.cnouyi.care/">欧易交易所&lt;/a> 进行交易。&lt;/p>
&lt;ol>
&lt;li>首先在欧易注册个账号，并通过认证。&lt;/li>
&lt;li>然后通过快捷买币的方式获取 USDT，支付方式支持使用支付宝。这里购买的 USDT 并不能马上提现，需要等 24 小时才能提现出去。&lt;/li>
&lt;li>在 Depay 获取充值的地址，注意选择一致的网络，比如我选择的是 TRC20
&lt;ol>
&lt;li>充值是有最小金额限制的，一般需要大于 5USDT，&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>提现后大概等十来分钟 USDT 就能入账到 Depay&lt;/li>
&lt;li>将 Depay 当中入账的 USDT 转换成 USD，就可以充值到申请的卡当中，充值完成后就可以获取到卡号等相关信息，算是激活成功了&lt;/li>
&lt;/ol>
&lt;p>在充值过程中，从欧易提现 USDT 花了 1$ 手续费，然后充值到 Depay 当中又收了 1.35% 的手续费（这个还有个最小 1$ 的限制），最后 USDT 转成美元又有损耗（1USDT 约等于 0.99USD）。这样一轮转换下来，我原本是买了 50USDT，最终搞定转入卡中的 USD 只有 47.5$ 左右，过程大概花了 2.5$ 的手续费。总的来说手续费还是有点点高的，因此最好充值的时候考虑一次性充值足够的钱，当然也不要太多，&lt;del>Depay 跑路就麻烦了&lt;/del>，看手续费来衡量吧。&lt;/p>
&lt;h2 id="openai-绑定">OpenAI 绑定&lt;/h2>
&lt;p>有了卡之后就可以去 OpenAI 处添加消费方法，绑卡。绑卡主要填写的内容是卡号，安全码，以及账单地址。卡的信息可以在 Depay 的 app 上面找到，地址信息可以到一些地址生成网站获取，如 &lt;a href="https://www.haoweichi.com/Index/custom_result">haoweichi&lt;/a>。&lt;/p>
&lt;p>然而 OpenAI 的风控非常的诡异，除了限制国内许多的信用卡外，很多时候还会因 IP 而不让绑卡。网上的说法五花八门，比如让开全局代理，开无痕模式，甚至还说要梯子的 IP 要跟填写的地址一致的。根据亲身体验，其实并不一定要使用美国的 IP，而且 IP 和填写的地址也不一定需要一致。相反地，感觉非美国的其它区域的 IP 地址可能回因为冷门点反而更好通过。最后我是使用了一个日本还是新加坡的节点，在第四次的时候成功绑定。&lt;/p>
&lt;p>在绑定 OpenAI 之后，卡会扣 5$ 的授权额度，然后应该是根据每个月使用的情况进行扣费，到时候还得看能不能顺利扣费成功🤣&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/AI/">AI</category><category domain="https://scottyeung.top/tags/%E8%AE%B0%E5%BD%95/">记录</category><category domain="https://scottyeung.top/tags/%E6%94%AF%E4%BB%98/">支付</category><category domain="https://scottyeung.top/tags/%E5%B7%A5%E5%85%B7/">工具</category></item><item><title>无意识 Preferences</title><link>https://scottyeung.top/2023/unconscious-preference/</link><guid isPermaLink="true">https://scottyeung.top/2023/unconscious-preference/</guid><pubDate>Sun, 09 Apr 2023 11:07:33 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>前几天关注的一个 up &lt;a href="https://space.bilibili.com/1322440019?spm_id_from=333.337.0.0">難聽歌手俱樂部&lt;/a>，因为新视频中继续吐槽了某位女歌手，惹来了众多的粉丝攻击，然后 up 受不了了，发动态表示停更了。这个 up 主要是做一些香港歌手的难听现场的合集点评，一直以来我都是看个乐子，有些现场确实会让人忍不住发笑，在这个 up 的视频里面我也确实见识到了“歌手”的多样性 &lt;del>，确实什么样的人都可以做歌手&lt;/del>。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202304091128898.png" alt="">&lt;/p>
&lt;p>对于停更这个事情，知道后感觉到很魔幻，想不到还真的会有人较真起来。本来是否唱得难听这件事，就是一件很主观的事情，每个人的程度都不一样，有些人要求高，有些人要求低。然而评论里居然还有人会搬出既然要吐槽，怎么没有 XX，怎么又有 XX，up 是不是对 XX 有偏见，是不是双标。然而之前连发几个吐槽 Mirror 视频的时候大家都还是乐呵呵地跟着笑，那时就没有人说 up 是双标了。但是如果说到了某个女星，就会变成她其实还好，她还年轻，应该多给机会她。&lt;/p>
&lt;p>想了想，会出现这种事情的原因，还是因为自己喜欢的人或事被别人评价了，因此可能就会觉得自己所爱被攻击了。到这个时候，在评论区争辩其实就变成了立场的战争，变成了守卫自己的所爱了。有 preference 其实是很合理的事情，但 preference 被别人锐评时，自己还能不能保持理智的思考，就是一个能力了。&lt;/p>
&lt;p>晚上的时候自己其实也忽然想到，如果自己支持的某个歌手或者艺人，也被这样锐评了，我还能够笑得出来吗？然后转念一想，自己之前很喜欢听 AGA 的歌，也很喜欢她，但还是不妨碍我在 up 这里乐呵呵地看 &lt;a href="https://www.bilibili.com/video/BV1Lr4y1G72s/?spm_id_from=333.999.0.0&amp;amp;vd_source=2a7aa969015404d2b62ea4a38e2bfbf7">up 吐槽 AGA 唱歌&lt;/a> ，但也可能是我不够爱吧哈哈。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category></item><item><title>Why Firefox?</title><link>https://scottyeung.top/2023/why-firefox/</link><guid isPermaLink="true">https://scottyeung.top/2023/why-firefox/</guid><pubDate>Sun, 26 Mar 2023 17:39:50 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>此前一直使用微软自带的密码管理工具。PC 端可以使用 Edge 提供的密码填充和查询功能，移动端则可以通过微软推出的 Authenticator 作为手机的密码管理工具。虽然好用，但基本上意味着 PC 的浏览器需要和 Edge 及微软强绑定。如果想换其他浏览器，就不太方便了。&lt;/p>
&lt;p>最近两周，我开始使用 Bitwarden 作为密码管理器，从而摆脱了对 Edge 的依赖。于是，我立即更新了电脑上的 FireFox 浏览器，并尝试将其作为默认浏览器使用。使用体验还不错，它拥有我需要的所有功能，表现与 Chrome 和 Edge 差不多。&lt;/p>
&lt;p>然而，FireFox 的表现只是还可以，实际上没有太多出彩的地方，只能说它接近或者差不多好于 Edge。这也并不是 FireFox 的问题，因为它已经很好地完成了自己的任务，而浏览器很难做出令人惊艳的创新。&lt;/p>
&lt;p>但是这种只是表现差不多的程度，遇上使用人数上的极大差距，就会变得很没有竞争力。例如，最近 ChatGPT 很火，出现了许多相关插件。我看上了一个整合各种 AI 的 Chathub 插件，但它没有 FireFox 版本，因此我又改回了 Edge，尽管后来我也没有太多使用这个插件。&lt;/p>
&lt;p>当新软件面临着已经形成的庞大用户群体，这些用户群体拥有成熟且庞大的社区时，该怎么办呢？这确实很难。&lt;/p>
&lt;p>如果还有使用 FireFox 浏览器的用户，请在评论区分享你使用它的原因，说服更多的人加入。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category><category domain="https://scottyeung.top/tags/%E5%B7%A5%E5%85%B7/">工具</category><category domain="https://scottyeung.top/tags/%E5%90%90%E6%A7%BD/">吐槽</category><category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category></item><item><title>AI 时代，Prompting 时代</title><link>https://scottyeung.top/2023/prompt-times-coming/</link><guid isPermaLink="true">https://scottyeung.top/2023/prompt-times-coming/</guid><pubDate>Wed, 15 Mar 2023 17:52:25 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>一早醒来，就看到 OpenAI 发布的新一代 GPT-4 模型刷屏，加上之前火热的 &lt;a href="chat.openai.com">chatGPT&lt;/a>，似乎真人工智能时代已到，大家都开始尝试使用 AI，各种各样的场景都在尝试用 AI，看起来确实前途光明，机会满满。在看着如此强势的 AI 的表现下，有人开始调侃以后许多职业可以被取代了，比如我们写代码的，还要啥 software engineer，不如 prompting engineer，直接让 AI 写就好了。当然对于我这个一直在用 GitHub Copilot 的人来说，面对 ai 的态度早就是打不过就加入了，当然是积极拥护 AI 的发展。&lt;/p>
&lt;p>在这个背景下，许多 AI 使用的教学开始火热起来，甚至在推特上还看到有人在收费卖 chatGPT 的使用课程，确实有商业头脑。于是我也不能落后，在今天刷到一个 &lt;a href="https://learnprompting.org">Learning Prompting&lt;/a> 的文档后，马上开学，争取成为一个及格的 prompting engineer.&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202304051948782.png" alt="">&lt;/p>
&lt;p>下面是一些看完文档记录的一些 notes，建议大家阅读前最好先体验下 chatGPT，毕竟如果找不到使用的方法，学来也没什么意义。&lt;/p>
&lt;h2 id="基本概念">基本概念&lt;/h2>
&lt;p>简单来说，prompt 就是告诉 AI 要怎么做，怎么满足你的需求。当中可以包括上下文，指令，以及一些提问与回答的例子。&lt;/p>
&lt;blockquote>
&lt;p>The process of instructing an AI to do a task is called prompting. We tell the AI a set of instructions (the prompt) and it performs the task. Prompts can be as simple as a question, or as complex as multiple paragraphs.&lt;/p>
&lt;/blockquote>
&lt;p>可能会有人感觉疑惑，为什么还需要学习专门的 prompt 呢？直接向它下命令，直接向它提问不就好了吗？然而现在的 AI 确实没有这么智能，很多时候并不能达到想要的效果。上面的文档中提到一个挺有意思的 case&lt;/p>
&lt;pre>&lt;code>What is 965*590? // 可能会返回错误答案
Make sure your answer is exactly correct.
What is 965*590?
Make sure your answer is exactly correct
// 重复强调后返回正确答案
&lt;/code>&lt;/pre>&lt;p>因此掌握一定的 prompt 技巧可以更好地得到想要的答案。&lt;/p>
&lt;h2 id="一些策略与技巧">一些策略与技巧&lt;/h2>
&lt;p>除了直接给指令与提问以外，下面的一些策略与技巧可能可以得到更好的效果。&lt;/p>
&lt;ol>
&lt;li>&lt;strong>角色扮演。&lt;/strong> 让 AI 扮演某个角色，来回答某些问题，或者做某些行为。比如是充当一个词源学家来解释单词的词根构造，或者是充当售后中心的服务人员，回答消费者的问题。
&lt;ol>
&lt;li>看到这个时突然有点开了点脑洞猜想上面的算数 case 为什么会出错，既然可以扮演角色，意味着其实可能在某种情况下扮演一个数学不好或者不会算数的人？&lt;/li>
&lt;li>这个东西其实还挺好玩的，除了扮演角色以外，还可以充当一些物品或者机器，甚至还看到过有人用 chatGPT 扮演一个 shell，并且成功执行命令&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>传递 context。直接的提问可能让 AI get 不到你想要传递的点，所以可以在 prompt 中传递上下文背景，或者通过连续对话的方式，让 AI 掌握上下文背景，有更多的信息来生成回答。&lt;/li>
&lt;li>Chain of Thought. 在 prompt 中先给出一些在答案中包含解释的 QA 例子，从而让 AI 在回答时也进行解释，通常地带解释的回答更加准确和详细。&lt;/li>
&lt;li>Zero shot Chain of Thought. &lt;strong>直接让 AI 在回答中给出解释，比如让它 'step by step' 回答&lt;/strong>。在某些情况下，可以做到不需要例子就能有 Chain of Thought 的效果。&lt;/li>
&lt;li>Self-Consistency. 基于 zero shot CoT，在 step by step 的过程中综合多次回答来选取正确答案。&lt;/li>
&lt;li>&lt;strong>提问或指示前先让其生成相应的知识&lt;/strong>。
&lt;ol>
&lt;li>如需要写一篇关于某内容的 post 时，可以让其先列出关于内容的若干事实，再开始写&lt;/li>
&lt;li>作用是让其知识生成和知识集成处于同一步骤&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Least to Most Prompting
&lt;ol>
&lt;li>将问题或者 case 分解成子问题求解&lt;/li>
&lt;li>在 CoT 教导解释时，可以用递归的方式来解释&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>借助工具。偶然刷到现在已经有工具可以根据需求的类别选择模块，快速生成 prompt，比如 &lt;a href="https://app.aiprm.com/">AIPRM&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>就这个发展趋势看下来，AI 降临到每一个人身边似乎已经是板上钉钉的事情了，即使是“服务在所在地区不可用”的情况下，国内的各家公司还是以自家的产品来为大家普及 AI 服务。这其实也是个好事情，毕竟不好用也比没得用好 &lt;del>，不过某种程度上算不算硬给人们造出个信息差呢？&lt;/del>。作为一个积极拥抱新技术新事物的人，我对于 AI 还是很乐观的，尤其是在感受 GitHub Copilot 的魅力之后，写代码简直离不开了。希望能够有机会尽快体验到 GPT-4，以及有条件订阅 chatGPT plus.&lt;/p>
&lt;p>所以作为普通人，应该如何应对这般趋势呢？感觉还是得靠下面三方面的能力，确保不被时代抛下：&lt;/p>
&lt;ol>
&lt;li>广泛获取阅读并提炼信息&lt;/li>
&lt;li>快速学习知识和工具的使用&lt;/li>
&lt;li>为问题提出解决方案并落实&lt;/li>
&lt;/ol>
&lt;p>希望自己能够做到，与大家共勉！&lt;/p>
&lt;hr>
&lt;p>最后附上一个 AI 生成的命题作文式后记，生成了几次都不是很满意，但是以足够应付一些没有意义的文字工作了。&lt;/p>
&lt;blockquote>
&lt;p>AI prompt 技术的出现，让我们看到了人工智能的无限潜力。然而，在使用 AI 技术时，我们也需要注意如何更好地引导 AI 解决问题。因为 AI 能力的发挥，很大程度上取决于我们所提供的输入数据和问题引导方式。如果我们不善于引导，AI 将会被困在一个不断重复的循环中，无法创造出真正的创新和价值。&lt;/p>
&lt;p>通过学习 AI prompt 的引导方法，我们也可以获得一些对我们自身有益的启示。例如，学习如何更好地理解问题，如何针对不同问题提供不同的引导方式，以及如何从问题中发现隐藏的机会和潜力。这些能力不仅可以帮助我们更好地引导 AI 解决问题，也可以帮助我们更好地应对现实生活中的各种挑战。&lt;/p>
&lt;p>当然，AI 技术的发展也需要我们保持一定的警惕性和负责任的态度。我们需要认真考虑 AI 技术带来的潜在风险和挑战，并积极寻求解决方案。只有在这样的前提下，我们才能更好地引导 AI 技术发挥它的潜力，为我们带来更多的创新和价值。&lt;/p>
&lt;/blockquote></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/AI/">AI</category><category domain="https://scottyeung.top/tags/coding/">coding</category><category domain="https://scottyeung.top/tags/%E5%B7%A5%E5%85%B7/">工具</category><category domain="https://scottyeung.top/tags/notes/">notes</category></item><item><title>别把软件开源当成理所当然</title><link>https://scottyeung.top/2023/open-source-issue/</link><guid isPermaLink="true">https://scottyeung.top/2023/open-source-issue/</guid><pubDate>Thu, 16 Feb 2023 16:53:34 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>早上刷推特的时候看到了一个文章，是 core-js 作者在前两天写的一篇 &lt;a href="https://github.com/zloirock/core-js/blob/master/docs/2023-02-14-so-whats-next.md">文章&lt;/a>，关于他开发开源软件的一些经历，其经历确实让人大开眼界，感到心酸。最让人感到感到震惊和心酸的是，作者投入许多精力开发和维护的 core-js，确实收获大家的关注和认可（GitHub 上有接近 20k 的 stars），而且这个软件库也被广泛使用（npm 上总下载量达到 90 亿，top 1000 的网站有 52% 使用 core-js，top 100 的网站有 75-80 使用）。&lt;/p>
&lt;p>然而这样的广泛认可和使用，并没有给作者带来什么收益，高峰期每个月几百刀的赞赏，跟维护该项目所需要的时间和精力根本就匹配不上。加上作者还处于一个无工作的状态和在一个比较敏感的国家，收入确实有点缺乏，甚至可以算得上贫困潦倒。这导致作者在出了交通事故后，没有筹到足够的钱进行赔偿，还进去坐了十个月的牢。很惨，但对于一些使用人员来说，觉得跟他们并没有什么关系，甚至觉得作者在项目当中提出的求助和求打赏的信息，是对于开源生态的污染，也因此收获了许多的 haters.&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202304051948549.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202304051948233.png" alt="">&lt;/p>
&lt;p>这样看下来，个人的开源真的是太难了，如果是没有一份正职且固定的收入，或者是能够将开源变现成收入和流量的方式，单靠开源项目这一条路，实在是难以养活自己，实在是难以坚持用爱发电，一直保持良好的开发和维护质量。尤其是对比于互联网行业 / cs 开发的高收入，实在是过于劝退。&lt;/p>
&lt;p>或许是开源项目使用起来过于简单和轻松了，在开源社区上面一搜，命令行一敲，别人的努力成果便能够马上为自己所用，使用者很容易忽略开源项目开发和维护所需要的精力和成果了。大家对于开源项目的态度也变得很理所当然，作者写出来给大家用是应该的，给大家提供维护和需求开发支持是应该的，甚至使用上的问题解答和技术支持，部分用户也觉得是作者和维护者的义务。而大多用户会用什么回报呢？给一个 star 以表赞赏。&lt;/p>
&lt;p>&lt;img src="https://scottyeung.top/my-images/202304051949719.png" alt="">&lt;/p>
&lt;p>前几个月，&lt;a href="https://scottyeung.top/2022/%E5%BD%93%E8%BD%AF%E4%BB%B6%E4%B9%A0%E6%83%AF%E5%BC%80%E6%BA%90%E4%B9%8B%E5%90%8E/">我还在沉浸于开源生态的美好&lt;/a>，觉得开源社区里面互助，分享，奉献的氛围很好，对于开发者而言很友好，甚至以前的自己也考虑要不要选择一份跟开源软件相关的工作，为社区做贡献。残酷的现实使人清醒，还是得考虑多点。也希望大家也能考虑多点，为开源社区和开源的开发者，don't take it for granted.&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category><category domain="https://scottyeung.top/tags/%E6%9D%82%E8%B0%88/">杂谈</category><category domain="https://scottyeung.top/tags/%E5%BC%80%E6%BA%90/">开源</category><category domain="https://scottyeung.top/tags/%E8%BD%AF%E4%BB%B6/">软件</category></item><item><title>小城市，小圈子</title><link>https://scottyeung.top/2023/small-city-small-coterie/</link><guid isPermaLink="true">https://scottyeung.top/2023/small-city-small-coterie/</guid><pubDate>Sat, 28 Jan 2023 16:19:37 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>最近，因为女朋友的原因，通过她的好姐妹，重新约上了小学时玩得很好的同学，四个人一起出去吃饭玩耍。开心是挺开心，不过在吃饭和逛街的过程中，却总是有种我已经不在这个圈子的感觉，尤其是听他们聊起高中的某某时，其中一个人提起，另一个人能够接得上，知道是谁，并一起八卦。虽然他们在高中也并不是同一个班，甚至也不一定认识，但清远这个小地方，最好的高中就这一个，在这里生活的人，通过关系搭上搭总能认识或者知道某个人。对于我这个高中就离开了清远，在广州上学的局外人来说，只感到陌生，也搭不上什么话，虽然女友也会跟我说她们高中的八卦，但对于不认识他们的我来说，只是一串名字以及他们的故事而已，并不能有太多的亲近感。&lt;/p>
&lt;p>很多时候也常想，如果当年中考考得没有那么的好，没有去广州上高中，而是留在清中上学，会是一种什么样的体验？这样的话，可以和更多的认识的人一起上高中，在清远留下更多的回忆，也能够认识更多这里的人。这样自然也不会脱离这里的圈子，回来也还能有很多朋友一起玩，大家的回忆里还能有我。去了广州上学，无疑是更好地打开了自己的眼界，让自己在高中时就见识到了更广阔的世界和更多的可能性。往好了说，这样的经历让自己早早就变得目标远大起来，往坏了说，在附中上高中的经历，也让自己的眼界和要求变得高了起来，很多东西都会看不上，于是对很多东西可能都不能够接受。当然这个其实也没有什么对错之说，在那个时间节点，我也只是做出了对当时的我看上去最正确的选择，也不可能回去。整体来说，在华附上学的这段经历，还是挺让我满意的。&lt;/p>
&lt;p>饭后和老同学的聊天中得知，小时候的一些同学回来清远后都考了公务员，这也与我自己所知道的，所感受到的一样：回来的同学，大多数都是往体制内或者是单位靠拢。毕竟小城市也没有太多更好的工作机会，回来也只能够进这些地方。这些回流的学生进入体制后，通过以前初高中时上学的经历，又重新和一些一起上过学的人建立链接，互相认识，形成了小圈子。这样的小圈子，对于我这种早已逃出的人，似乎有点难以加入，或者说，也有点劝退我。&lt;/p>
&lt;p>在上大学以后，我几乎可以说是从未想过回来清远工作，一方面是因为这里并没有太多合适且良好的工作机会，回来基本只能够进入单位或者体制内，然后可能一份工作就得干一辈子。但另一方面，更主要的原因就是，我是在逃避一些东西，比如人情，比如关系，比如圈子。我自认为我并不擅长这些，而在小城市里面，最重要的，最需要的，却反而是这些。这些东西虽说大城市里面也有，但大多时候底层的我们并不会接触到，或者说还用不上，只需要守规则，跟规矩走，毕竟大城市还是讲点面子。但小城市，实在是小，加上大多数都会选择涌入体制内，于是体制内基本上都有较多的熟人 / 同学，总会找到认识的人，关系就能够发挥较大的作用。&lt;/p>
&lt;p>于是乎，我感觉自己已经不适合留在这里，尽管小城市的房价更低，生活更加轻松，我还是选择跑去深圳工作，在大厂搬砖。不过我又是否能够在大城市生活下来，带着女朋友在那里组建家庭呢，也不好说，说不定我的最后出路，也是回流到小城市的体制内，当一个螺丝钉生活着。然而选择在哪里生活，也不过是一种不同的生活方式，希望自己在大城市也好，小城市也好，一样过好自己的生活，即使在工作以后，也真的是在“生活”吧。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category></item><item><title>2022 年度记录</title><link>https://scottyeung.top/2022/record-of-2022/</link><guid isPermaLink="true">https://scottyeung.top/2022/record-of-2022/</guid><pubDate>Sun, 25 Dec 2022 19:17:26 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>随着疫情防控政策的放开，各个高校都提前让学生回家，以避免在学校的感染高峰。我的 2022 年某种程度上也随着封控政策的结束，而提前宣告结束。因为政策的变化，我也得以能在 12 月就可以在家里写上年终总结，为 2022 画上句号。今年算是人生路上比较重要的一年，出现了许多新的第一次，第一次参加面试，第一次收到 offer，第一次自己完成论文投稿，第一次在异地租房生活工作，第一次带女朋友回家里吃饭......&lt;/p>
&lt;h2 id="一些数据">一些数据&lt;/h2>
&lt;ul>
&lt;li>过去一年在 LeetCode 上提交了 565 次，打了大概七八次周赛，最高打到了 392 名，还拿到了 Knight 段位。在 &lt;a href="https://github.com/yeung66/leetcode-everyday">repo&lt;/a> 当中新增了 344 个题解代码文件。
&lt;ul>
&lt;li>&lt;img src="https://scottyeung.top/my-images/202304052007010.png" alt="">&lt;/li>
&lt;li>&lt;img src="https://scottyeung.top/my-images/202304052007570.png" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>写了 18 篇博客，加起来超过 29000+ 字。&lt;/li>
&lt;li>Forest 上种了 1426 棵树，加起来时间有 46873 分钟。
&lt;ul>
&lt;li>&lt;img src="https://scottyeung.top/my-images/202304052007359.jpg" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>今年找实习和正式工作一共参加了大概 30+ 场笔试，40+ 场面试，写下了 34 篇面经。&lt;/li>
&lt;/ul>
&lt;h2 id="工作上">工作上&lt;/h2>
&lt;p>考虑到大多数国人对于职业道路失败的低容忍性，想要获得期望的职业发展，找到“理想的工作”，大家都需要按部就班地开始准备，那怕是明年毕业后才开始工作，大部队还是会选择在研二就开始准备找工作，最好是研究生开学就开始刷算法题，背八股文，准备项目，寒暑假甚至是上学期间就溜出去实习几段，通过这样的方式来刷好看一点简历。我也避免不了如此，在研二上学期就开始刷题，然后下学期的时候一边继续刷题，一般看八股文准备面试，同时还得完成科研任务，准备投小论文。多的时候可能一周几场面试，同时科研进度还不能落下，每周组会还是照常进行。&lt;/p>
&lt;p>当时累还是次要的，更多的感觉还是在于迷茫，时常就会陷入自己的努力有用吗这样的想法。尤其是很多时候面试和笔试的结果其实和自身的实力并不是强相关的，许多场外的因素，比如面试官面试内容的偏好，部门的缺人程度，岗位的要求，大环境的趋势等，都可能使得面试结果出现不一样。在大家的能力都达到某条 bar 后，其实水平都能够满足岗位需求，实力都相差无几。这种情况下找工作和实习，感觉就开始拼运气了，除非候选人是真的特别强，否则面试的表现其实都并不能反映出比较细微的差别。运气好的，出题基本都做过能够写出答出，而且还能够反映出自身某些方面的能力和知识点，运气不好的，面试过了都能因为公司政策变化原因而发不出 offer。&lt;/p>
&lt;p>某种程度上，到后期已经有点听天由命的感觉。不过也算是有点回报，找到了大厂实习，秋招也拿到了大厂的 offer。&lt;/p>
&lt;p>在这一年中，体验到了之前心心念念的成为社畜打工的体验。在学校时总是因为各种各样的原因，总是感觉自己在工作，周末也没有时间休息或者娱乐，因此想要通过工作强迫自己得到一个工作日的作息，能够在非工作日尽情玩耍。社畜的体验让我感觉新鲜有余，这样的生活方式也觉得挺适合我的。即使晚上九点下班十点到家，甚至还有余力跑去刷题，甚至还在实习期间接了个同学的网页外包并完成。有些时候，觉得自己其实很适合卷，虽然心里或者嘴上说着不想，但是行为还是挺符合的，也可能还需要被社会教育一顿，才能够真正了解到自身想要什么吧，才可以判断自己的选择到底是正确与否。不过总体而言，自己租房生活，自己赚钱自己花，这样的生活，我还是挺🉑的。&lt;/p>
&lt;h2 id="学业上">学业上&lt;/h2>
&lt;p>为了毕业，还是得完成科研任务。导师其实没有给出一个具体的研究目标，或者说具体做些什么。于是自己就这样摸爬滚打一般从软工领域中找些 idea，然后被导师或者现实否掉，然后重新找，直到找到一个导师觉得 ok 并且自己是可以做出来的（时间和能力上都能够满足），然后开始做。这样的过程中，一直在被 challenge 与提出问题，一方面自己对于所做工作的存在问题确实无能为力，无法解决，另一方面，自己又会觉得有些问题真的是问题吗，有必要考虑或者做成那样吗。但迫于各样的因素，尤其是自己科研只是为了毕业，现阶段的科研工作基本都是以导师为导向，导师怎么想，就怎么做，想要什么效果，投什么论文，都按导师说的做，只要能毕业就行了 &lt;del>（虽然以导师的为人实际上基本也不会卡我们的）&lt;/del>。&lt;/p>
&lt;p>这也使得我对于科研有着较强的抗拒性，虽然偶尔看论文时还是会发出好像我上我也行的想法，但现在的我已经基本断绝了科研这条路的想法，早早就消灭了读博的想法。这种需要一直在广泛边界内探索的工作，确实不适合我。&lt;/p>
&lt;h2 id="锻炼上">锻炼上&lt;/h2>
&lt;p>上研二后，杨氏太极协会中能教拳的小伙伴都搬去了鼓楼校区，于是此前的练拳安排就没了，我也没有学会杨协的套路，现在也已经忘得七七八八。而武术协会这边，王真人也因为毕业的原因离开了南大，仙林这边也只剩我自己一个人练。虽然现在自己的太极已经练得似乎是入了门，能够掌握到一点劲，能够感受到一点撑筋拔骨的感觉，但是这样没有人继续指导和研究，只有自己一个瞎练，感觉也很难继续进一步。于是，只能够自己看 b 站视频，或者看点相关的书，看看能不能“挖到宝”。在这种情况下，自己也开始看 b 站视频练习形意拳，简单站站三体式，打打五行拳。&lt;/p>
&lt;p>至于养生，最近还开始重试暑假期间接触的八部金刚功。这套功法这一年来突然在 b 站火起来，也引发了许多人的跟练。自己练了一下，确实挺有感觉的，确实是能够提升自身的阳气，锻炼到自身的气血的。希望后面也能够坚持下去，每天练习一遍。&lt;/p>
&lt;h2 id="生活上">生活上&lt;/h2>
&lt;p>和女朋友的感情感觉更加的稳定而强烈，情感上互相都更加的亲近和依赖。在这一年里，感觉迈入了不少的新阶段，互相陪伴经历了许多，也创造出了许多有意思的经历和回忆，值得一直回味。一起去泡温泉，实习期间的周末一起在深圳或者去广州玩，&lt;a href="https://www.bilibili.com/video/BV19e411N7ME/?spm_id_from=333.999.0.0">女友来南京找我玩&lt;/a>。只要待在一起，就会觉得舒服与自然，希望以后能够继续多待在一起。&lt;/p>
&lt;hr>
&lt;p>尽管争议很大，但突然而来的防控政策变化，还是使得我国的疫情防控方向往着放开的路上，不可逆的前进。对于每个人来说，感染似乎都已经是无可避免，家人已经开始阳了，就连在写这篇博客的我都开始出现症状，躲不过，只能做好防护，做好应对的准备。回想起今年的防控情况，算是把疫情的大多数状况都体验了一次，被赋黄码，每天核酸，小区被封，家里被封，学校被封。对我来说，种种的折腾，如果能够换来有用的效果，我也是能接受的。但当没有效果后，确实需要改变，改变方向也确实不是一件丢脸的事，更不能为了面子一直死撑。然而可惜的是，我们大多数人其实并不能左右这些政策的出台，只能被动接受，自己做好准备。相信自己，永远比相信 XX 有用。&lt;/p>
&lt;p>此前看到一个帖子提到此前疫情形势带来的一个大影响，就是给生活带来了许多不确定性，永远没有办法能够预想到自己什么时候会被黄码红码，什么时候成为密接被带走，什么时候会因为封控或隔离而无法出门办事。疫情发展得快，管理政策转变得更快，每一层都有自己的理解和解释，都有自己一套的做法。这样的不确定性使得大家的行为都被更加压抑，所有的决策和选择都会偏向保守。去任何一个地方都会担心自己所在地或者目的地有疫情，而导致落地就隔离，再加上政策的不明显和不确定，你也不知道会不会被隔离，隔离需要多久，于是就舍不得外出，避免可能的浪费自己的时间。国庆期间就是这样溜出学校和女朋友去玩，然而中途南京突然来了个疫情，于是担心学校突然被封，担心女友回去会被隔离，各种提心吊胆，虽然最终没事，但想起来这些还是觉得疲倦，尤其是对我这种心不够大的人来说，各种焦虑。&lt;/p>
&lt;p>不过放开还是清零，这样的争论已经没有意义了，每个政策都有其自身的问题，怎么选都要付出代价。网上各种声音之所以喊得响亮，无非是自己成为了代价那一方而被迫付出。我们小市民也只能努力准备，避免消耗，留存实力。&lt;/p>
&lt;p>希望明年大家都能够恢复活力吧！&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E8%AE%B0%E5%BD%95/">记录</category><category domain="https://scottyeung.top/tags/summary/">summary</category><category domain="https://scottyeung.top/tags/%E7%94%9F%E6%B4%BB/">生活</category></item><item><title>C# 爽点记录-2：并行任务</title><link>https://scottyeung.top/2022/csharp-merit-2/</link><guid isPermaLink="true">https://scottyeung.top/2022/csharp-merit-2/</guid><pubDate>Fri, 25 Nov 2022 12:58:22 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>之前有个小需求，想写个小工具来统计电脑上各个文件夹和文件的大小，方便自己找出占用空间多的文件夹进行清理，释放硬盘空间。代码实现起来很简单，利用各种编程语言提供的读取文件系统当中的文件和大小接口，然后做个累加统计就可。&lt;/p>
&lt;p>具体的思路是：&lt;/p>
&lt;ol>
&lt;li>读取目录下的所有文件和文件夹&lt;/li>
&lt;li>文件直接获取大小&lt;/li>
&lt;li>文件夹则递归调用计算函数，获取大小&lt;/li>
&lt;li>最后把所有文件和文件夹的大小累加起来&lt;/li>
&lt;/ol>
&lt;p>一个函数就能搞定，但是如果当目录下的文件夹数量太多，或者是目录的层级太深，跑起来就会很慢，尤其是通常来说硬盘里面的文件和文件夹数量这么多，随随便便就能跑个几十分钟（还是非磁盘的根目录）。&lt;/p>
&lt;p>于是想当然地就想着用多线程来并行计算加速。因为最开始的版本是用 Go 实现，所以就把每次递归调用变成了开一个协程来跑。一开始觉得可能会用太多的协程，占用过多资源，所以还写了个简单的协程池，然而这样限制协程数量的话，导致不够协程来计算新的文件夹，就会出现死锁的情况。所以就还是每个调用开个协程来跑，不过速度还是比较感人。&lt;/p>
&lt;p>然后昨晚看到一个 C# 的写法，一个函数就能够就能够简单开启并行任务，也不用像在 Go 里面用各种锁或者 channel 来进行数据同步。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="k">public&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">GetDirectorySize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">IO&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DirectoryInfo&lt;/span> &lt;span class="n">directoryInfo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">recursive&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">true&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">var&lt;/span> &lt;span class="n">startDirectorySize&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">directoryInfo&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="k">null&lt;/span> &lt;span class="p">||&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="n">directoryInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Exists&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">startDirectorySize&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//Return 0 while Directory does not exist.
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//Add size of files in the Current Directory to main size.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">foreach&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">fileInfo&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">directoryInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetFiles&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Threading&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Interlocked&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">ref&lt;/span> &lt;span class="n">startDirectorySize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fileInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">recursive&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//Loop on Sub Direcotries in the Current Directory and Calculate it&amp;#39;s files size.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Threading&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Tasks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Parallel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ForEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">directoryInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetDirectories&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">subDirectory&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Threading&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Interlocked&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">ref&lt;/span> &lt;span class="n">startDirectorySize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GetDirectorySize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">subDirectory&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">recursive&lt;/span>&lt;span class="p">)));&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">startDirectorySize&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//Return full Size of this Directory.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>C# 可以直接使用 &lt;code>System.Threading.Tasks&lt;/code> 来并行跑任务，然后通过 &lt;code>System.Threading.Interlocked&lt;/code> 直接原子式修改变量，能够直接在几十秒内扫描完 380+g 的整个盘，相比于需要差不多十分钟的Go 版本，速度简直惊人，加上 dotnet 还能直接打包成 exe，用起来体验简直起飞。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/dotnet/">dotnet</category><category domain="https://scottyeung.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/">并发编程</category><category domain="https://scottyeung.top/tags/%E5%B7%A5%E5%85%B7/">工具</category></item><item><title>当软件习惯开源之后</title><link>https://scottyeung.top/2022/%E5%BD%93%E8%BD%AF%E4%BB%B6%E4%B9%A0%E6%83%AF%E5%BC%80%E6%BA%90%E4%B9%8B%E5%90%8E/</link><guid isPermaLink="true">https://scottyeung.top/2022/%E5%BD%93%E8%BD%AF%E4%BB%B6%E4%B9%A0%E6%83%AF%E5%BC%80%E6%BA%90%E4%B9%8B%E5%90%8E/</guid><pubDate>Sat, 05 Nov 2022 12:57:58 +0800</pubDate><author>yeungyeah@qq.com (YeungYeah)</author><description>&lt;p>前几天遇上一个小需求，需要批量提取 pdf 的若干页面并合并成新的新的 pdf 文件。因为这个需求是需要在别人的电脑上跑，且对方并无太多相关的基础，所以自然考虑能够打包成单个可执行文件的解决方案。最终选择使用 Golang 来实现，把代码打包成单个 exe 给对方直接运行。&lt;/p>
&lt;p>在选好语言后，下一步很自然地就是寻找相关的工具库进行处理，简单地在 Google 搜索 &lt;code>go pdf process&lt;/code>，就在第一条搜索结果就找到了一个质量还不错的开源 pdf 处理库 —— &lt;a href="https://github.com/pdfcpu/pdfcpu">pdfcpu&lt;/a>，该工具不仅提供命令行工具，还提供能在代码封装好的 API，看了看文档和相应的例子，就能马上上手用了。&lt;/p>
&lt;p>这个需求挺快就解决了，不过后面突然对于 dotnet 心血来潮，想玩玩新版本的 dotnet7 和 dotnet 提供的单文件发布功能，又将这个需求打算用 dotnet 实现一次。当然核心的 pdf 处理功能还是打算找网上的工具库实现，使用类似的方法在 Google 一搜，相应的工具库还是挺多的，于是就找了第一个跟着文档操作了几下，好像没有问题，再多用几次后却发现，不能正常使用了，再一细看才发现，原来这是个商业软件，使用需要购买 license，免费版只能使用几次，而且因为是商业软件的缘故，有时候方法调试或者是跳转调用的函数定义，也因为调用库的代码被加密混淆，而无法清晰了解，如果使用过程出现了什么问题，也难以调试。&lt;/p>
&lt;p>重新回去 Google 搜索了一下 dotnet 当中的 pdf 处理库，然而搜索引擎靠前的都是需要付费的商业软件，免费版的或是限制使用次数，或是限制处理文档的页面数量，都满足不了我的需求。最终找到了一个开源的 pdf 处理库，但是功能羸弱，连加密解密功能都没有，只能选择放弃。不过想了一下，感觉也挺理所当然的，在这个领域方向上的商业软件比较强的情况下，开源软件天然受到压制，商业软件在维护人数，使用人数，搜索的 seo 上都有着较大的领先，搜索引擎一搜，基本前面都是商业软件以及使用他们的相关教程帖子和分享，因此开源软件得不到应有的关注，自然难以进展和反超。&lt;/p>
&lt;p>一直以来，我都已经把软件开源使用当作是一件习以为常的事情了，尤其是这种依赖工具库。只要有这个需求，自然就会有人写代码实现解决这个问题，重复的人和代码多了，于是便整理起来放到网上进行共享使用，形成一个依赖库供大家一起使用，在这个过程中也一起改进。后面的人在遇到这个问题之后，便能借助前人的智慧，轻松获取解决方案，这也是开源的魅力所在。&lt;/p></description><category domain="https://scottyeung.top/posts/">posts</category><category domain="https://scottyeung.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category><category domain="https://scottyeung.top/tags/dotnet/">dotnet</category><category domain="https://scottyeung.top/tags/Golang/">Golang</category><category domain="https://scottyeung.top/tags/%E8%BD%AF%E4%BB%B6/">软件</category><category domain="https://scottyeung.top/tags/%E5%BC%80%E6%BA%90/">开源</category></item></channel></rss>